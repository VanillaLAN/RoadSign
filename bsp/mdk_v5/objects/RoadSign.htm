<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\RoadSign.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\RoadSign.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Sat Feb 15 18:42:28 2025
<BR><P>
<H3>Maximum Stack Usage =       3200 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
rt_usbh_hub_irq &rArr; rt_usbh_hub_port_change &rArr; rt_usbh_attatch_instance &rArr; rt_usb_hcd_alloc_pipe &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[1b3]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1f7]">rt_assert_handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e9]">rt_kprintf</a><BR>
 <LI><a href="#[52a]">rt_hw_backtrace_frame_unwind</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e9]">rt_kprintf</a><BR>
 <LI><a href="#[52b]">rt_backtrace_frame</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e9]">rt_kprintf</a><BR>
 <LI><a href="#[68]">ACC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[68]">ACC_IRQHandler</a><BR>
 <LI><a href="#[499]">netconn_drain</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[499]">netconn_drain</a><BR>
 <LI><a href="#[4b9]">lwip_send</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[117]">lwip_sendto</a><BR>
 <LI><a href="#[635]">webclient_get</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[635]">webclient_get</a><BR>
 <LI><a href="#[4d5]">msh_exec_script</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[419]">msh_exec</a><BR>
 <LI><a href="#[2fa]">copydir</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2fa]">copydir</a><BR>
 <LI><a href="#[2f1]">directory_delete_for_msh</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f1]">directory_delete_for_msh</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[68]">ACC_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[26]">ADC1_2_3_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[e]">BusFault_Handler</a> from at32f435_437_int.o(i.BusFault_Handler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[28]">CAN1_RX0_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[29]">CAN1_RX1_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[2a]">CAN1_SE_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[27]">CAN1_TX_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[54]">CAN2_RX0_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[55]">CAN2_RX1_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[56]">CAN2_SE_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[53]">CAN2_TX_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[19]">CRM_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[4c]">DMA1_Channel1_IRQHandler</a> from drv_usart.o(i.DMA1_Channel1_IRQHandler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[4d]">DMA1_Channel2_IRQHandler</a> from drv_usart.o(i.DMA1_Channel2_IRQHandler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[4e]">DMA1_Channel3_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[4f]">DMA1_Channel4_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[50]">DMA1_Channel5_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[58]">DMA1_Channel6_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[59]">DMA1_Channel7_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[6d]">DMA2_Channel1_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[6e]">DMA2_Channel2_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[6f]">DMA2_Channel3_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[70]">DMA2_Channel4_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[71]">DMA2_Channel5_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[72]">DMA2_Channel6_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[73]">DMA2_Channel7_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[66]">DMAMUX_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[5f]">DVP_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[11]">DebugMon_Handler</a> from at32f435_437_int.o(i.DebugMon_Handler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[1f]">EDMA_Stream1_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[20]">EDMA_Stream2_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[21]">EDMA_Stream3_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[22]">EDMA_Stream4_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[23]">EDMA_Stream5_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[24]">EDMA_Stream6_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[25]">EDMA_Stream7_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[43]">EDMA_Stream8_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[51]">EMAC_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[52]">EMAC_WKUP_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[3d]">ERTCAlarm_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[17]">ERTC_WKUP_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[1a]">EXINT0_IRQHandler</a> from drv_gpio.o(i.EXINT0_IRQHandler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[3c]">EXINT15_10_IRQHandler</a> from drv_gpio.o(i.EXINT15_10_IRQHandler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[1b]">EXINT1_IRQHandler</a> from drv_gpio.o(i.EXINT1_IRQHandler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[1c]">EXINT2_IRQHandler</a> from drv_gpio.o(i.EXINT2_IRQHandler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[1d]">EXINT3_IRQHandler</a> from drv_gpio.o(i.EXINT3_IRQHandler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[1e]">EXINT4_IRQHandler</a> from drv_gpio.o(i.EXINT4_IRQHandler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[2b]">EXINT9_5_IRQHandler</a> from drv_gpio.o(i.EXINT9_5_IRQHandler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[18]">FLASH_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[60]">FPU_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[c]">HardFault_Handler</a> from context_rvds.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[34]">I2C1_ERR_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[33]">I2C1_EVT_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[36]">I2C2_ERR_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[35]">I2C2_EVT_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[5c]">I2C3_ERR_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[5b]">I2C3_EVT_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[d]">MemManage_Handler</a> from at32f435_437_int.o(i.MemManage_Handler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[b]">NMI_Handler</a> from at32f435_437_int.o(i.NMI_Handler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[57]">OTGFS1_IRQHandler</a> from drv_usbotgh.o(i.OTGFS1_IRQHandler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[3e]">OTGFS1_WKUP_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[5e]">OTGFS2_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[5d]">OTGFS2_WKUP_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[15]">PVM_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[12]">PendSV_Handler</a> from context_rvds.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[65]">QSPI1_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[64]">QSPI2_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[a]">Reset_Handler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[45]">SDIO1_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[67]">SDIO2_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[37]">SPI1_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[38]">SPI2_I2S2EXT_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[47]">SPI3_I2S3EXT_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[63]">SPI4_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[10]">SVC_Handler</a> from at32f435_437_int.o(i.SVC_Handler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[13]">SysTick_Handler</a> from drv_common.o(i.SysTick_Handler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[74]">SystemInit</a> from system_at32f435_437.o(i.SystemInit) referenced from startup_at32f435_437.o(.text)
 <LI><a href="#[16]">TAMP_STAMP_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[2c]">TMR1_BRK_TMR9_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[2f]">TMR1_CH_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[2d]">TMR1_OVF_TMR10_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[2e]">TMR1_TRG_HALL_TMR11_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[69]">TMR20_BRK_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[6c]">TMR20_CH_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[6a]">TMR20_OVF_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[6b]">TMR20_TRG_HALL_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[30]">TMR2_GLOBAL_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[31]">TMR3_GLOBAL_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[32]">TMR4_GLOBAL_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[46]">TMR5_GLOBAL_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[4a]">TMR6_DAC_GLOBAL_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[4b]">TMR7_GLOBAL_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[3f]">TMR8_BRK_TMR12_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[42]">TMR8_CH_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[40]">TMR8_OVF_TMR13_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[41]">TMR8_TRG_HALL_TMR14_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[48]">UART4_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[49]">UART5_IRQHandler</a> from drv_usart.o(i.UART5_IRQHandler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[61]">UART7_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[62]">UART8_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[39]">USART1_IRQHandler</a> from drv_usart.o(i.USART1_IRQHandler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[3a]">USART2_IRQHandler</a> from drv_usart.o(i.USART2_IRQHandler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[3b]">USART3_IRQHandler</a> from drv_usart.o(i.USART3_IRQHandler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[5a]">USART6_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[f]">UsageFault_Handler</a> from at32f435_437_int.o(i.UsageFault_Handler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[14]">WWDT_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[44]">XMC_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[157]">__main</a> from __main.o(!!!main) referenced from startup_at32f435_437.o(.text)
 <LI><a href="#[7e]">__wqueue_pollwake</a> from poll.o(i.__wqueue_pollwake) referenced from poll.o(i._poll_add)
 <LI><a href="#[76]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[b7]">_match_name</a> from object.o(i._match_name) referenced from object.o(i.rt_object_find)
 <LI><a href="#[136]">_pin_cmd</a> from dev_pin.o(i._pin_cmd) referenced from dev_pin.o(FSymTab)
 <LI><a href="#[b0]">_pin_control</a> from dev_pin.o(i._pin_control) referenced from dev_pin.o(i.rt_device_pin_register)
 <LI><a href="#[ae]">_pin_read</a> from dev_pin.o(i._pin_read) referenced from dev_pin.o(i.rt_device_pin_register)
 <LI><a href="#[af]">_pin_write</a> from dev_pin.o(i._pin_write) referenced from dev_pin.o(i.rt_device_pin_register)
 <LI><a href="#[ac]">_poll_add</a> from poll.o(i._poll_add) referenced from poll.o(i.poll_table_init)
 <LI><a href="#[7a]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[79]">_sbackspace</a> from _sgetc.o(.text) referenced 2 times from __0sscanf.o(.text)
 <LI><a href="#[7c]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[78]">_sgetc</a> from _sgetc.o(.text) referenced 2 times from __0sscanf.o(.text)
 <LI><a href="#[77]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[7f]">_thread_exit</a> from thread.o(i._thread_exit) referenced from thread.o(i._thread_init)
 <LI><a href="#[80]">_thread_timeout</a> from thread.o(i._thread_timeout) referenced from thread.o(i._thread_init)
 <LI><a href="#[c3]">_workqueue_thread_entry</a> from workqueue.o(i._workqueue_thread_entry) referenced from workqueue.o(i.rt_workqueue_create)
 <LI><a href="#[97]">accept_function</a> from api_msg.o(i.accept_function) referenced from api_msg.o(i.lwip_netconn_do_listen)
 <LI><a href="#[dc]">at32_configure</a> from drv_usart.o(i.at32_configure) referenced from drv_usart.o(.constdata)
 <LI><a href="#[dd]">at32_control</a> from drv_usart.o(i.at32_control) referenced from drv_usart.o(.constdata)
 <LI><a href="#[e0]">at32_dma_transmit</a> from drv_usart.o(i.at32_dma_transmit) referenced from drv_usart.o(.constdata)
 <LI><a href="#[df]">at32_getc</a> from drv_usart.o(i.at32_getc) referenced from drv_usart.o(.constdata)
 <LI><a href="#[81]">at32_hcd_init</a> from drv_usbotgh.o(i.at32_hcd_init) referenced from drv_usbotgh.o(i.at32_usbh_register)
 <LI><a href="#[d8]">at32_pin_attach_irq</a> from drv_gpio.o(i.at32_pin_attach_irq) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[d9]">at32_pin_dettach_irq</a> from drv_gpio.o(i.at32_pin_dettach_irq) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[db]">at32_pin_get</a> from drv_gpio.o(i.at32_pin_get) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[da]">at32_pin_irq_enable</a> from drv_gpio.o(i.at32_pin_irq_enable) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[d5]">at32_pin_mode</a> from drv_gpio.o(i.at32_pin_mode) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[d7]">at32_pin_read</a> from drv_gpio.o(i.at32_pin_read) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[d6]">at32_pin_write</a> from drv_gpio.o(i.at32_pin_write) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[de]">at32_putc</a> from drv_usart.o(i.at32_putc) referenced from drv_usart.o(.constdata)
 <LI><a href="#[12b]">at32_usbh_register</a> from drv_usbotgh.o(i.at32_usbh_register) referenced from drv_usbotgh.o(.rti_fn.3)
 <LI><a href="#[c4]">check_netdev_internet_up_work</a> from sal_socket.o(i.check_netdev_internet_up_work) referenced from sal_socket.o(i.sal_check_netdev_internet_up)
 <LI><a href="#[139]">clear</a> from cmd.o(i.clear) referenced from cmd.o(FSymTab)
 <LI><a href="#[14d]">cmd_backtrace</a> from kservice.o(i.cmd_backtrace) referenced from kservice.o(FSymTab)
 <LI><a href="#[142]">cmd_cat</a> from msh_file.o(i.cmd_cat) referenced from msh_file.o(FSymTab)
 <LI><a href="#[144]">cmd_cd</a> from msh_file.o(i.cmd_cd) referenced from msh_file.o(FSymTab)
 <LI><a href="#[140]">cmd_cp</a> from msh_file.o(i.cmd_cp) referenced from msh_file.o(FSymTab)
 <LI><a href="#[14a]">cmd_df</a> from msh_file.o(i.cmd_df) referenced from msh_file.o(FSymTab)
 <LI><a href="#[14b]">cmd_echo</a> from msh_file.o(i.cmd_echo) referenced from msh_file.o(FSymTab)
 <LI><a href="#[13e]">cmd_free</a> from msh.o(i.cmd_free) referenced from msh.o(FSymTab)
 <LI><a href="#[13b]">cmd_list</a> from cmd.o(i.cmd_list) referenced from cmd.o(FSymTab)
 <LI><a href="#[13f]">cmd_ls</a> from msh_file.o(i.cmd_ls) referenced from msh_file.o(FSymTab)
 <LI><a href="#[146]">cmd_mkdir</a> from msh_file.o(i.cmd_mkdir) referenced from msh_file.o(FSymTab)
 <LI><a href="#[147]">cmd_mkfs</a> from msh_file.o(i.cmd_mkfs) referenced from msh_file.o(FSymTab)
 <LI><a href="#[148]">cmd_mount</a> from msh_file.o(i.cmd_mount) referenced from msh_file.o(FSymTab)
 <LI><a href="#[141]">cmd_mv</a> from msh_file.o(i.cmd_mv) referenced from msh_file.o(FSymTab)
 <LI><a href="#[152]">cmd_ntp_sync</a> from ntp.o(i.cmd_ntp_sync) referenced from ntp.o(FSymTab)
 <LI><a href="#[13d]">cmd_ps</a> from msh.o(i.cmd_ps) referenced from msh.o(FSymTab)
 <LI><a href="#[145]">cmd_pwd</a> from msh_file.o(i.cmd_pwd) referenced from msh_file.o(FSymTab)
 <LI><a href="#[143]">cmd_rm</a> from msh_file.o(i.cmd_rm) referenced from msh_file.o(FSymTab)
 <LI><a href="#[14c]">cmd_tail</a> from msh_file.o(i.cmd_tail) referenced from msh_file.o(FSymTab)
 <LI><a href="#[149]">cmd_umount</a> from msh_file.o(i.cmd_umount) referenced from msh_file.o(FSymTab)
 <LI><a href="#[82]">cyclic_timer</a> from timeouts.o(i.cyclic_timer) referenced from timeouts.o(i.cyclic_timer)
 <LI><a href="#[82]">cyclic_timer</a> from timeouts.o(i.cyclic_timer) referenced from timeouts.o(i.sys_timeouts_init)
 <LI><a href="#[e6]">dfs_device_fs_close</a> from devfs.o(i.dfs_device_fs_close) referenced from devfs.o(.constdata)
 <LI><a href="#[ea]">dfs_device_fs_getdents</a> from devfs.o(i.dfs_device_fs_getdents) referenced from devfs.o(.constdata)
 <LI><a href="#[e7]">dfs_device_fs_ioctl</a> from devfs.o(i.dfs_device_fs_ioctl) referenced from devfs.o(.constdata)
 <LI><a href="#[ec]">dfs_device_fs_mount</a> from devfs.o(i.dfs_device_fs_mount) referenced from devfs.o(.constdata)
 <LI><a href="#[e5]">dfs_device_fs_open</a> from devfs.o(i.dfs_device_fs_open) referenced from devfs.o(.constdata)
 <LI><a href="#[eb]">dfs_device_fs_poll</a> from devfs.o(i.dfs_device_fs_poll) referenced from devfs.o(.constdata)
 <LI><a href="#[e8]">dfs_device_fs_read</a> from devfs.o(i.dfs_device_fs_read) referenced from devfs.o(.constdata)
 <LI><a href="#[ef]">dfs_device_fs_stat</a> from devfs.o(i.dfs_device_fs_stat) referenced from devfs.o(.constdata)
 <LI><a href="#[ed]">dfs_device_fs_statfs</a> from devfs.o(i.dfs_device_fs_statfs) referenced from devfs.o(.constdata)
 <LI><a href="#[ee]">dfs_device_fs_unlink</a> from devfs.o(i.dfs_device_fs_unlink) referenced from devfs.o(.constdata)
 <LI><a href="#[e9]">dfs_device_fs_write</a> from devfs.o(i.dfs_device_fs_write) referenced from devfs.o(.constdata)
 <LI><a href="#[f1]">dfs_elm_close</a> from dfs_elm.o(i.dfs_elm_close) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[f5]">dfs_elm_flush</a> from dfs_elm.o(i.dfs_elm_flush) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[f7]">dfs_elm_getdents</a> from dfs_elm.o(i.dfs_elm_getdents) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[f2]">dfs_elm_ioctl</a> from dfs_elm.o(i.dfs_elm_ioctl) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[f6]">dfs_elm_lseek</a> from dfs_elm.o(i.dfs_elm_lseek) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[fa]">dfs_elm_mkfs</a> from dfs_elm.o(i.dfs_elm_mkfs) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[f8]">dfs_elm_mount</a> from dfs_elm.o(i.dfs_elm_mount) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[f0]">dfs_elm_open</a> from dfs_elm.o(i.dfs_elm_open) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[f3]">dfs_elm_read</a> from dfs_elm.o(i.dfs_elm_read) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[fe]">dfs_elm_rename</a> from dfs_elm.o(i.dfs_elm_rename) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[fd]">dfs_elm_stat</a> from dfs_elm.o(i.dfs_elm_stat) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[fb]">dfs_elm_statfs</a> from dfs_elm.o(i.dfs_elm_statfs) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[fc]">dfs_elm_unlink</a> from dfs_elm.o(i.dfs_elm_unlink) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[f9]">dfs_elm_unmount</a> from dfs_elm.o(i.dfs_elm_unmount) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[f4]">dfs_elm_write</a> from dfs_elm.o(i.dfs_elm_write) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[129]">dfs_init</a> from dfs.o(i.dfs_init) referenced from dfs.o(.rti_fn.2)
 <LI><a href="#[10c]">dfs_net_close</a> from dfs_net.o(i.dfs_net_close) referenced from dfs_net.o(.constdata)
 <LI><a href="#[10d]">dfs_net_ioctl</a> from dfs_net.o(i.dfs_net_ioctl) referenced from dfs_net.o(.constdata)
 <LI><a href="#[110]">dfs_net_poll</a> from dfs_net.o(i.dfs_net_poll) referenced from dfs_net.o(.constdata)
 <LI><a href="#[10e]">dfs_net_read</a> from dfs_net.o(i.dfs_net_read) referenced from dfs_net.o(.constdata)
 <LI><a href="#[10f]">dfs_net_write</a> from dfs_net.o(i.dfs_net_write) referenced from dfs_net.o(.constdata)
 <LI><a href="#[101]">dhcp_coarse_tmr</a> from dhcp.o(i.dhcp_coarse_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[102]">dhcp_fine_tmr</a> from dhcp.o(i.dhcp_fine_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[83]">dhcp_recv</a> from dhcp.o(i.dhcp_recv) referenced from dhcp.o(i.dhcp_inc_pcb_refcount)
 <LI><a href="#[84]">dns_recv</a> from dns.o(i.dns_recv) referenced from dns.o(i.dns_alloc_random_port)
 <LI><a href="#[103]">dns_tmr</a> from dns.o(i.dns_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[9]">drv_close_pipe</a> from drv_usbotgh.o(i.drv_close_pipe) referenced 2 times from drv_usbotgh.o(.data)
 <LI><a href="#[8]">drv_open_pipe</a> from drv_usbotgh.o(i.drv_open_pipe) referenced 2 times from drv_usbotgh.o(.data)
 <LI><a href="#[7]">drv_pipe_xfer</a> from drv_usbotgh.o(i.drv_pipe_xfer) referenced 2 times from drv_usbotgh.o(.data)
 <LI><a href="#[6]">drv_reset_port</a> from drv_usbotgh.o(i.drv_reset_port) referenced 2 times from drv_usbotgh.o(.data)
 <LI><a href="#[12c]">elm_init</a> from dfs_elm.o(i.elm_init) referenced from dfs_elm.o(.rti_fn.4)
 <LI><a href="#[e4]">erase</a> from fal_flash_at32_port.o(i.erase) referenced from fal_flash_at32_port.o(.constdata)
 <LI><a href="#[94]">err_tcp</a> from api_msg.o(i.err_tcp) referenced from api_msg.o(i.lwip_netconn_do_close_internal)
 <LI><a href="#[94]">err_tcp</a> from api_msg.o(i.err_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[87]">eth_netif_device_init</a> from ethernetif.o(i.eth_netif_device_init) referenced from ethernetif.o(i.eth_device_init_with_flag)
 <LI><a href="#[153]">eth_rndis_frame_debug</a> from rndis_dev.o(i.eth_rndis_frame_debug) referenced from rndis_dev.o(FSymTab)
 <LI><a href="#[8b]">eth_rx_thread_entry</a> from ethernetif.o(i.eth_rx_thread_entry) referenced from ethernetif.o(i.eth_system_device_init_private)
 <LI><a href="#[8c]">eth_tx_thread_entry</a> from ethernetif.o(i.eth_tx_thread_entry) referenced from ethernetif.o(i.eth_system_device_init_private)
 <LI><a href="#[88]">etharp_output</a> from etharp.o(i.etharp_output) referenced from ethernetif.o(i.eth_netif_device_init)
 <LI><a href="#[100]">etharp_tmr</a> from etharp.o(i.etharp_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[ca]">ethernet_input</a> from ethernet.o(i.ethernet_input) referenced from tcpip.o(i.tcpip_input)
 <LI><a href="#[85]">ethernetif_linkoutput</a> from ethernetif.o(i.ethernetif_linkoutput) referenced from ethernetif.o(i.eth_device_init_with_flag)
 <LI><a href="#[91]">event_callback</a> from af_inet_lwip.o(i.event_callback) referenced from af_inet_lwip.o(i.inet_socket)
 <LI><a href="#[98]">event_callback</a> from sockets.o(i.event_callback) referenced from sockets.o(i.lwip_socket)
 <LI><a href="#[138]">fal</a> from fal_rtt.o(i.fal) referenced from fal_rtt.o(FSymTab)
 <LI><a href="#[8d]">finsh_rx_ind</a> from shell.o(i.finsh_rx_ind) referenced from shell.o(i.finsh_set_device)
 <LI><a href="#[12f]">finsh_system_init</a> from shell.o(i.finsh_system_init) referenced from shell.o(.rti_fn.6)
 <LI><a href="#[8e]">finsh_thread_entry</a> from shell.o(i.finsh_thread_entry) referenced from shell.o(i.finsh_system_init)
 <LI><a href="#[7b]">fputc</a> from fputc.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[90]">gps_rmc_sample_entry</a> from gps.o(i.gps_rmc_sample_entry) referenced from gps.o(i.gps_rmc_sample_entry_init)
 <LI><a href="#[131]">gps_rmc_sample_entry_init</a> from gps.o(i.gps_rmc_sample_entry_init) referenced from gps.o(.rti_fn.6)
 <LI><a href="#[b8]">idle_thread_entry</a> from idle.o(i.idle_thread_entry) referenced from idle.o(i.rt_thread_idle_init)
 <LI><a href="#[116]">inet_accept</a> from af_inet_lwip.o(i.inet_accept) referenced from af_inet_lwip.o(.constdata)
 <LI><a href="#[11d]">inet_getsockname</a> from af_inet_lwip.o(i.inet_getsockname) referenced from af_inet_lwip.o(.constdata)
 <LI><a href="#[11e]">inet_ioctlsocket</a> from af_inet_lwip.o(i.inet_ioctlsocket) referenced from af_inet_lwip.o(.constdata)
 <LI><a href="#[11f]">inet_poll</a> from af_inet_lwip.o(i.inet_poll) referenced from af_inet_lwip.o(.constdata)
 <LI><a href="#[111]">inet_socket</a> from af_inet_lwip.o(i.inet_socket) referenced from af_inet_lwip.o(.constdata)
 <LI><a href="#[e1]">init</a> from fal_flash_at32_port.o(i.init) referenced from fal_flash_at32_port.o(.constdata)
 <LI><a href="#[cb]">ip4_input</a> from ip4.o(i.ip4_input) referenced from tcpip.o(i.tcpip_input)
 <LI><a href="#[7d]">isspace</a> from isspace.o(.text) referenced 2 times from scanf_char.o(.text)
 <LI><a href="#[113]">lwip_bind</a> from sockets.o(i.lwip_bind) referenced from af_inet_lwip.o(.constdata)
 <LI><a href="#[112]">lwip_close</a> from sockets.o(i.lwip_close) referenced from af_inet_lwip.o(.constdata)
 <LI><a href="#[115]">lwip_connect</a> from sockets.o(i.lwip_connect) referenced from af_inet_lwip.o(.constdata)
 <LI><a href="#[123]">lwip_freeaddrinfo</a> from netdb.o(i.lwip_freeaddrinfo) referenced from af_inet_lwip.o(.constdata)
 <LI><a href="#[122]">lwip_getaddrinfo</a> from netdb.o(i.lwip_getaddrinfo) referenced from af_inet_lwip.o(.constdata)
 <LI><a href="#[120]">lwip_gethostbyname</a> from netdb.o(i.lwip_gethostbyname) referenced from af_inet_lwip.o(.constdata)
 <LI><a href="#[121]">lwip_gethostbyname_r</a> from netdb.o(i.lwip_gethostbyname_r) referenced from af_inet_lwip.o(.constdata)
 <LI><a href="#[11c]">lwip_getpeername</a> from sockets.o(i.lwip_getpeername) referenced from af_inet_lwip.o(.constdata)
 <LI><a href="#[119]">lwip_getsockopt</a> from sockets.o(i.lwip_getsockopt) referenced from af_inet_lwip.o(.constdata)
 <LI><a href="#[114]">lwip_listen</a> from sockets.o(i.lwip_listen) referenced from af_inet_lwip.o(.constdata)
 <LI><a href="#[9a]">lwip_netconn_do_bind</a> from api_msg.o(i.lwip_netconn_do_bind) referenced from api_lib.o(i.netconn_bind)
 <LI><a href="#[9b]">lwip_netconn_do_close</a> from api_msg.o(i.lwip_netconn_do_close) referenced from api_lib.o(i.netconn_close_shutdown)
 <LI><a href="#[9c]">lwip_netconn_do_connect</a> from api_msg.o(i.lwip_netconn_do_connect) referenced from api_lib.o(i.netconn_connect)
 <LI><a href="#[95]">lwip_netconn_do_connected</a> from api_msg.o(i.lwip_netconn_do_connected) referenced from api_msg.o(i.lwip_netconn_do_connect)
 <LI><a href="#[9d]">lwip_netconn_do_delconn</a> from api_msg.o(i.lwip_netconn_do_delconn) referenced from api_lib.o(i.netconn_delete)
 <LI><a href="#[9e]">lwip_netconn_do_disconnect</a> from api_msg.o(i.lwip_netconn_do_disconnect) referenced from api_lib.o(i.netconn_disconnect)
 <LI><a href="#[96]">lwip_netconn_do_dns_found</a> from api_msg.o(i.lwip_netconn_do_dns_found) referenced from api_msg.o(i.lwip_netconn_do_gethostbyname)
 <LI><a href="#[9f]">lwip_netconn_do_getaddr</a> from api_msg.o(i.lwip_netconn_do_getaddr) referenced from api_lib.o(i.netconn_getaddr)
 <LI><a href="#[a0]">lwip_netconn_do_gethostbyname</a> from api_msg.o(i.lwip_netconn_do_gethostbyname) referenced from api_lib.o(i.netconn_gethostbyname)
 <LI><a href="#[a1]">lwip_netconn_do_listen</a> from api_msg.o(i.lwip_netconn_do_listen) referenced from api_lib.o(i.netconn_listen_with_backlog)
 <LI><a href="#[a2]">lwip_netconn_do_newconn</a> from api_msg.o(i.lwip_netconn_do_newconn) referenced from api_lib.o(i.netconn_new_with_proto_and_callback)
 <LI><a href="#[a3]">lwip_netconn_do_recv</a> from api_msg.o(i.lwip_netconn_do_recv) referenced from api_lib.o(i.netconn_recv_data)
 <LI><a href="#[a4]">lwip_netconn_do_send</a> from api_msg.o(i.lwip_netconn_do_send) referenced from api_lib.o(i.netconn_send)
 <LI><a href="#[a5]">lwip_netconn_do_write</a> from api_msg.o(i.lwip_netconn_do_write) referenced from api_lib.o(i.netconn_write_partly)
 <LI><a href="#[10a]">lwip_netdev_netstat</a> from ethernetif.o(i.lwip_netdev_netstat) referenced from ethernetif.o(.constdata)
 <LI><a href="#[109]">lwip_netdev_ping</a> from ethernetif.o(i.lwip_netdev_ping) referenced from ethernetif.o(.constdata)
 <LI><a href="#[106]">lwip_netdev_set_addr_info</a> from ethernetif.o(i.lwip_netdev_set_addr_info) referenced from ethernetif.o(.constdata)
 <LI><a href="#[10b]">lwip_netdev_set_default</a> from ethernetif.o(i.lwip_netdev_set_default) referenced from ethernetif.o(.constdata)
 <LI><a href="#[108]">lwip_netdev_set_dhcp</a> from ethernetif.o(i.lwip_netdev_set_dhcp) referenced from ethernetif.o(.constdata)
 <LI><a href="#[107]">lwip_netdev_set_dns_server</a> from ethernetif.o(i.lwip_netdev_set_dns_server) referenced from ethernetif.o(.constdata)
 <LI><a href="#[105]">lwip_netdev_set_down</a> from ethernetif.o(i.lwip_netdev_set_down) referenced from ethernetif.o(.constdata)
 <LI><a href="#[104]">lwip_netdev_set_up</a> from ethernetif.o(i.lwip_netdev_set_up) referenced from ethernetif.o(.constdata)
 <LI><a href="#[118]">lwip_recvfrom</a> from sockets.o(i.lwip_recvfrom) referenced from af_inet_lwip.o(.constdata)
 <LI><a href="#[117]">lwip_sendto</a> from sockets.o(i.lwip_sendto) referenced from af_inet_lwip.o(.constdata)
 <LI><a href="#[11a]">lwip_setsockopt</a> from sockets.o(i.lwip_setsockopt) referenced from af_inet_lwip.o(.constdata)
 <LI><a href="#[11b]">lwip_shutdown</a> from sockets.o(i.lwip_shutdown) referenced from af_inet_lwip.o(.constdata)
 <LI><a href="#[12a]">lwip_system_init</a> from sys_arch.o(i.lwip_system_init) referenced from sys_arch.o(.rti_fn.2)
 <LI><a href="#[ad]">main_thread_entry</a> from components.o(i.main_thread_entry) referenced from components.o(i.rt_application_init)
 <LI><a href="#[13c]">msh_help</a> from msh.o(i.msh_help) referenced from msh.o(FSymTab)
 <LI><a href="#[150]">netdev_dns</a> from netdev.o(i.netdev_dns) referenced from netdev.o(FSymTab)
 <LI><a href="#[14e]">netdev_ifconfig</a> from netdev.o(i.netdev_ifconfig) referenced from netdev.o(FSymTab)
 <LI><a href="#[151]">netdev_netstat</a> from netdev.o(i.netdev_netstat) referenced from netdev.o(FSymTab)
 <LI><a href="#[14f]">netdev_ping</a> from netdev.o(i.netdev_ping) referenced from netdev.o(FSymTab)
 <LI><a href="#[135]">netdev_set_dhcp_status_test</a> from main.o(i.netdev_set_dhcp_status_test) referenced from main.o(FSymTab)
 <LI><a href="#[134]">netdev_set_status_test</a> from main.o(i.netdev_set_status_test) referenced from main.o(FSymTab)
 <LI><a href="#[8a]">netif_set_link_down</a> from netif.o(i.netif_set_link_down) referenced from ethernetif.o(i.eth_rx_thread_entry)
 <LI><a href="#[89]">netif_set_link_up</a> from netif.o(i.netif_set_link_up) referenced from ethernetif.o(i.eth_rx_thread_entry)
 <LI><a href="#[a6]">netifapi_do_netif_add</a> from netifapi.o(i.netifapi_do_netif_add) referenced from netifapi.o(i.netifapi_netif_add)
 <LI><a href="#[a7]">netifapi_do_netif_common</a> from netifapi.o(i.netifapi_do_netif_common) referenced from netifapi.o(i.netifapi_netif_common)
 <LI><a href="#[12d]">ntp_auto_sync_init</a> from ntp.o(i.ntp_auto_sync_init) referenced from ntp.o(.rti_fn.4)
 <LI><a href="#[a8]">ntp_sync_work_func</a> from ntp.o(i.ntp_sync_work_func) referenced from ntp.o(i.ntp_auto_sync_init)
 <LI><a href="#[a9]">pbuf_free_ooseq_callback</a> from pbuf.o(i.pbuf_free_ooseq_callback) referenced from pbuf.o(i.pbuf_pool_is_empty)
 <LI><a href="#[93]">poll_tcp</a> from api_msg.o(i.poll_tcp) referenced from api_msg.o(i.lwip_netconn_do_close_internal)
 <LI><a href="#[93]">poll_tcp</a> from api_msg.o(i.poll_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[e2]">read</a> from fal_flash_at32_port.o(i.read) referenced from fal_flash_at32_port.o(.constdata)
 <LI><a href="#[137]">reboot</a> from drv_common.o(i.reboot) referenced from drv_common.o(FSymTab)
 <LI><a href="#[aa]">recv_raw</a> from api_msg.o(i.recv_raw) referenced from api_msg.o(i.pcb_new)
 <LI><a href="#[c5]">recv_tcp</a> from api_msg.o(i.recv_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[ab]">recv_udp</a> from api_msg.o(i.recv_udp) referenced from api_msg.o(i.pcb_new)
 <LI><a href="#[126]">rt_hw_pin_init</a> from drv_gpio.o(i.rt_hw_pin_init) referenced from drv_gpio.o(.rti_fn.1)
 <LI><a href="#[cf]">rt_rndis_eth_close</a> from rndis_dev.o(i.rt_rndis_eth_close) referenced from rndis_dev.o(i.usbh_rndis_eth_device_init)
 <LI><a href="#[d2]">rt_rndis_eth_control</a> from rndis_dev.o(i.rt_rndis_eth_control) referenced from rndis_dev.o(i.usbh_rndis_eth_device_init)
 <LI><a href="#[cd]">rt_rndis_eth_init</a> from rndis_dev.o(i.rt_rndis_eth_init) referenced from rndis_dev.o(i.usbh_rndis_eth_device_init)
 <LI><a href="#[ce]">rt_rndis_eth_open</a> from rndis_dev.o(i.rt_rndis_eth_open) referenced from rndis_dev.o(i.usbh_rndis_eth_device_init)
 <LI><a href="#[d0]">rt_rndis_eth_read</a> from rndis_dev.o(i.rt_rndis_eth_read) referenced from rndis_dev.o(i.usbh_rndis_eth_device_init)
 <LI><a href="#[d3]">rt_rndis_eth_rx</a> from rndis_dev.o(i.rt_rndis_eth_rx) referenced from rndis_dev.o(i.usbh_rndis_eth_device_init)
 <LI><a href="#[d4]">rt_rndis_eth_tx</a> from rndis_dev.o(i.rt_rndis_eth_tx) referenced from rndis_dev.o(i.usbh_rndis_eth_device_init)
 <LI><a href="#[d1]">rt_rndis_eth_write</a> from rndis_dev.o(i.rt_rndis_eth_write) referenced from rndis_dev.o(i.usbh_rndis_eth_device_init)
 <LI><a href="#[b3]">rt_serial_close</a> from dev_serial.o(i.rt_serial_close) referenced from dev_serial.o(i.rt_hw_serial_register)
 <LI><a href="#[b6]">rt_serial_control</a> from dev_serial.o(i.rt_serial_control) referenced from dev_serial.o(i.rt_hw_serial_register)
 <LI><a href="#[b1]">rt_serial_init</a> from dev_serial.o(i.rt_serial_init) referenced from dev_serial.o(i.rt_hw_serial_register)
 <LI><a href="#[b2]">rt_serial_open</a> from dev_serial.o(i.rt_serial_open) referenced from dev_serial.o(i.rt_hw_serial_register)
 <LI><a href="#[b4]">rt_serial_read</a> from dev_serial.o(i.rt_serial_read) referenced from dev_serial.o(i.rt_hw_serial_register)
 <LI><a href="#[b5]">rt_serial_write</a> from dev_serial.o(i.rt_serial_write) referenced from dev_serial.o(i.rt_hw_serial_register)
 <LI><a href="#[bc]">rt_udisk_control</a> from udisk.o(i.rt_udisk_control) referenced from udisk.o(i.rt_udisk_run)
 <LI><a href="#[b9]">rt_udisk_init</a> from udisk.o(i.rt_udisk_init) referenced from udisk.o(i.rt_udisk_run)
 <LI><a href="#[ba]">rt_udisk_read</a> from udisk.o(i.rt_udisk_read) referenced from udisk.o(i.rt_udisk_run)
 <LI><a href="#[bb]">rt_udisk_write</a> from udisk.o(i.rt_udisk_write) referenced from udisk.o(i.rt_udisk_run)
 <LI><a href="#[be]">rt_usbh_hub_disable</a> from hub.o(i.rt_usbh_hub_disable) referenced from hub.o(i.rt_usbh_class_driver_hub)
 <LI><a href="#[bd]">rt_usbh_hub_enable</a> from hub.o(i.rt_usbh_hub_enable) referenced from hub.o(i.rt_usbh_class_driver_hub)
 <LI><a href="#[c1]">rt_usbh_hub_irq</a> from hub.o(i.rt_usbh_hub_irq) referenced from hub.o(i.rt_usbh_hub_enable)
 <LI><a href="#[c2]">rt_usbh_hub_thread_entry</a> from hub.o(i.rt_usbh_hub_thread_entry) referenced from hub.o(i.rt_usbh_hub_init)
 <LI><a href="#[c0]">rt_usbh_storage_disable</a> from mass.o(i.rt_usbh_storage_disable) referenced from mass.o(i.rt_usbh_class_driver_storage)
 <LI><a href="#[bf]">rt_usbh_storage_enable</a> from mass.o(i.rt_usbh_storage_enable) referenced from mass.o(i.rt_usbh_class_driver_storage)
 <LI><a href="#[128]">rt_work_sys_workqueue_init</a> from workqueue.o(i.rt_work_sys_workqueue_init) referenced from workqueue.o(.rti_fn.2)
 <LI><a href="#[127]">rti_board_end</a> from components.o(i.rti_board_end) referenced from components.o(.rti_fn.1.end)
 <LI><a href="#[125]">rti_board_start</a> from components.o(i.rti_board_start) referenced from components.o(.rti_fn.0.end)
 <LI><a href="#[132]">rti_end</a> from components.o(i.rti_end) referenced from components.o(.rti_fn.6.end)
 <LI><a href="#[124]">rti_start</a> from components.o(i.rti_start) referenced from components.o(.rti_fn.0)
 <LI><a href="#[12e]">sal_init</a> from sal_socket.o(i.sal_init) referenced from sal_socket.o(.rti_fn.4)
 <LI><a href="#[92]">sent_tcp</a> from api_msg.o(i.sent_tcp) referenced from api_msg.o(i.lwip_netconn_do_close_internal)
 <LI><a href="#[92]">sent_tcp</a> from api_msg.o(i.sent_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[c7]">tcp_accept_null</a> from tcp.o(i.tcp_accept_null) referenced from tcp.o(i.tcp_listen_with_backlog_and_err)
 <LI><a href="#[c6]">tcp_recv_null</a> from tcp.o(i.tcp_recv_null) referenced from tcp.o(i.tcp_alloc)
 <LI><a href="#[ff]">tcp_tmr</a> from tcp.o(i.tcp_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[99]">tcpip_init_done_callback</a> from sys_arch.o(i.tcpip_init_done_callback) referenced from sys_arch.o(i.lwip_system_init)
 <LI><a href="#[86]">tcpip_input</a> from tcpip.o(i.tcpip_input) referenced from ethernetif.o(i.eth_device_init_with_flag)
 <LI><a href="#[c8]">tcpip_tcp_timer</a> from timeouts.o(i.tcpip_tcp_timer) referenced from timeouts.o(i.tcp_timer_needed)
 <LI><a href="#[c8]">tcpip_tcp_timer</a> from timeouts.o(i.tcpip_tcp_timer) referenced from timeouts.o(i.tcpip_tcp_timer)
 <LI><a href="#[c9]">tcpip_thread</a> from tcpip.o(i.tcpip_thread) referenced from tcpip.o(i.tcpip_init)
 <LI><a href="#[cc]">tcpserv</a> from main.o(i.tcpserv) referenced from main.o(i.tcpserver_test)
 <LI><a href="#[133]">tcpserver_test</a> from main.o(i.tcpserver_test) referenced from main.o(FSymTab)
 <LI><a href="#[8f]">uart_input</a> from gps.o(i.uart_input) referenced from gps.o(i.gps_rmc_sample_entry_init)
 <LI><a href="#[130]">usbh_rndis_eth_device_init</a> from rndis_dev.o(i.usbh_rndis_eth_device_init) referenced from rndis_dev.o(.rti_fn.6)
 <LI><a href="#[13a]">version</a> from cmd.o(i.version) referenced from cmd.o(FSymTab)
 <LI><a href="#[155]">webclient_get_test</a> from webclient_get_sample.o(i.webclient_get_test) referenced from webclient_get_sample.o(FSymTab)
 <LI><a href="#[156]">webclient_post_test</a> from webclient_post_sample.o(i.webclient_post_test) referenced from webclient_post_sample.o(FSymTab)
 <LI><a href="#[154]">wget</a> from webclient_file.o(i.wget) referenced from webclient_file.o(FSymTab)
 <LI><a href="#[e3]">write</a> from fal_flash_at32_port.o(i.write) referenced from fal_flash_at32_port.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[157]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[158]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[15a]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[665]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[666]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[667]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[668]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[669]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[15b]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[188]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[15d]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[15f]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[66a]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[171]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[161]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[66b]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[66c]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[163]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[66d]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[165]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[66e]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[66f]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[167]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[670]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[671]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[168]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[672]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[673]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[674]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[675]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[676]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[677]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[678]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[16a]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; stat &rArr; dfs_file_stat &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[679]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[67a]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[67b]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[67c]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[67d]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[67e]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[176]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[67f]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[680]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[16c]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; write &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[681]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[682]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[683]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[684]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[685]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[686]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[159]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[687]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[16e]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[170]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[688]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[172]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[689]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[1c2]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[175]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[68a]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[177]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = __rt_exit_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; _thread_detach_from_mutex &rArr; rt_mutex_release &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[232]"></a>__rt_ffs</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cpuport.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduler_get_highest_priority_thread
</UL>

<P><STRONG><a name="[356]"></a>rand</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_create_txid
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_random_port
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>

<P><STRONG><a name="[2ab]"></a>rt_hw_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_tx_isr
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_rx_isr
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_isr
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_irq_enable
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_dettach_irq
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_attach_irq
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_remove_thread
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_insert_thread
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
</UL>

<P><STRONG><a name="[2ac]"></a>rt_hw_interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_tx_isr
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_rx_isr
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_isr
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_irq_enable
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_dettach_irq
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_attach_irq
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_remove_thread
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_insert_thread
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock_n_resched
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
</UL>

<P><STRONG><a name="[56c]"></a>rt_hw_context_switch</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[56d]"></a>rt_hw_context_switch_interrupt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[12]"></a>PendSV_Handler</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[576]"></a>rt_hw_context_switch_to</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[68b]"></a>rt_hw_interrupt_thread_switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, context_rvds.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>HardFault_Handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = HardFault_Handler &rArr; rt_hw_hard_fault_exception &rArr; list_thread &rArr; list_get_next &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>ACC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>ADC1_2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>CAN1_SE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>CAN2_SE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>CRM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DMAMUX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DVP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EDMA_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EDMA_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EDMA_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EDMA_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EDMA_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EDMA_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EDMA_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>EDMA_Stream8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>EMAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>EMAC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>ERTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>ERTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C1_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C1_EVT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2C2_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C2_EVT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>I2C3_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>I2C3_EVT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>OTGFS1_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>OTGFS2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>OTGFS2_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>QSPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>QSPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SDIO1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>SDIO2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SPI2_I2S2EXT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SPI3_I2S3EXT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TMR1_BRK_TMR9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TMR1_CH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TMR1_OVF_TMR10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TMR1_TRG_HALL_TMR11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>TMR20_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>TMR20_CH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>TMR20_OVF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>TMR20_TRG_HALL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TMR2_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TMR3_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TMR4_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TMR5_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TMR6_DAC_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TMR7_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TMR8_BRK_TMR12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TMR8_CH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TMR8_OVF_TMR13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TMR8_TRG_HALL_TMR14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>XMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[1b3]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_at32f435_437.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[68c]"></a>__semihosting$guard</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[68d]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_isint
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[18c]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserv
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_fcntl
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_impl
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_write
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[68e]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[68f]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[690]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[691]"></a>__I$use$heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_core_clock_update
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_integer
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[692]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[314]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_broken_up_decimal
</UL>

<P><STRONG><a name="[17b]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[17d]"></a>tolower</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tolower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_strncasecmp
</UL>

<P><STRONG><a name="[17e]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_print_info
</UL>

<P><STRONG><a name="[180]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_source_to_location_format
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_rmc_parse
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTC2BTC
</UL>

<P><STRONG><a name="[183]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[184]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[182]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[15c]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[186]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[189]"></a>__0sscanf</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_rmc_parse
</UL>

<P><STRONG><a name="[1a3]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[18b]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_test
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_write
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_read
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_mode
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tail
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_dns
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
</UL>

<P><STRONG><a name="[18e]"></a>atol</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atol &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_rmc_parse
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_float_parse
</UL>

<P><STRONG><a name="[18d]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_next_chunk
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[190]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_backtrace
</UL>

<P><STRONG><a name="[191]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[164]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[302]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd_opt
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[446]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_float_parse
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
</UL>

<P><STRONG><a name="[2d1]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
</UL>

<P><STRONG><a name="[40c]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_udps
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
</UL>

<P><STRONG><a name="[1f3]"></a>strrchr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_path_lastname
</UL>

<P><STRONG><a name="[2c6]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_show_part_table
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_complete
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd_opt
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_auto_complete
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname_r
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_hostname
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_rmc_parse
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post_smpl
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post_comm
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_strstri
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
</UL>

<P><STRONG><a name="[33f]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_device_find
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_complete
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd_opt
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
</UL>

<P><STRONG><a name="[4cf]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element_underflow
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element_overflow
</UL>

<P><STRONG><a name="[3ee]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rndis_eth_tx
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rndis_eth_rx
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
</UL>

<P><STRONG><a name="[192]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[693]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_normalized_components
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_components
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element_underflow
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element_overflow
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_netdev_internet_up_work
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[694]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[695]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[696]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_init_element
</UL>

<P><STRONG><a name="[199]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[196]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[195]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1ac]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_rmc_sample_entry
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[697]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[698]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[198]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_complete
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname
</UL>

<P><STRONG><a name="[244]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_find
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_status_test
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_dhcp_status_test
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserv
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mount
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkfs
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_df
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_opt_id_get
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ifconfig
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_ioctlsocket
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[699]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[69a]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[69b]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[69c]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1b2]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[69d]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[19a]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __read_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[19b]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[185]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[181]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[77]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[19c]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[15e]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[160]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[17f]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[18a]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[78]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> __0sscanf.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[79]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> __0sscanf.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[18f]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[1a2]"></a>__strtod_int</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[7d]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scanf_char.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[19f]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[19e]"></a>__vfscanf</STRONG> (Thumb, 880 bytes, Stack size 96 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[1a8]"></a>_scanf_really_real</STRONG> (Thumb, 684 bytes, Stack size 120 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>

<P><STRONG><a name="[19d]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[16b]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = _initio &rArr; freopen &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; stat &rArr; dfs_file_stat &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[16d]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; write &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[16f]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[1a5]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[1b6]"></a>__flsbuf</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>

<P><STRONG><a name="[425]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[69e]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[1af]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[1ad]"></a>freopen</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = freopen &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; stat &rArr; dfs_file_stat &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[1bf]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fopen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[1b0]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; write &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[69f]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1ae]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = __rt_SIGRTRED &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; _thread_detach_from_mutex &rArr; rt_mutex_release &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[1c5]"></a>_scanf_really_hex_real</STRONG> (Thumb, 786 bytes, Stack size 80 bytes, scanf_hexfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _scanf_really_hex_real &rArr; __support_ldexp &rArr; __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
</UL>

<P><STRONG><a name="[664]"></a>_scanf_really_infnan</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, scanf_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
</UL>

<P><STRONG><a name="[1be]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = _fseek &rArr; _sys_flen &rArr; fstat &rArr; stat &rArr; dfs_file_stat &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[6a0]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[1b8]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[1bc]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; write &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[1c0]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; write &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[1b7]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[1c4]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; _thread_detach_from_mutex &rArr; rt_mutex_release &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[1c3]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[1c6]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[6a1]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[6a2]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[1cf]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[1cd]"></a>_e2d</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, btod.o(CL$$btod_e2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
</UL>

<P><STRONG><a name="[1ce]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>

<P><STRONG><a name="[1b5]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[1a7]"></a>_btod_edivd</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_edivd))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _btod_edivd &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[1b4]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[1a6]"></a>_btod_emuld</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emuld))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _btod_emuld &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[1d0]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[173]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, components.o(i.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = main &rArr; rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[e]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f435_437_int.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_usart.o(i.DMA1_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = DMA1_Channel1_IRQHandler &rArr; dma_rx_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_rx_isr
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_usart.o(i.DMA1_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = DMA1_Channel2_IRQHandler &rArr; dma_tx_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_tx_isr
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f435_437_int.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXINT0_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_gpio.o(i.EXINT0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXINT0_IRQHandler &rArr; gpio_exint_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_exint_handler
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>EXINT15_10_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, drv_gpio.o(i.EXINT15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXINT15_10_IRQHandler &rArr; gpio_exint_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exint_flag_get
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_exint_handler
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXINT1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_gpio.o(i.EXINT1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXINT1_IRQHandler &rArr; gpio_exint_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_exint_handler
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXINT2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_gpio.o(i.EXINT2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXINT2_IRQHandler &rArr; gpio_exint_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_exint_handler
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXINT3_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_gpio.o(i.EXINT3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXINT3_IRQHandler &rArr; gpio_exint_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_exint_handler
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXINT4_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_gpio.o(i.EXINT4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXINT4_IRQHandler &rArr; gpio_exint_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_exint_handler
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>EXINT9_5_IRQHandler</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, drv_gpio.o(i.EXINT9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXINT9_5_IRQHandler &rArr; gpio_exint_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exint_flag_get
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_exint_handler
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f435_437_int.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f435_437_int.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTGFS1_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_usbotgh.o(i.OTGFS1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = OTGFS1_IRQHandler &rArr; usbh_irq_handler &rArr; usbh_port_handler &rArr; usbh_connect_callback &rArr; rt_usbh_root_hub_connect_handler &rArr; rt_usbh_event_signal &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; _rt_mq_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_irq_handler
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f435_437_int.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, drv_common.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = SysTick_Handler &rArr; rt_tick_increase &rArr; rt_timer_check &rArr; _timer_check &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>SystemInit</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, system_at32f435_437.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(.text)
</UL>
<P><STRONG><a name="[49]"></a>UART5_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_usart.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = UART5_IRQHandler &rArr; usart_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_isr
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USART1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = USART1_IRQHandler &rArr; usart_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_isr
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USART2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_usart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = USART2_IRQHandler &rArr; usart_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_isr
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>USART3_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_usart.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = USART3_IRQHandler &rArr; usart_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_isr
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[1db]"></a>UTC2BTC</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, gps_rmc.o(i.UTC2BTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = UTC2BTC &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_date_parse
</UL>

<P><STRONG><a name="[f]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f435_437_int.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[1dc]"></a>__hardfp___mathlib_tofloat</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, narrow.o(i.__hardfp___mathlib_tofloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __hardfp___mathlib_tofloat &rArr; frexp &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[1e1]"></a>__hardfp_atof</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, atof.o(i.__hardfp_atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_rmc_parse
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_float_parse
</UL>

<P><STRONG><a name="[1e2]"></a>__hardfp_ldexp</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, ldexp.o(i.__hardfp_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[1e5]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>

<P><STRONG><a name="[1e4]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>

<P><STRONG><a name="[1ab]"></a>__mathlib_narrow</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, narrow.o(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __mathlib_narrow &rArr; __hardfp___mathlib_tofloat &rArr; frexp &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[1e7]"></a>__rt_libc_exit</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cstdlib.o(i.__rt_libc_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; _thread_detach_from_mutex &rArr; rt_mutex_release &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[1c7]"></a>__support_ldexp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ldexp.o(i.__support_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __support_ldexp &rArr; __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[1ed]"></a>__wqueue_default_wake</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, waitqueue.o(i.__wqueue_default_wake))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wqueue_pollwake
</UL>

<P><STRONG><a name="[187]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[1c1]"></a>_sys_close</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, syscalls.o(i._sys_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = _sys_close &rArr; close &rArr; fd_release &rArr; fdt_fd_release &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[178]"></a>_sys_exit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, syscalls.o(i._sys_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; _thread_detach_from_mutex &rArr; rt_mutex_release &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_libc_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[1b9]"></a>_sys_flen</STRONG> (Thumb, 28 bytes, Stack size 72 bytes, syscalls.o(i._sys_flen))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = _sys_flen &rArr; fstat &rArr; stat &rArr; dfs_file_stat &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstat
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[1ba]"></a>_sys_istty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, syscalls.o(i._sys_istty))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[1bd]"></a>_sys_open</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, syscalls.o(i._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = _sys_open &rArr; open &rArr; fd_new &rArr; fdt_fd_new &rArr; fd_alloc &rArr; fd_slot_alloc &rArr; fd_slot_expand &rArr; rt_realloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[1c9]"></a>_sys_seek</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, syscalls.o(i._sys_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = _sys_seek &rArr; lseek &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[1ca]"></a>_sys_write</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, syscalls.o(i._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = _sys_write &rArr; write &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[1cc]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, syscalls.o(i._ttywrch))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[2a8]"></a>acc_calibration_mode_enable</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, at32f435_437_acc.o(i.acc_calibration_mode_enable))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_usb_init
</UL>

<P><STRONG><a name="[2a5]"></a>acc_write_c1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f435_437_acc.o(i.acc_write_c1))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_usb_init
</UL>

<P><STRONG><a name="[2a6]"></a>acc_write_c2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f435_437_acc.o(i.acc_write_c2))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_usb_init
</UL>

<P><STRONG><a name="[2a7]"></a>acc_write_c3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f435_437_acc.o(i.acc_write_c3))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_usb_init
</UL>

<P><STRONG><a name="[271]"></a>accept</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, net_sockets.o(i.accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = accept &rArr; sal_accept &rArr; socket_new &rArr; socket_alloc &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_release
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_vnode_init
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_closesocket
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_get_fops
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_accept
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserv
</UL>

<P><STRONG><a name="[28b]"></a>at32_msp_usart_init</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, at32_msp.o(i.at32_msp_usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = at32_msp_usart_init &rArr; gpio_pin_mux_config
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_mux_config
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_configure
</UL>

<P><STRONG><a name="[29f]"></a>at32_msp_usb_init</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, at32_msp.o(i.at32_msp_usb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = at32_msp_usb_init &rArr; crm_usb_clock_source_select &rArr; crm_hick_sclk_frequency_select
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_usb_clock_source_select
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_usb_clock_div_set
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_write_c3
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_write_c2
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_write_c1
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_calibration_mode_enable
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_hcd_init
</UL>

<P><STRONG><a name="[12b]"></a>at32_usbh_register</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, drv_usbotgh.o(i.at32_usbh_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = at32_usbh_register &rArr; rt_usb_host_init &rArr; rt_usbh_hub_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_host_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbotgh.o(.rti_fn.3)
</UL>
<P><STRONG><a name="[2bb]"></a>bind</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, net_sockets.o(i.bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = bind &rArr; dfs_net_getsocket &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserv
</UL>

<P><STRONG><a name="[2be]"></a>cat</STRONG> (Thumb, 114 bytes, Stack size 128 bytes, dfs_file.o(i.cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = cat &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_init
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_read
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cat
</UL>

<P><STRONG><a name="[2c3]"></a>chdir</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, dfs_posix.o(i.chdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = chdir &rArr; opendir &rArr; fd_new &rArr; fdt_fd_new &rArr; fd_alloc &rArr; fd_slot_alloc &rArr; fd_slot_expand &rArr; rt_realloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cd
</UL>

<P><STRONG><a name="[242]"></a>close</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfs_posix.o(i.close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = close &rArr; fd_release &rArr; fdt_fd_release &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_release
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tail
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_file
</UL>

<P><STRONG><a name="[2ca]"></a>closedir</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, dfs_posix.o(i.closedir))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = closedir &rArr; fd_release &rArr; fdt_fd_release &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_release
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
</UL>

<P><STRONG><a name="[2d6]"></a>closesocket</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, net_sockets.o(i.closesocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = closesocket &rArr; sal_closesocket &rArr; socket_delete &rArr; socket_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_release
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_closesocket
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserv
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_write
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_next_chunk
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_clean
</UL>

<P><STRONG><a name="[2f6]"></a>connect</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, net_sockets.o(i.connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = connect &rArr; dfs_net_getsocket &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
</UL>

<P><STRONG><a name="[2d9]"></a>copy</STRONG> (Thumb, 280 bytes, Stack size 88 bytes, dfs_file.o(i.copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648<LI>Call Chain = copy &rArr; copydir &rArr;  copydir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_path_lastname
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cp
</UL>

<P><STRONG><a name="[5d4]"></a>crm_ahb_div_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f435_437_crm.o(i.crm_ahb_div_set))
<BR><BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[5d6]"></a>crm_apb1_div_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f435_437_crm.o(i.crm_apb1_div_set))
<BR><BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[5d5]"></a>crm_apb2_div_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f435_437_crm.o(i.crm_apb2_div_set))
<BR><BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[5d7]"></a>crm_auto_step_mode_enable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, at32f435_437_crm.o(i.crm_auto_step_mode_enable))
<BR><BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[5d2]"></a>crm_clock_source_enable</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, at32f435_437_crm.o(i.crm_clock_source_enable))
<BR><BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[309]"></a>crm_clocks_freq_get</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, at32f435_437_crm.o(i.crm_clocks_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch_status_get
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
</UL>

<P><STRONG><a name="[30c]"></a>crm_flag_get</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, at32f435_437_crm.o(i.crm_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crm_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_hext_stable_wait
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[30b]"></a>crm_hext_stable_wait</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, at32f435_437_crm.o(i.crm_hext_stable_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = crm_hext_stable_wait &rArr; crm_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[30e]"></a>crm_hick_divider_select</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f435_437_crm.o(i.crm_hick_divider_select))
<BR><BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_hick_sclk_frequency_select
</UL>

<P><STRONG><a name="[30d]"></a>crm_hick_sclk_frequency_select</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, at32f435_437_crm.o(i.crm_hick_sclk_frequency_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = crm_hick_sclk_frequency_select
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_hick_divider_select
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_usb_clock_source_select
</UL>

<P><STRONG><a name="[296]"></a>crm_periph_clock_enable</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, at32f435_437_crm.o(i.crm_periph_clock_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_usb_init
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_usart_init
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_dma_config
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pin_init
</UL>

<P><STRONG><a name="[5d3]"></a>crm_pll_config</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, at32f435_437_crm.o(i.crm_pll_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crm_pll_config
</UL>
<BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[5d1]"></a>crm_reset</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, at32f435_437_crm.o(i.crm_reset))
<BR><BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[5d8]"></a>crm_sysclk_switch</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f435_437_crm.o(i.crm_sysclk_switch))
<BR><BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[30a]"></a>crm_sysclk_switch_status_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_crm.o(i.crm_sysclk_switch_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_core_clock_update
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
</UL>

<P><STRONG><a name="[2a9]"></a>crm_usb_clock_div_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f435_437_crm.o(i.crm_usb_clock_div_set))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_usb_init
</UL>

<P><STRONG><a name="[2a4]"></a>crm_usb_clock_source_select</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, at32f435_437_crm.o(i.crm_usb_clock_source_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crm_usb_clock_source_select &rArr; crm_hick_sclk_frequency_select
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_hick_sclk_frequency_select
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_usb_init
</UL>

<P><STRONG><a name="[310]"></a>devfs_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, devfs.o(i.devfs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = devfs_init &rArr; dfs_register &rArr; dfs_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
</UL>

<P><STRONG><a name="[2da]"></a>df</STRONG> (Thumb, 234 bytes, Stack size 72 bytes, dfs_fs.o(i.df))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = df &rArr; dfs_statfs &rArr; dfs_filesystem_lookup &rArr; dfs_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_errno
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_statfs
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_df
</UL>

<P><STRONG><a name="[e6]"></a>dfs_device_fs_close</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, devfs.o(i.dfs_device_fs_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = dfs_device_fs_close &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>dfs_device_fs_getdents</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, devfs.o(i.dfs_device_fs_getdents))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dfs_device_fs_getdents &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>dfs_device_fs_ioctl</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, devfs.o(i.dfs_device_fs_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dfs_device_fs_ioctl &rArr; rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>dfs_device_fs_mount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, devfs.o(i.dfs_device_fs_mount))
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>dfs_device_fs_open</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, devfs.o(i.dfs_device_fs_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = dfs_device_fs_open &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>dfs_device_fs_read</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, devfs.o(i.dfs_device_fs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dfs_device_fs_read &rArr; rt_device_read &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[ef]"></a>dfs_device_fs_stat</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, devfs.o(i.dfs_device_fs_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = dfs_device_fs_stat &rArr; dfs_filesystem_lookup &rArr; dfs_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>dfs_device_fs_statfs</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, devfs.o(i.dfs_device_fs_statfs))
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[ee]"></a>dfs_device_fs_unlink</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, devfs.o(i.dfs_device_fs_unlink))
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>dfs_device_fs_write</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, devfs.o(i.dfs_device_fs_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dfs_device_fs_write &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[f1]"></a>dfs_elm_close</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, dfs_elm.o(i.dfs_elm_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = dfs_elm_close &rArr; f_close &rArr; f_sync &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>dfs_elm_flush</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dfs_elm.o(i.dfs_elm_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = dfs_elm_flush &rArr; f_sync &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[f7]"></a>dfs_elm_getdents</STRONG> (Thumb, 212 bytes, Stack size 320 bytes, dfs_elm.o(i.dfs_elm_getdents))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = dfs_elm_getdents &rArr; f_readdir &rArr; dir_read &rArr; dir_next &rArr; dir_clear &rArr; ff_memfree &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[f2]"></a>dfs_elm_ioctl</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, dfs_elm.o(i.dfs_elm_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = dfs_elm_ioctl &rArr; f_lseek &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[f6]"></a>dfs_elm_lseek</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, dfs_elm.o(i.dfs_elm_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = dfs_elm_lseek &rArr; f_seekdir &rArr; dir_read &rArr; dir_next &rArr; dir_clear &rArr; ff_memfree &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[fa]"></a>dfs_elm_mkfs</STRONG> (Thumb, 278 bytes, Stack size 56 bytes, dfs_elm.o(i.dfs_elm_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = dfs_elm_mkfs &rArr; f_mkfs &rArr; ff_memfree &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_disk
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[f8]"></a>dfs_elm_mount</STRONG> (Thumb, 246 bytes, Stack size 64 bytes, dfs_elm.o(i.dfs_elm_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240 + Unknown Stack Size
<LI>Call Chain = dfs_elm_mount &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memfree &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_disk
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[f0]"></a>dfs_elm_open</STRONG> (Thumb, 420 bytes, Stack size 40 bytes, dfs_elm.o(i.dfs_elm_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312 + Unknown Stack Size
<LI>Call Chain = dfs_elm_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memfree &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[f3]"></a>dfs_elm_read</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, dfs_elm.o(i.dfs_elm_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = dfs_elm_read &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>dfs_elm_rename</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, dfs_elm.o(i.dfs_elm_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368 + Unknown Stack Size
<LI>Call Chain = dfs_elm_rename &rArr; f_rename &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memfree &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[fd]"></a>dfs_elm_stat</STRONG> (Thumb, 322 bytes, Stack size 384 bytes, dfs_elm.o(i.dfs_elm_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1600 + Unknown Stack Size
<LI>Call Chain = dfs_elm_stat &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memfree &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timegm
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[fb]"></a>dfs_elm_statfs</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, dfs_elm.o(i.dfs_elm_statfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = dfs_elm_statfs &rArr; f_getfree &rArr; mount_volume &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[fc]"></a>dfs_elm_unlink</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, dfs_elm.o(i.dfs_elm_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296 + Unknown Stack Size
<LI>Call Chain = dfs_elm_unlink &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memfree &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[f9]"></a>dfs_elm_unmount</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, dfs_elm.o(i.dfs_elm_unmount))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = dfs_elm_unmount &rArr; f_mount &rArr; ff_cre_syncobj &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_disk
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[f4]"></a>dfs_elm_write</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, dfs_elm.o(i.dfs_elm_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = dfs_elm_write &rArr; f_write &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[3ff]"></a>dfs_fdtable_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dfs.o(i.dfs_fdtable_get))
<BR><BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_fd
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_release
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>

<P><STRONG><a name="[2c2]"></a>dfs_file_close</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, dfs_file.o(i.dfs_file_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = dfs_file_close &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fm_unlock
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fm_lock
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[42a]"></a>dfs_file_flush</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, dfs_file.o(i.dfs_file_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dfs_file_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
</UL>

<P><STRONG><a name="[2fb]"></a>dfs_file_getdents</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, dfs_file.o(i.dfs_file_getdents))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dfs_file_getdents
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[335]"></a>dfs_file_is_open</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, dfs_file.o(i.dfs_file_is_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = dfs_file_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fm_unlock
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fm_lock
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_vnode_find
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
</UL>

<P><STRONG><a name="[337]"></a>dfs_file_lock</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dfs.o(i.dfs_file_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdt_fd_release
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdt_fd_new
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdt_fd_get
</UL>

<P><STRONG><a name="[47f]"></a>dfs_file_lseek</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dfs_file.o(i.dfs_file_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dfs_file_lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
</UL>

<P><STRONG><a name="[2c0]"></a>dfs_file_open</STRONG> (Thumb, 382 bytes, Stack size 40 bytes, dfs_file.o(i.dfs_file_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fm_unlock
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fm_lock
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_vnode_find
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[2c1]"></a>dfs_file_read</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, dfs_file.o(i.dfs_file_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dfs_file_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
</UL>

<P><STRONG><a name="[33b]"></a>dfs_file_rename</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, dfs_file.o(i.dfs_file_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = dfs_file_rename &rArr; dfs_file_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_is_open
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
</UL>

<P><STRONG><a name="[2f8]"></a>dfs_file_stat</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, dfs_file.o(i.dfs_file_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = dfs_file_stat &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[33c]"></a>dfs_file_unlink</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, dfs_file.o(i.dfs_file_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = dfs_file_unlink &rArr; dfs_file_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_is_open
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rmdir
</UL>

<P><STRONG><a name="[33d]"></a>dfs_file_unlock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dfs.o(i.dfs_file_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = dfs_file_unlock &rArr; rt_mutex_release &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdt_fd_release
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdt_fd_new
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdt_fd_get
</UL>

<P><STRONG><a name="[2fc]"></a>dfs_file_write</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dfs_file.o(i.dfs_file_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dfs_file_write
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
</UL>

<P><STRONG><a name="[33e]"></a>dfs_filesystem_get_partition</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, dfs_fs.o(i.dfs_filesystem_get_partition))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = dfs_filesystem_get_partition &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
</UL>

<P><STRONG><a name="[31c]"></a>dfs_filesystem_lookup</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, dfs_fs.o(i.dfs_filesystem_lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = dfs_filesystem_lookup &rArr; dfs_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_stat
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_statfs
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
</UL>

<P><STRONG><a name="[332]"></a>dfs_fm_lock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dfs_file.o(i.dfs_fm_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = dfs_fm_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_is_open
</UL>

<P><STRONG><a name="[333]"></a>dfs_fm_unlock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dfs_file.o(i.dfs_fm_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = dfs_fm_unlock &rArr; rt_mutex_release &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_is_open
</UL>

<P><STRONG><a name="[129]"></a>dfs_init</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, dfs.o(i.dfs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = dfs_init &rArr; dfs_mount &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devfs_init
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_vnode_mgr_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs.o(.rti_fn.2)
</UL>
<P><STRONG><a name="[2c4]"></a>dfs_lock</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dfs.o(i.dfs_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = dfs_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_fd
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
</UL>

<P><STRONG><a name="[2eb]"></a>dfs_mkfs</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, dfs_fs.o(i.dfs_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = dfs_mkfs &rArr; dfs_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkfs
</UL>

<P><STRONG><a name="[2ec]"></a>dfs_mount</STRONG> (Thumb, 458 bytes, Stack size 80 bytes, dfs_fs.o(i.dfs_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = dfs_mount &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_init
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mount
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
</UL>

<P><STRONG><a name="[278]"></a>dfs_net_get_fops</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dfs_net.o(i.dfs_net_get_fops))
<BR><BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
</UL>

<P><STRONG><a name="[272]"></a>dfs_net_getsocket</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dfs_net.o(i.dfs_net_getsocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = dfs_net_getsocket &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
</UL>

<P><STRONG><a name="[2c7]"></a>dfs_normalize_path</STRONG> (Thumb, 374 bytes, Stack size 40 bytes, dfs.o(i.dfs_normalize_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_is_open
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[311]"></a>dfs_register</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, dfs_fs.o(i.dfs_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = dfs_register &rArr; dfs_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devfs_init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_init
</UL>

<P><STRONG><a name="[312]"></a>dfs_statfs</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dfs_fs.o(i.dfs_statfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = dfs_statfs &rArr; dfs_filesystem_lookup &rArr; dfs_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
</UL>

<P><STRONG><a name="[339]"></a>dfs_subdir</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, dfs.o(i.dfs_subdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dfs_subdir &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
</UL>

<P><STRONG><a name="[2c5]"></a>dfs_unlock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dfs.o(i.dfs_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = dfs_unlock &rArr; rt_mutex_release &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_fd
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
</UL>

<P><STRONG><a name="[2f3]"></a>dfs_unmount</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, dfs_fs.o(i.dfs_unmount))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = dfs_unmount &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_umount
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_stop
</UL>

<P><STRONG><a name="[279]"></a>dfs_vnode_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dfs_file.o(i.dfs_vnode_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dfs_vnode_init &rArr; rt_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
</UL>

<P><STRONG><a name="[340]"></a>dfs_vnode_mgr_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, dfs_file.o(i.dfs_vnode_mgr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = dfs_vnode_mgr_init &rArr; rt_mutex_init &rArr; rt_object_init &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
</UL>

<P><STRONG><a name="[348]"></a>dhcp_arp_reply</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_arp_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = dhcp_arp_reply &rArr; dhcp_decline &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
</UL>

<P><STRONG><a name="[101]"></a>dhcp_coarse_tmr</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_coarse_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = dhcp_coarse_tmr &rArr; dhcp_release &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t2_timeout
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t1_timeout
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[102]"></a>dhcp_fine_tmr</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_fine_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = dhcp_fine_tmr &rArr; dhcp_timeout &rArr; dhcp_release &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[36e]"></a>dhcp_network_changed</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_network_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = dhcp_network_changed &rArr; dhcp_reboot &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
</UL>

<P><STRONG><a name="[350]"></a>dhcp_release</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432<LI>Call Chain = dhcp_release &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_supplied_address
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[376]"></a>dhcp_renew</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_renew))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = dhcp_renew &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_hostname
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t1_timeout
</UL>

<P><STRONG><a name="[377]"></a>dhcp_start</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_set_dhcp
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_netif_device_init
</UL>

<P><STRONG><a name="[379]"></a>dhcp_stop</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = dhcp_stop &rArr; dhcp_dec_pcb_refcount &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_set_dhcp
</UL>

<P><STRONG><a name="[375]"></a>dhcp_supplied_address</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_supplied_address))
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[3ed]"></a>disk_initialize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dfs_elm.o(i.disk_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[305]"></a>disk_ioctl</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, dfs_elm.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = disk_ioctl &rArr; rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[38c]"></a>disk_read</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, dfs_elm.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = disk_read &rArr; rt_device_read &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[4d0]"></a>disk_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dfs_elm.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[308]"></a>disk_write</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, dfs_elm.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = disk_write &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[267]"></a>dma_channel_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_dma.o(i.dma_channel_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_tx_isr
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_dma_transmit
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_dma_receive
</UL>

<P><STRONG><a name="[38d]"></a>dma_data_number_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, at32f435_437_dma.o(i.dma_data_number_get))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_tx_isr
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_rx_isr
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_isr
</UL>

<P><STRONG><a name="[297]"></a>dma_default_para_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at32f435_437_dma.o(i.dma_default_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_dma_config
</UL>

<P><STRONG><a name="[298]"></a>dma_init</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, at32f435_437_dma.o(i.dma_init))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_dma_config
</UL>

<P><STRONG><a name="[265]"></a>dma_interrupt_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f435_437_dma.o(i.dma_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_dma_transmit
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_dma_receive
</UL>

<P><STRONG><a name="[293]"></a>dma_reset</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, at32f435_437_dma.o(i.dma_reset))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_dma_config
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_control
</UL>

<P><STRONG><a name="[1d3]"></a>dma_rx_isr</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, drv_usart.o(i.dma_rx_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = dma_rx_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_data_number_get
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[1d5]"></a>dma_tx_isr</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, drv_usart.o(i.dma_tx_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = dma_tx_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_data_number_get
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[299]"></a>dmamux_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f435_437_dma.o(i.dmamux_enable))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_dma_config
</UL>

<P><STRONG><a name="[29a]"></a>dmamux_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_dma.o(i.dmamux_init))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_dma_config
</UL>

<P><STRONG><a name="[39c]"></a>dns_gethostbyname_addrtype</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, dns.o(i.dns_gethostbyname_addrtype))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = dns_gethostbyname_addrtype &rArr; dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_lookup
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_gethostbyname
</UL>

<P><STRONG><a name="[494]"></a>dns_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dns.o(i.dns_init))
<BR><BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[365]"></a>dns_setserver</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, dns.o(i.dns_setserver))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = dns_setserver &rArr; netdev_get_by_name &rArr; rt_spin_unlock &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_dns_server
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_set_dns_server
</UL>

<P><STRONG><a name="[103]"></a>dns_tmr</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dns.o(i.dns_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = dns_tmr &rArr; dns_check_entries &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entries
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[328]"></a>elm_get_vol</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ff.o(i.elm_get_vol))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
</UL>

<P><STRONG><a name="[12c]"></a>elm_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dfs_elm.o(i.elm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = elm_init &rArr; dfs_register &rArr; dfs_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[481]"></a>err_to_errno</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, err.o(i.err_to_errno))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_impl
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
</UL>

<P><STRONG><a name="[3bd]"></a>eth_device_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ethernetif.o(i.eth_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = eth_device_init &rArr; eth_device_init_with_flag &rArr; netifapi_netif_add &rArr; tcpip_api_call &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_rndis_eth_device_init
</UL>

<P><STRONG><a name="[3be]"></a>eth_device_init_with_flag</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, ethernetif.o(i.eth_device_init_with_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = eth_device_init_with_flag &rArr; netifapi_netif_add &rArr; tcpip_api_call &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_init
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_add
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init
</UL>

<P><STRONG><a name="[3c1]"></a>eth_device_linkchange</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ethernetif.o(i.eth_device_linkchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = eth_device_linkchange &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_rndis_eth_device_init
</UL>

<P><STRONG><a name="[3ca]"></a>eth_system_device_init_private</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, ethernetif.o(i.eth_system_device_init_private))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = eth_system_device_init_private &rArr; rt_thread_init &rArr; _thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
</UL>

<P><STRONG><a name="[3ce]"></a>etharp_cleanup_netif</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, etharp.o(i.etharp_cleanup_netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = etharp_cleanup_netif &rArr; etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>

<P><STRONG><a name="[3d2]"></a>etharp_input</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, etharp.o(i.etharp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = etharp_input &rArr; dhcp_arp_reply &rArr; dhcp_decline &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[88]"></a>etharp_output</STRONG> (Thumb, 366 bytes, Stack size 40 bytes, etharp.o(i.etharp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = etharp_output &rArr; etharp_query &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.eth_netif_device_init)
</UL>
<P><STRONG><a name="[34f]"></a>etharp_query</STRONG> (Thumb, 588 bytes, Stack size 56 bytes, etharp.o(i.etharp_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = etharp_query &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
</UL>

<P><STRONG><a name="[3d8]"></a>etharp_request</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, etharp.o(i.etharp_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request_dst
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
</UL>

<P><STRONG><a name="[100]"></a>etharp_tmr</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, etharp.o(i.etharp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = etharp_tmr &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>ethernet_input</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, ethernet.o(i.ethernet_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = ethernet_input &rArr; ip4_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(i.tcpip_input)
</UL>
<P><STRONG><a name="[3d7]"></a>ethernet_output</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, ethernet.o(i.ethernet_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = ethernet_output &rArr; pbuf_header &rArr; pbuf_header_impl &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[2ae]"></a>exint_default_para_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f435_437_exint.o(i.exint_default_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_irq_enable
</UL>

<P><STRONG><a name="[440]"></a>exint_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f435_437_exint.o(i.exint_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_exint_handler
</UL>

<P><STRONG><a name="[1d7]"></a>exint_flag_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at32f435_437_exint.o(i.exint_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT9_5_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT15_10_IRQHandler
</UL>

<P><STRONG><a name="[2b0]"></a>exint_init</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, at32f435_437_exint.o(i.exint_init))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_irq_enable
</UL>

<P><STRONG><a name="[31d]"></a>f_close</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = f_close &rArr; f_sync &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_close
</UL>

<P><STRONG><a name="[32f]"></a>f_getfree</STRONG> (Thumb, 254 bytes, Stack size 72 bytes, ff.o(i.f_getfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = f_getfree &rArr; mount_volume &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_statfs
</UL>

<P><STRONG><a name="[322]"></a>f_lseek</STRONG> (Thumb, 828 bytes, Stack size 72 bytes, ff.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = f_lseek &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_lseek
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_ioctl
</UL>

<P><STRONG><a name="[329]"></a>f_mkdir</STRONG> (Thumb, 310 bytes, Stack size 96 bytes, ff.o(i.f_mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256 + Unknown Stack Size
<LI>Call Chain = f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memfree &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
</UL>

<P><STRONG><a name="[326]"></a>f_mkfs</STRONG> (Thumb, 1824 bytes, Stack size 152 bytes, ff.o(i.f_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = f_mkfs &rArr; ff_memfree &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
</UL>

<P><STRONG><a name="[325]"></a>f_mount</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = f_mount &rArr; ff_cre_syncobj &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
</UL>

<P><STRONG><a name="[32a]"></a>f_open</STRONG> (Thumb, 550 bytes, Stack size 112 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272 + Unknown Stack Size
<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memfree &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
</UL>

<P><STRONG><a name="[327]"></a>f_opendir</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, ff.o(i.f_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176 + Unknown Stack Size
<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memfree &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
</UL>

<P><STRONG><a name="[32b]"></a>f_read</STRONG> (Thumb, 512 bytes, Stack size 72 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_read
</UL>

<P><STRONG><a name="[320]"></a>f_readdir</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ff.o(i.f_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = f_readdir &rArr; dir_read &rArr; dir_next &rArr; dir_clear &rArr; ff_memfree &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
</UL>

<P><STRONG><a name="[32c]"></a>f_rename</STRONG> (Thumb, 330 bytes, Stack size 168 bytes, ff.o(i.f_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328 + Unknown Stack Size
<LI>Call Chain = f_rename &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memfree &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
</UL>

<P><STRONG><a name="[323]"></a>f_seekdir</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ff.o(i.f_seekdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = f_seekdir &rArr; dir_read &rArr; dir_next &rArr; dir_clear &rArr; ff_memfree &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_lseek
</UL>

<P><STRONG><a name="[32d]"></a>f_stat</STRONG> (Thumb, 106 bytes, Stack size 72 bytes, ff.o(i.f_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216 + Unknown Stack Size
<LI>Call Chain = f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memfree &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
</UL>

<P><STRONG><a name="[31f]"></a>f_sync</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = f_sync &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_flush
</UL>

<P><STRONG><a name="[321]"></a>f_truncate</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, ff.o(i.f_truncate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = f_truncate &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_ioctl
</UL>

<P><STRONG><a name="[330]"></a>f_unlink</STRONG> (Thumb, 212 bytes, Stack size 120 bytes, ff.o(i.f_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264 + Unknown Stack Size
<LI>Call Chain = f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memfree &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
</UL>

<P><STRONG><a name="[331]"></a>f_write</STRONG> (Thumb, 580 bytes, Stack size 64 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = f_write &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_write
</UL>

<P><STRONG><a name="[2cd]"></a>fal_flash_device_find</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, fal_flash.o(i.fal_flash_device_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fal_flash_device_find &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_update_part_cache
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[3f9]"></a>fal_flash_init</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, fal_flash.o(i.fal_flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = fal_flash_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_init
</UL>

<P><STRONG><a name="[3fa]"></a>fal_init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, fal.o(i.fal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = fal_init &rArr; fal_partition_init &rArr; fal_show_part_table &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_init
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[3f3]"></a>fal_init_check</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fal.o(i.fal_init_check))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
</UL>

<P><STRONG><a name="[3f8]"></a>fal_partition_erase</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fal_partition.o(i.fal_partition_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = fal_partition_erase &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_device_find_by_part
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
</UL>

<P><STRONG><a name="[3f4]"></a>fal_partition_find</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fal_partition.o(i.fal_partition_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fal_partition_find
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[3fb]"></a>fal_partition_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, fal_partition.o(i.fal_partition_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = fal_partition_init &rArr; fal_show_part_table &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_show_part_table
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_update_part_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_init
</UL>

<P><STRONG><a name="[3f6]"></a>fal_partition_read</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, fal_partition.o(i.fal_partition_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = fal_partition_read &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_device_find_by_part
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
</UL>

<P><STRONG><a name="[3f7]"></a>fal_partition_write</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, fal_partition.o(i.fal_partition_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = fal_partition_write &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_device_find_by_part
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
</UL>

<P><STRONG><a name="[3f5]"></a>fal_show_part_table</STRONG> (Thumb, 274 bytes, Stack size 48 bytes, fal_partition.o(i.fal_show_part_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = fal_show_part_table &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_init
</UL>

<P><STRONG><a name="[276]"></a>fd_get</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dfs.o(i.fd_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdt_fd_get
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fdtable_get
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_pollfd
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstat
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
</UL>

<P><STRONG><a name="[2bf]"></a>fd_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dfs.o(i.fd_init))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
</UL>

<P><STRONG><a name="[274]"></a>fd_new</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dfs.o(i.fd_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = fd_new &rArr; fdt_fd_new &rArr; fd_alloc &rArr; fd_slot_alloc &rArr; fd_slot_expand &rArr; rt_realloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdt_fd_new
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fdtable_get
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
</UL>

<P><STRONG><a name="[277]"></a>fd_release</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dfs.o(i.fd_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = fd_release &rArr; fdt_fd_release &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdt_fd_release
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fdtable_get
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
</UL>

<P><STRONG><a name="[400]"></a>fdt_fd_get</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dfs.o(i.fdt_fd_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlock
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>

<P><STRONG><a name="[401]"></a>fdt_fd_new</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dfs.o(i.fdt_fd_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = fdt_fd_new &rArr; fd_alloc &rArr; fd_slot_alloc &rArr; fd_slot_expand &rArr; rt_realloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlock
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_lock
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
</UL>

<P><STRONG><a name="[402]"></a>fdt_fd_release</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, dfs.o(i.fdt_fd_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = fdt_fd_release &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlock
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_release
</UL>

<P><STRONG><a name="[3f0]"></a>ff_cre_syncobj</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, dfs_elm.o(i.ff_cre_syncobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = ff_cre_syncobj &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[3ef]"></a>ff_del_syncobj</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dfs_elm.o(i.ff_del_syncobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = ff_del_syncobj &rArr; rt_mutex_delete &rArr; rt_object_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[380]"></a>ff_memalloc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dfs_elm.o(i.ff_memalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = ff_memalloc &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[381]"></a>ff_memfree</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dfs_elm.o(i.ff_memfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = ff_memfree &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[5db]"></a>ff_oem2uni</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ffunicode.o(i.ff_oem2uni))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ff_oem2uni
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tchar2uni
</UL>

<P><STRONG><a name="[408]"></a>ff_rel_grant</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dfs_elm.o(i.ff_rel_grant))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = ff_rel_grant &rArr; rt_mutex_release &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
</UL>

<P><STRONG><a name="[409]"></a>ff_req_grant</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dfs_elm.o(i.ff_req_grant))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = ff_req_grant &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
</UL>

<P><STRONG><a name="[303]"></a>ff_uni2oem</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ffunicode.o(i.ff_uni2oem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ff_uni2oem
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_utf
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[2f5]"></a>ff_wtoupper</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, ffunicode.o(i.ff_wtoupper))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[40b]"></a>finsh_get_prompt</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, shell.o(i.finsh_get_prompt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = finsh_get_prompt &rArr; getcwd &rArr; dfs_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[40e]"></a>finsh_getchar</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, shell.o(i.finsh_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = finsh_getchar &rArr; rt_sem_take &rArr; _rt_sem_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[40f]"></a>finsh_set_device</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, shell.o(i.finsh_set_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = finsh_set_device &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_object_for_each &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[411]"></a>finsh_set_prompt_mode</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, shell.o(i.finsh_set_prompt_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = finsh_set_prompt_mode &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[12f]"></a>finsh_system_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, shell.o(i.finsh_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = finsh_system_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_prompt_mode
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_function_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[41b]"></a>flash_bank1_operation_status_get</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, at32f435_437_flash.o(i.flash_bank1_operation_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bank1_operation_wait_for
</UL>

<P><STRONG><a name="[41a]"></a>flash_bank1_operation_wait_for</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, at32f435_437_flash.o(i.flash_bank1_operation_wait_for))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = flash_bank1_operation_wait_for
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bank1_operation_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sector_erase
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_byte_program
</UL>

<P><STRONG><a name="[41d]"></a>flash_bank2_operation_status_get</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, at32f435_437_flash.o(i.flash_bank2_operation_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bank2_operation_wait_for
</UL>

<P><STRONG><a name="[41c]"></a>flash_bank2_operation_wait_for</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, at32f435_437_flash.o(i.flash_bank2_operation_wait_for))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = flash_bank2_operation_wait_for
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bank2_operation_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sector_erase
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_byte_program
</UL>

<P><STRONG><a name="[41e]"></a>flash_byte_program</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, at32f435_437_flash.o(i.flash_byte_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = flash_byte_program &rArr; flash_bank2_operation_wait_for
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bank2_operation_wait_for
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bank1_operation_wait_for
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
</UL>

<P><STRONG><a name="[3b7]"></a>flash_flag_clear</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, at32f435_437_flash.o(i.flash_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[3ba]"></a>flash_lock</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, at32f435_437_flash.o(i.flash_lock))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[3b9]"></a>flash_sector_erase</STRONG> (Thumb, 170 bytes, Stack size 12 bytes, at32f435_437_flash.o(i.flash_sector_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash_sector_erase &rArr; flash_bank2_operation_wait_for
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bank2_operation_wait_for
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bank1_operation_wait_for
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[3b6]"></a>flash_unlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at32f435_437_flash.o(i.flash_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[7b]"></a>fputc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[1b1]"></a>free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, syscall_mem.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[428]"></a>freeaddrinfo</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, net_netdb.o(i.freeaddrinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = freeaddrinfo &rArr; sal_freeaddrinfo &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_freeaddrinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
</UL>

<P><STRONG><a name="[1dd]"></a>frexp</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = frexp &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[243]"></a>fstat</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dfs_posix.o(i.fstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = fstat &rArr; stat &rArr; dfs_file_stat &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
</UL>

<P><STRONG><a name="[248]"></a>fsync</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dfs_posix.o(i.fsync))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = fsync &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[3e8]"></a>get_fattime</STRONG> (Thumb, 66 bytes, Stack size 56 bytes, dfs_elm.o(i.get_fattime))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = get_fattime &rArr; gmtime_r &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[43a]"></a>getaddrinfo</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, net_netdb.o(i.getaddrinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = getaddrinfo &rArr; sal_getaddrinfo &rArr; netdev_get_first_by_flags &rArr; rt_spin_unlock &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_getaddrinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
</UL>

<P><STRONG><a name="[40d]"></a>getcwd</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dfs_posix.o(i.getcwd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = getcwd &rArr; dfs_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>

<P><STRONG><a name="[43c]"></a>gethostbyname</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, net_netdb.o(i.gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = gethostbyname &rArr; sal_gethostbyname &rArr; netdev_get_first_by_flags &rArr; rt_spin_unlock &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_gethostbyname
</UL>
<BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto_ntp_server
</UL>

<P><STRONG><a name="[434]"></a>gmtime_r</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, ctime.o(i.gmtime_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gmtime_r &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tz_is_dst
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__isleap
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>

<P><STRONG><a name="[2b2]"></a>gpio_bits_write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_gpio.o(i.gpio_bits_write))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_write
</UL>

<P><STRONG><a name="[2a1]"></a>gpio_default_para_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at32f435_437_gpio.o(i.gpio_default_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_usart_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_mode
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_irq_enable
</UL>

<P><STRONG><a name="[1d6]"></a>gpio_exint_handler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, drv_gpio.o(i.gpio_exint_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_exint_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exint_flag_clear
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2bitno
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT9_5_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT4_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT3_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT2_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT1_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT15_10_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT0_IRQHandler
</UL>

<P><STRONG><a name="[2a2]"></a>gpio_init</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, at32f435_437_gpio.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_usart_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_mode
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_irq_enable
</UL>

<P><STRONG><a name="[2b1]"></a>gpio_input_data_bit_read</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f435_437_gpio.o(i.gpio_input_data_bit_read))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_read
</UL>

<P><STRONG><a name="[2a3]"></a>gpio_pin_mux_config</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, at32f435_437_gpio.o(i.gpio_pin_mux_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_pin_mux_config
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_usart_init
</UL>

<P><STRONG><a name="[441]"></a>gps_coord_handle</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gps_rmc.o(i.gps_coord_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = gps_coord_handle &rArr; gps_coord_location_format_transform &rArr; gps_source_to_location_format &rArr; gps_float_parse &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_coord_location_format_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_rmc_parse
</UL>

<P><STRONG><a name="[442]"></a>gps_coord_location_format_transform</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gps_rmc.o(i.gps_coord_location_format_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = gps_coord_location_format_transform &rArr; gps_source_to_location_format &rArr; gps_float_parse &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_source_to_location_format
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_coord_handle
</UL>

<P><STRONG><a name="[444]"></a>gps_date_parse</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, gps_rmc.o(i.gps_date_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = gps_date_parse &rArr; UTC2BTC &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTC2BTC
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_rmc_parse
</UL>

<P><STRONG><a name="[445]"></a>gps_float_parse</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, gps_rmc.o(i.gps_float_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = gps_float_parse &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_source_to_location_format
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_rmc_parse
</UL>

<P><STRONG><a name="[447]"></a>gps_print_info</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, gps_rmc.o(i.gps_print_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = gps_print_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_rmc_sample_entry
</UL>

<P><STRONG><a name="[448]"></a>gps_rmc_parse</STRONG> (Thumb, 294 bytes, Stack size 64 bytes, gps_rmc.o(i.gps_rmc_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + Unknown Stack Size
<LI>Call Chain = gps_rmc_parse &rArr; gps_coord_handle &rArr; gps_coord_location_format_transform &rArr; gps_source_to_location_format &rArr; gps_float_parse &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_float_parse
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_date_parse
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_coord_handle
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_rmc_sample_entry
</UL>

<P><STRONG><a name="[90]"></a>gps_rmc_sample_entry</STRONG> (Thumb, 128 bytes, Stack size 336 bytes, gps.o(i.gps_rmc_sample_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320 + Unknown Stack Size
<LI>Call Chain = gps_rmc_sample_entry &rArr; rt_sem_take &rArr; _rt_sem_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_rmc_parse
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_print_info
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gps.o(i.gps_rmc_sample_entry_init)
</UL>
<P><STRONG><a name="[131]"></a>gps_rmc_sample_entry_init</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, gps.o(i.gps_rmc_sample_entry_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = gps_rmc_sample_entry_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gps.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[443]"></a>gps_source_to_location_format</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, gps_rmc.o(i.gps_source_to_location_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 524 + Unknown Stack Size
<LI>Call Chain = gps_source_to_location_format &rArr; gps_float_parse &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_float_parse
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_coord_location_format_transform
</UL>

<P><STRONG><a name="[452]"></a>hex_data_print</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, toolkit.o(i.hex_data_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = hex_data_print &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rndis_eth_tx
</UL>

<P><STRONG><a name="[453]"></a>icmp_dest_unreach</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, icmp.o(i.icmp_dest_unreach))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = icmp_dest_unreach &rArr; icmp_send_response &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[455]"></a>icmp_input</STRONG> (Thumb, 474 bytes, Stack size 56 bytes, icmp.o(i.icmp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = icmp_input &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[457]"></a>inet_chksum</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, inet_chksum.o(i.inet_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_prepare_echo
</UL>

<P><STRONG><a name="[456]"></a>inet_chksum_pbuf</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, inet_chksum.o(i.inet_chksum_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[45e]"></a>inet_chksum_pseudo</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, inet_chksum.o(i.inet_chksum_pseudo))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = inet_chksum_pseudo &rArr; inet_cksum_pseudo_base &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_cksum_pseudo_base
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
</UL>

<P><STRONG><a name="[11e]"></a>inet_ioctlsocket</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, af_inet_lwip.o(i.inet_ioctlsocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = inet_ioctlsocket &rArr; lwip_ioctl &rArr; sys_arch_unprotect &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_fcntl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_lwip.o(.constdata)
</UL>
<P><STRONG><a name="[3d5]"></a>ip4_addr_isbroadcast_u32</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, ip4_addr.o(i.ip4_addr_isbroadcast_u32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ip4_addr_isbroadcast_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[cb]"></a>ip4_input</STRONG> (Thumb, 520 bytes, Stack size 40 bytes, ip4.o(i.ip4_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = ip4_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(i.tcpip_input)
</UL>
<P><STRONG><a name="[458]"></a>ip4_output_if</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, ip4.o(i.ip4_output_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = ip4_output_if &rArr; ip4_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
</UL>

<P><STRONG><a name="[469]"></a>ip4_output_if_src</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, ip4.o(i.ip4_output_if_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = ip4_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>

<P><STRONG><a name="[46a]"></a>ip4_route</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, ip4.o(i.ip4_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ip4_route &rArr; lwip_ip4_route_src
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ip4_route_src
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route_src
</UL>

<P><STRONG><a name="[459]"></a>ip4_route_src</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ip4.o(i.ip4_route_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ip4_route_src &rArr; ip4_route &rArr; lwip_ip4_route_src
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ip4_route_src
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
</UL>

<P><STRONG><a name="[39d]"></a>ip4addr_aton</STRONG> (Thumb, 416 bytes, Stack size 48 bytes, ip4_addr.o(i.ip4addr_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = ip4addr_aton &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_ping
</UL>

<P><STRONG><a name="[46c]"></a>ip4addr_ntoa</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ip4_addr.o(i.ip4addr_ntoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ip4addr_ntoa &rArr; ip4addr_ntoa_r
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_ping
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_udps
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
</UL>

<P><STRONG><a name="[46d]"></a>ip4addr_ntoa_r</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, ip4_addr.o(i.ip4addr_ntoa_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ip4addr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
</UL>

<P><STRONG><a name="[46e]"></a>ip_chksum_pseudo</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, inet_chksum.o(i.ip_chksum_pseudo))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ip_chksum_pseudo &rArr; inet_chksum_pseudo &rArr; inet_cksum_pseudo_base &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[2e6]"></a>list_device</STRONG> (Thumb, 200 bytes, Stack size 104 bytes, cmd.o(i.list_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = list_device &rArr; list_get_next &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[2e0]"></a>list_event</STRONG> (Thumb, 226 bytes, Stack size 104 bytes, cmd.o(i.list_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = list_event &rArr; list_get_next &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_print
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[2e7]"></a>list_fd</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, dfs.o(i.list_fd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = list_fd &rArr; dfs_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fdtable_get
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[2e2]"></a>list_mailbox</STRONG> (Thumb, 246 bytes, Stack size 104 bytes, cmd.o(i.list_mailbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = list_mailbox &rArr; list_get_next &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_print
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[2e4]"></a>list_memheap</STRONG> (Thumb, 182 bytes, Stack size 104 bytes, cmd.o(i.list_memheap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = list_memheap &rArr; list_get_next &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[2e5]"></a>list_mempool</STRONG> (Thumb, 254 bytes, Stack size 112 bytes, cmd.o(i.list_mempool))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = list_mempool &rArr; list_get_next &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_print
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[2e3]"></a>list_msgqueue</STRONG> (Thumb, 238 bytes, Stack size 104 bytes, cmd.o(i.list_msgqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = list_msgqueue &rArr; list_get_next &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_print
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[2e1]"></a>list_mutex</STRONG> (Thumb, 262 bytes, Stack size 112 bytes, cmd.o(i.list_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = list_mutex &rArr; list_get_next &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_print
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[2df]"></a>list_sem</STRONG> (Thumb, 238 bytes, Stack size 104 bytes, cmd.o(i.list_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = list_sem &rArr; list_get_next &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_print
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[475]"></a>list_tcps</STRONG> (Thumb, 260 bytes, Stack size 64 bytes, ethernetif.o(i.list_tcps))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = list_tcps &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_debug_state_str
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_netstat
</UL>

<P><STRONG><a name="[2dd]"></a>list_thread</STRONG> (Thumb, 350 bytes, Stack size 272 bytes, cmd.o(i.list_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = list_thread &rArr; list_get_next &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strerror
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ps
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[2de]"></a>list_timer</STRONG> (Thumb, 236 bytes, Stack size 96 bytes, cmd.o(i.list_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = list_timer &rArr; list_get_next &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[478]"></a>list_udps</STRONG> (Thumb, 94 bytes, Stack size 64 bytes, ethernetif.o(i.list_udps))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = list_udps &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_netstat
</UL>

<P><STRONG><a name="[479]"></a>listen</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, net_sockets.o(i.listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = listen &rArr; dfs_net_getsocket &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_listen
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserv
</UL>

<P><STRONG><a name="[2e9]"></a>ls</STRONG> (Thumb, 210 bytes, Stack size 368 bytes, dfs_file.o(i.ls))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = ls &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_init
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_getdents
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ls
</UL>

<P><STRONG><a name="[246]"></a>lseek</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, dfs_posix.o(i.lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = lseek &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tail
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
</UL>

<P><STRONG><a name="[45b]"></a>lwip_accept</STRONG> (Thumb, 538 bytes, Stack size 72 bytes, sockets.o(i.lwip_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = lwip_accept &rArr; netconn_delete &rArr; netconn_free &rArr; sys_sem_free &rArr; rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_accept
</UL>

<P><STRONG><a name="[113]"></a>lwip_bind</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, sockets.o(i.lwip_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = lwip_bind &rArr; netconn_bind &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_ping
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_lwip.o(.constdata)
</UL>
<P><STRONG><a name="[112]"></a>lwip_close</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, sockets.o(i.lwip_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = lwip_close &rArr; netconn_delete &rArr; netconn_free &rArr; sys_sem_free &rArr; rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_ping
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_lwip.o(.constdata)
</UL>
<P><STRONG><a name="[115]"></a>lwip_connect</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, sockets.o(i.lwip_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = lwip_connect &rArr; netconn_connect &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_lwip.o(.constdata)
</UL>
<P><STRONG><a name="[461]"></a>lwip_fcntl</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, sockets.o(i.lwip_fcntl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lwip_fcntl &rArr; get_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_ioctlsocket
</UL>

<P><STRONG><a name="[123]"></a>lwip_freeaddrinfo</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, netdb.o(i.lwip_freeaddrinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = lwip_freeaddrinfo &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_ping
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_lwip.o(.constdata)
</UL>
<P><STRONG><a name="[122]"></a>lwip_getaddrinfo</STRONG> (Thumb, 384 bytes, Stack size 72 bytes, netdb.o(i.lwip_getaddrinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = lwip_getaddrinfo &rArr; netconn_gethostbyname &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_ping
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_lwip.o(.constdata)
</UL>
<P><STRONG><a name="[120]"></a>lwip_gethostbyname</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, netdb.o(i.lwip_gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = lwip_gethostbyname &rArr; netconn_gethostbyname &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_lwip.o(.constdata)
</UL>
<P><STRONG><a name="[121]"></a>lwip_gethostbyname_r</STRONG> (Thumb, 186 bytes, Stack size 64 bytes, netdb.o(i.lwip_gethostbyname_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = lwip_gethostbyname_r &rArr; netconn_gethostbyname &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_lwip.o(.constdata)
</UL>
<P><STRONG><a name="[11c]"></a>lwip_getpeername</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sockets.o(i.lwip_getpeername))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = lwip_getpeername &rArr; lwip_getaddrname &rArr; netconn_getaddr &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_lwip.o(.constdata)
</UL>
<P><STRONG><a name="[460]"></a>lwip_getsockname</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sockets.o(i.lwip_getsockname))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = lwip_getsockname &rArr; lwip_getaddrname &rArr; netconn_getaddr &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_getsockname
</UL>

<P><STRONG><a name="[119]"></a>lwip_getsockopt</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, sockets.o(i.lwip_getsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = lwip_getsockopt &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_impl
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_lwip.o(.constdata)
</UL>
<P><STRONG><a name="[357]"></a>lwip_htonl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, def.o(i.lwip_htonl))
<BR><BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[39f]"></a>lwip_htons</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, def.o(i.lwip_htons))
<BR><BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_cksum_pseudo_base
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ping_recv
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_prepare_echo
</UL>

<P><STRONG><a name="[48d]"></a>lwip_init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, init.o(i.lwip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lwip_init &rArr; sys_timeouts_init &rArr; sys_timeout &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[462]"></a>lwip_ioctl</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, sockets.o(i.lwip_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = lwip_ioctl &rArr; sys_arch_unprotect &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_ioctlsocket
</UL>

<P><STRONG><a name="[46b]"></a>lwip_ip4_route_src</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sys_arch.o(i.lwip_ip4_route_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lwip_ip4_route_src
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route_src
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</UL>

<P><STRONG><a name="[114]"></a>lwip_listen</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, sockets.o(i.lwip_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = lwip_listen &rArr; netconn_listen_with_backlog &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_lwip.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>lwip_netconn_do_bind</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = lwip_netconn_do_bind &rArr; tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_bind
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_bind)
</UL>
<P><STRONG><a name="[9b]"></a>lwip_netconn_do_close</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, api_msg.o(i.lwip_netconn_do_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = lwip_netconn_do_close &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_close_shutdown)
</UL>
<P><STRONG><a name="[9c]"></a>lwip_netconn_do_connect</STRONG> (Thumb, 366 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = lwip_netconn_do_connect &rArr; tcp_connect &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_connect
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_connect)
</UL>
<P><STRONG><a name="[9d]"></a>lwip_netconn_do_delconn</STRONG> (Thumb, 438 bytes, Stack size 24 bytes, api_msg.o(i.lwip_netconn_do_delconn))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = lwip_netconn_do_delconn &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_delete)
</UL>
<P><STRONG><a name="[9e]"></a>lwip_netconn_do_disconnect</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = lwip_netconn_do_disconnect &rArr; sys_arch_unprotect &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_disconnect
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_disconnect)
</UL>
<P><STRONG><a name="[9f]"></a>lwip_netconn_do_getaddr</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_getaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = lwip_netconn_do_getaddr &rArr; sys_arch_unprotect &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_getaddr)
</UL>
<P><STRONG><a name="[a0]"></a>lwip_netconn_do_gethostbyname</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, api_msg.o(i.lwip_netconn_do_gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = lwip_netconn_do_gethostbyname &rArr; dns_gethostbyname_addrtype &rArr; dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_gethostbyname)
</UL>
<P><STRONG><a name="[a1]"></a>lwip_netconn_do_listen</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, api_msg.o(i.lwip_netconn_do_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = lwip_netconn_do_listen &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_listen_with_backlog)
</UL>
<P><STRONG><a name="[a2]"></a>lwip_netconn_do_newconn</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_newconn))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = lwip_netconn_do_newconn &rArr; pcb_new &rArr; tcp_new_ip_type &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_new_with_proto_and_callback)
</UL>
<P><STRONG><a name="[a3]"></a>lwip_netconn_do_recv</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, api_msg.o(i.lwip_netconn_do_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = lwip_netconn_do_recv &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_recv_data)
</UL>
<P><STRONG><a name="[a4]"></a>lwip_netconn_do_send</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = lwip_netconn_do_send &rArr; udp_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_send)
</UL>
<P><STRONG><a name="[a5]"></a>lwip_netconn_do_write</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = lwip_netconn_do_write &rArr; lwip_netconn_do_writemore &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_write_partly)
</UL>
<P><STRONG><a name="[10a]"></a>lwip_netdev_netstat</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ethernetif.o(i.lwip_netdev_netstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = lwip_netdev_netstat &rArr; list_udps &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_udps
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.constdata)
</UL>
<P><STRONG><a name="[109]"></a>lwip_netdev_ping</STRONG> (Thumb, 356 bytes, Stack size 128 bytes, ethernetif.o(i.lwip_netdev_ping))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = lwip_netdev_ping &rArr; lwip_ping_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_freeaddrinfo
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ping_send
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ping_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.constdata)
</UL>
<P><STRONG><a name="[4b0]"></a>lwip_ping_recv</STRONG> (Thumb, 98 bytes, Stack size 120 bytes, ping.o(i.lwip_ping_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = lwip_ping_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_ping
</UL>

<P><STRONG><a name="[4af]"></a>lwip_ping_send</STRONG> (Thumb, 130 bytes, Stack size 56 bytes, ping.o(i.lwip_ping_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = lwip_ping_send &rArr; lwip_sendto &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_prepare_echo
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_ping
</UL>

<P><STRONG><a name="[118]"></a>lwip_recvfrom</STRONG> (Thumb, 654 bytes, Stack size 96 bytes, sockets.o(i.lwip_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ping_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_lwip.o(.constdata)
</UL>
<P><STRONG><a name="[4b9]"></a>lwip_send</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, sockets.o(i.lwip_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136 + In Cycle
<LI>Call Chain = lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[117]"></a>lwip_sendto</STRONG> (Thumb, 296 bytes, Stack size 72 bytes, sockets.o(i.lwip_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = lwip_sendto &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ping_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_lwip.o(.constdata)
</UL>
<P><STRONG><a name="[11a]"></a>lwip_setsockopt</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, sockets.o(i.lwip_setsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = lwip_setsockopt &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_ping
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_lwip.o(.constdata)
</UL>
<P><STRONG><a name="[11b]"></a>lwip_shutdown</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, sockets.o(i.lwip_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = lwip_shutdown &rArr; netconn_shutdown &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_shutdown
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_lwip.o(.constdata)
</UL>
<P><STRONG><a name="[464]"></a>lwip_socket</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, sockets.o(i.lwip_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; sys_mbox_new &rArr; rt_mb_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_ping
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_socket
</UL>

<P><STRONG><a name="[45d]"></a>lwip_standard_chksum</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, inet_chksum.o(i.lwip_standard_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_cksum_pseudo_base
</UL>

<P><STRONG><a name="[39b]"></a>lwip_strnicmp</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, def.o(i.lwip_strnicmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lwip_strnicmp
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_lookup
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
</UL>

<P><STRONG><a name="[12a]"></a>lwip_system_init</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, sys_arch.o(i.lwip_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200 + Unknown Stack Size
<LI>Call Chain = lwip_system_init &rArr; tcpip_init &rArr; sys_thread_new &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_system_device_init_private
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(.rti_fn.2)
</UL>
<P><STRONG><a name="[3e1]"></a>lwip_tryget_socket</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sockets.o(i.lwip_tryget_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lwip_tryget_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_socket
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_poll
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_accept
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
</UL>

<P><STRONG><a name="[4c3]"></a>$Super$$main</STRONG> (Thumb, 324 bytes, Stack size 160 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = $Super$$main &rArr; rt_thread_mdelay &rArr; _thread_sleep &rArr; rt_thread_suspend_with_flag &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_netmask
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_ipaddr
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_gw
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_dns_server
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_aton
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_dhcp_enabled
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_find
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_init
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_device_find
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[1bb]"></a>malloc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, syscall_mem.o(i.malloc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[4cc]"></a>mem_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(i.mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>

<P><STRONG><a name="[48f]"></a>mem_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_arch.o(i.mem_init))
<BR><BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[378]"></a>mem_malloc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(i.mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = mem_malloc &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[514]"></a>mem_trim</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_arch.o(i.mem_trim))
<BR><BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>

<P><STRONG><a name="[3dd]"></a>memp_free</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, memp.o(i.memp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_freeaddrinfo
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input_delayed_close
</UL>

<P><STRONG><a name="[490]"></a>memp_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, memp.o(i.memp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = memp_init &rArr; memp_init_pool &rArr; memp_overflow_init_element
</UL>
<BR>[Calls]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[4cd]"></a>memp_init_pool</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, memp.o(i.memp_init_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = memp_init_pool &rArr; memp_overflow_init_element
</UL>
<BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_init_element
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
</UL>

<P><STRONG><a name="[3dc]"></a>memp_malloc_fn</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, memp.o(i.memp_malloc_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
</UL>

<P><STRONG><a name="[2ea]"></a>mkdir</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, dfs_posix.o(i.mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = mkdir &rArr; fd_new &rArr; fdt_fd_new &rArr; fd_alloc &rArr; fd_slot_alloc &rArr; fd_slot_expand &rArr; rt_realloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_release
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkdir
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[4d1]"></a>msh_auto_complete</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, msh.o(i.msh_auto_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = msh_auto_complete &rArr; msh_auto_complete_path &rArr; opendir &rArr; fd_new &rArr; fdt_fd_new &rArr; fd_alloc &rArr; fd_slot_alloc &rArr; fd_slot_expand &rArr; rt_realloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_common
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[4d2]"></a>msh_auto_complete_path</STRONG> (Thumb, 494 bytes, Stack size 112 bytes, msh.o(i.msh_auto_complete_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = msh_auto_complete_path &rArr; opendir &rArr; fd_new &rArr; fdt_fd_new &rArr; fd_alloc &rArr; fd_slot_alloc &rArr; fd_slot_expand &rArr; rt_realloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_common
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>

<P><STRONG><a name="[2dc]"></a>msh_cmd_opt_id_get</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, msh.o(i.msh_cmd_opt_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = msh_cmd_opt_id_get
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[419]"></a>msh_exec</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, msh.o(i.msh_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = msh_exec &rArr; msh_exec_script &rArr;  msh_exec (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[4d5]"></a>msh_exec_script</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, msh_file.o(i.msh_exec_script))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184 + In Cycle
<LI>Call Chain = msh_exec_script &rArr;  msh_exec (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_readline
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
</UL>

<P><STRONG><a name="[214]"></a>msh_isint</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, msh_parse.o(i.msh_isint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = msh_isint &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_write
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_read
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_mode
</UL>

<P><STRONG><a name="[4d8]"></a>msh_opt_auto_complete</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, msh.o(i.msh_opt_auto_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = msh_opt_auto_complete &rArr; msh_opt_complete &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_help
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_complete
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd_opt
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_argc
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[2e8]"></a>msh_opt_list_dump</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, msh.o(i.msh_opt_list_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = msh_opt_list_dump &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[427]"></a>netbuf_delete</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, netbuf.o(i.netbuf_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = netbuf_delete &rArr; pbuf_free &rArr; mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
</UL>

<P><STRONG><a name="[4bd]"></a>netbuf_free</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, netbuf.o(i.netbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = netbuf_free &rArr; pbuf_free &rArr; mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[4bb]"></a>netbuf_ref</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, netbuf.o(i.netbuf_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = netbuf_ref &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[480]"></a>netconn_accept</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, api_lib.o(i.netconn_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = netconn_accept &rArr; sys_arch_mbox_fetch &rArr; rt_mb_recv_interruptible &rArr; _rt_mb_recv &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[27c]"></a>netconn_alloc</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, api_msg.o(i.netconn_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = netconn_alloc &rArr; sys_mbox_new &rArr; rt_mb_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[484]"></a>netconn_bind</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, api_lib.o(i.netconn_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = netconn_bind &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
</UL>

<P><STRONG><a name="[486]"></a>netconn_connect</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, api_lib.o(i.netconn_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = netconn_connect &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
</UL>

<P><STRONG><a name="[482]"></a>netconn_delete</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, api_lib.o(i.netconn_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = netconn_delete &rArr; netconn_free &rArr; sys_sem_free &rArr; rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[485]"></a>netconn_disconnect</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, api_lib.o(i.netconn_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = netconn_disconnect &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
</UL>

<P><STRONG><a name="[285]"></a>netconn_free</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, api_msg.o(i.netconn_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = netconn_free &rArr; sys_sem_free &rArr; rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_set_invalid
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
</UL>

<P><STRONG><a name="[483]"></a>netconn_getaddr</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, api_lib.o(i.netconn_getaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = netconn_getaddr &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
</UL>

<P><STRONG><a name="[487]"></a>netconn_gethostbyname</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, api_lib.o(i.netconn_gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = netconn_gethostbyname &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname_r
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
</UL>

<P><STRONG><a name="[496]"></a>netconn_listen_with_backlog</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, api_lib.o(i.netconn_listen_with_backlog))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = netconn_listen_with_backlog &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
</UL>

<P><STRONG><a name="[4c0]"></a>netconn_new_with_proto_and_callback</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, api_lib.o(i.netconn_new_with_proto_and_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; sys_mbox_new &rArr; rt_mb_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
</UL>

<P><STRONG><a name="[4b8]"></a>netconn_recv</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, api_lib.o(i.netconn_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[4b7]"></a>netconn_recv_tcp_pbuf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, api_lib.o(i.netconn_recv_tcp_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = netconn_recv_tcp_pbuf &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[4bc]"></a>netconn_send</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, api_lib.o(i.netconn_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = netconn_send &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[4bf]"></a>netconn_shutdown</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, api_lib.o(i.netconn_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = netconn_shutdown &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
</UL>

<P><STRONG><a name="[4ba]"></a>netconn_write_partly</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, api_lib.o(i.netconn_write_partly))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = netconn_write_partly &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>

<P><STRONG><a name="[4ed]"></a>netdev_cmd_ping</STRONG> (Thumb, 424 bytes, Stack size 72 bytes, netdev.o(i.netdev_cmd_ping))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = netdev_cmd_ping &rArr; rt_thread_delay &rArr; _thread_sleep &rArr; rt_thread_suspend_with_flag &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_ntoa
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ping
</UL>

<P><STRONG><a name="[4ef]"></a>netdev_dhcp_close</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, netdev.o(i.netdev_dhcp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = netdev_dhcp_close &rArr; netdev_get_by_name &rArr; rt_spin_unlock &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_dhcp_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_if
</UL>

<P><STRONG><a name="[4c4]"></a>netdev_dhcp_enabled</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, netdev.o(i.netdev_dhcp_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = netdev_dhcp_enabled &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_dhcp_status_test
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_dhcp_open
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_dhcp_close
</UL>

<P><STRONG><a name="[4f0]"></a>netdev_dhcp_open</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, netdev.o(i.netdev_dhcp_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = netdev_dhcp_open &rArr; netdev_get_by_name &rArr; rt_spin_unlock &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_dhcp_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ifconfig
</UL>

<P><STRONG><a name="[150]"></a>netdev_dns</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, netdev.o(i.netdev_dns))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = netdev_dns &rArr; netdev_set_dns &rArr; netdev_get_by_name &rArr; rt_spin_unlock &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_dns
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_list_dns
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netdev.o(FSymTab)
</UL>
<P><STRONG><a name="[4f3]"></a>netdev_get_by_family</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, netdev.o(i.netdev_get_by_family))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = netdev_get_by_family &rArr; rt_spin_unlock &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_check_network
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_init
</UL>

<P><STRONG><a name="[4f4]"></a>netdev_get_by_ipaddr</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, netdev.o(i.netdev_get_by_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = netdev_get_by_ipaddr &rArr; rt_spin_unlock &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_bind
</UL>

<P><STRONG><a name="[3a5]"></a>netdev_get_by_name</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, netdev.o(i.netdev_get_by_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = netdev_get_by_name &rArr; rt_spin_unlock &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_status_test
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_dhcp_status_test
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_down
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_dhcp_open
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_dhcp_close
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_ping
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_if
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_dns
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_flags_sync
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_ioctlsocket
</UL>

<P><STRONG><a name="[4ea]"></a>netdev_get_first_by_flags</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, netdev.o(i.netdev_get_first_by_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = netdev_get_first_by_flags &rArr; rt_spin_unlock &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_auto_change_default
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_gethostbyname
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_getaddrinfo
</UL>

<P><STRONG><a name="[14e]"></a>netdev_ifconfig</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, netdev.o(i.netdev_ifconfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = netdev_ifconfig &rArr; netdev_set_if &rArr; netdev_dhcp_close &rArr; netdev_get_by_name &rArr; rt_spin_unlock &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_dhcp_open
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_if
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_list_if
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netdev.o(FSymTab)
</UL>
<P><STRONG><a name="[4c5]"></a>netdev_ip4addr_aton</STRONG> (Thumb, 418 bytes, Stack size 48 bytes, netdev_ipaddr.o(i.netdev_ip4addr_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = netdev_ip4addr_aton &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_if
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_dns
</UL>

<P><STRONG><a name="[4ee]"></a>netdev_ip4addr_ntoa</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, netdev_ipaddr.o(i.netdev_ip4addr_ntoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = netdev_ip4addr_ntoa &rArr; netdev_ip4addr_ntoa_r
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserv
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_ping
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_list_if
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_list_dns
</UL>

<P><STRONG><a name="[4f7]"></a>netdev_ip4addr_ntoa_r</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, netdev_ipaddr.o(i.netdev_ip4addr_ntoa_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = netdev_ip4addr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_ntoa
</UL>

<P><STRONG><a name="[4b4]"></a>netdev_low_level_set_dhcp_status</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, netdev.o(i.netdev_low_level_set_dhcp_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netdev_low_level_set_dhcp_status
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_flags_sync
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_set_dhcp
</UL>

<P><STRONG><a name="[3a6]"></a>netdev_low_level_set_dns_server</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, netdev.o(i.netdev_low_level_set_dns_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = netdev_low_level_set_dns_server &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
</UL>

<P><STRONG><a name="[4f8]"></a>netdev_low_level_set_gw</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, netdev.o(i.netdev_low_level_set_gw))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = netdev_low_level_set_gw &rArr; sal_check_netdev_internet_up &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_check_netdev_internet_up
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>

<P><STRONG><a name="[2d5]"></a>netdev_low_level_set_internet_status</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, netdev.o(i.netdev_low_level_set_internet_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netdev_low_level_set_internet_status
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_netdev_internet_up_work
</UL>

<P><STRONG><a name="[4fa]"></a>netdev_low_level_set_ipaddr</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, netdev.o(i.netdev_low_level_set_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = netdev_low_level_set_ipaddr &rArr; sal_check_netdev_internet_up &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_check_netdev_internet_up
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[4fb]"></a>netdev_low_level_set_link_status</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, netdev.o(i.netdev_low_level_set_link_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = netdev_low_level_set_link_status &rArr; sal_check_netdev_internet_up &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_check_netdev_internet_up
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_auto_change_default
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_down
</UL>

<P><STRONG><a name="[4fc]"></a>netdev_low_level_set_netmask</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, netdev.o(i.netdev_low_level_set_netmask))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = netdev_low_level_set_netmask &rArr; sal_check_netdev_internet_up &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_check_netdev_internet_up
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
</UL>

<P><STRONG><a name="[4fd]"></a>netdev_low_level_set_status</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, netdev.o(i.netdev_low_level_set_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = netdev_low_level_set_status &rArr; netdev_auto_change_default &rArr; netdev_get_first_by_flags &rArr; rt_spin_unlock &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_auto_change_default
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>

<P><STRONG><a name="[151]"></a>netdev_netstat</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, netdev.o(i.netdev_netstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = netdev_netstat &rArr; netdev_cmd_netstat &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_netstat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netdev.o(FSymTab)
</UL>
<P><STRONG><a name="[14f]"></a>netdev_ping</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, netdev.o(i.netdev_ping))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = netdev_ping &rArr; netdev_cmd_ping &rArr; rt_thread_delay &rArr; _thread_sleep &rArr; rt_thread_suspend_with_flag &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_ping
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netdev.o(FSymTab)
</UL>
<P><STRONG><a name="[4e7]"></a>netdev_register</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, netdev.o(i.netdev_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = netdev_register &rArr; rt_spin_unlock &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_default
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_add
</UL>

<P><STRONG><a name="[4e9]"></a>netdev_set_default</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, netdev.o(i.netdev_set_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netdev_set_default
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_auto_change_default
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_register
</UL>

<P><STRONG><a name="[135]"></a>netdev_set_dhcp_status_test</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, main.o(i.netdev_set_dhcp_status_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = netdev_set_dhcp_status_test &rArr; netdev_get_by_name &rArr; rt_spin_unlock &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_dhcp_enabled
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(FSymTab)
</UL>
<P><STRONG><a name="[4c9]"></a>netdev_set_dns_server</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, netdev.o(i.netdev_set_dns_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = netdev_set_dns_server &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_dns
</UL>

<P><STRONG><a name="[4fe]"></a>netdev_set_down</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, netdev.o(i.netdev_set_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = netdev_set_down &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_status_test
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_ioctlsocket
</UL>

<P><STRONG><a name="[4c7]"></a>netdev_set_gw</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, netdev.o(i.netdev_set_gw))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = netdev_set_gw &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_if
</UL>

<P><STRONG><a name="[4c6]"></a>netdev_set_ipaddr</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, netdev.o(i.netdev_set_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = netdev_set_ipaddr &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_if
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_ioctlsocket
</UL>

<P><STRONG><a name="[4c8]"></a>netdev_set_netmask</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, netdev.o(i.netdev_set_netmask))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = netdev_set_netmask &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_if
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_ioctlsocket
</UL>

<P><STRONG><a name="[134]"></a>netdev_set_status_test</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, main.o(i.netdev_set_status_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = netdev_set_status_test &rArr; netdev_get_by_name &rArr; rt_spin_unlock &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_up
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_down
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(FSymTab)
</UL>
<P><STRONG><a name="[4ff]"></a>netdev_set_up</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, netdev.o(i.netdev_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = netdev_set_up &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_status_test
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_ioctlsocket
</UL>

<P><STRONG><a name="[500]"></a>netif_add</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, netif.o(i.netif_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432<LI>Call Chain = netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_do_netif_add
</UL>

<P><STRONG><a name="[491]"></a>netif_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, netif.o(i.netif_init))
<BR><BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[34d]"></a>netif_set_addr</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, netif.o(i.netif_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_set_addr_info
</UL>

<P><STRONG><a name="[3c5]"></a>netif_set_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netif.o(i.netif_set_default))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_set_default
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_netif_device_init
</UL>

<P><STRONG><a name="[4b5]"></a>netif_set_down</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, netif.o(i.netif_set_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = netif_set_down &rArr; etharp_cleanup_netif &rArr; etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_status
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_cleanup_netif
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_set_down
</UL>

<P><STRONG><a name="[4b3]"></a>netif_set_gw</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, netif.o(i.netif_set_gw))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = netif_set_gw &rArr; netdev_low_level_set_gw &rArr; sal_check_netdev_internet_up &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_set_addr_info
</UL>

<P><STRONG><a name="[4b1]"></a>netif_set_ipaddr</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, netif.o(i.netif_set_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_netif_ip_addr_changed
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_netif_ip_addr_changed
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_ipaddr
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_set_addr_info
</UL>

<P><STRONG><a name="[8a]"></a>netif_set_link_down</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, netif.o(i.netif_set_link_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = netif_set_link_down &rArr; netdev_low_level_set_link_status &rArr; sal_check_netdev_internet_up &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_link_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.eth_rx_thread_entry)
</UL>
<P><STRONG><a name="[89]"></a>netif_set_link_up</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, netif.o(i.netif_set_link_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = netif_set_link_up &rArr; dhcp_network_changed &rArr; dhcp_reboot &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_link_status
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_netif_device_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.eth_rx_thread_entry)
</UL>
<P><STRONG><a name="[4b2]"></a>netif_set_netmask</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, netif.o(i.netif_set_netmask))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = netif_set_netmask &rArr; netdev_low_level_set_netmask &rArr; sal_check_netdev_internet_up &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_netmask
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_set_addr_info
</UL>

<P><STRONG><a name="[3c6]"></a>netif_set_up</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, netif.o(i.netif_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = netif_set_up &rArr; netif_issue_reports &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_status
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_set_up
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_netif_device_init
</UL>

<P><STRONG><a name="[3c0]"></a>netifapi_netif_add</STRONG> (Thumb, 72 bytes, Stack size 72 bytes, netifapi.o(i.netifapi_netif_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = netifapi_netif_add &rArr; tcpip_api_call &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
</UL>

<P><STRONG><a name="[3c9]"></a>netifapi_netif_common</STRONG> (Thumb, 32 bytes, Stack size 56 bytes, netifapi.o(i.netifapi_netif_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = netifapi_netif_common &rArr; tcpip_api_call &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
</UL>

<P><STRONG><a name="[509]"></a>ntp_get_time</STRONG> (Thumb, 626 bytes, Stack size 192 bytes, ntp.o(i.ntp_get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = ntp_get_time &rArr; socket &rArr; sal_socket &rArr; socket_new &rArr; socket_alloc &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcmp
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto_ntp_server
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync_to_rtc
</UL>

<P><STRONG><a name="[2ef]"></a>ntp_sync_to_rtc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ntp.o(i.ntp_sync_to_rtc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = ntp_sync_to_rtc &rArr; ntp_get_time &rArr; socket &rArr; sal_socket &rArr; socket_new &rArr; socket_alloc &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync_work_func
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ntp_sync
</UL>

<P><STRONG><a name="[292]"></a>nvic_irq_disable</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, at32f435_437_misc.o(i.nvic_irq_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nvic_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_control
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_irq_enable
</UL>

<P><STRONG><a name="[294]"></a>nvic_irq_enable</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, at32f435_437_misc.o(i.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_dma_config
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_control
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_hcd_init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_irq_enable
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_systick_init
</UL>

<P><STRONG><a name="[545]"></a>nvic_priority_group_config</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, at32f435_437_misc.o(i.nvic_priority_group_config))
<BR><BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[245]"></a>open</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, dfs_posix.o(i.open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = open &rArr; fd_new &rArr; fdt_fd_new &rArr; fd_alloc &rArr; fd_slot_alloc &rArr; fd_slot_expand &rArr; rt_realloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_release
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tail
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_file
</UL>

<P><STRONG><a name="[2c8]"></a>opendir</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, dfs_posix.o(i.opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = opendir &rArr; fd_new &rArr; fdt_fd_new &rArr; fd_alloc &rArr; fd_slot_alloc &rArr; fd_slot_expand &rArr; rt_realloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_release
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
</UL>

<P><STRONG><a name="[355]"></a>pbuf_alloc</STRONG> (Thumb, 704 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rndis_eth_rx
</UL>

<P><STRONG><a name="[50e]"></a>pbuf_cat</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = pbuf_cat &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[50f]"></a>pbuf_chain</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = pbuf_chain &rArr; pbuf_ref &rArr; sys_arch_unprotect &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>

<P><STRONG><a name="[5f0]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_clen))
<BR><BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[3da]"></a>pbuf_copy</STRONG> (Thumb, 326 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = pbuf_copy &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[372]"></a>pbuf_copy_partial</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_copy_partial))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = pbuf_copy_partial &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
</UL>

<P><STRONG><a name="[361]"></a>pbuf_free</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = pbuf_free &rArr; mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
</UL>

<P><STRONG><a name="[3de]"></a>pbuf_header</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = pbuf_header &rArr; pbuf_header_impl &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[468]"></a>pbuf_header_force</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_header_force))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = pbuf_header_force &rArr; pbuf_header_impl &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[3a2]"></a>pbuf_put_at</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_put_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = pbuf_put_at &rArr; pbuf_skip &rArr; pbuf_skip_const
</UL>
<BR>[Calls]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[35e]"></a>pbuf_realloc</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
</UL>

<P><STRONG><a name="[3db]"></a>pbuf_ref</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = pbuf_ref &rArr; sys_arch_unprotect &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[513]"></a>pbuf_skip</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_skip))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pbuf_skip &rArr; pbuf_skip_const
</UL>
<BR>[Calls]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip_const
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_put_at
</UL>

<P><STRONG><a name="[3a1]"></a>pbuf_take</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = pbuf_take &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[3a3]"></a>pbuf_take_at</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_take_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = pbuf_take_at &rArr; pbuf_take &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[398]"></a>pbuf_try_get_at</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_try_get_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pbuf_try_get_at &rArr; pbuf_skip_const
</UL>
<BR>[Calls]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip_const
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_skip_name
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_compare_name
</UL>

<P><STRONG><a name="[51a]"></a>poll</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, poll.o(i.poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = poll &rArr; poll_do &rArr; do_pollfd &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_teardown
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_table_init
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_do
</UL>
<BR>[Called By]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
</UL>

<P><STRONG><a name="[497]"></a>raw_bind</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, raw.o(i.raw_bind))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
</UL>

<P><STRONG><a name="[4a1]"></a>raw_connect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, raw.o(i.raw_connect))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
</UL>

<P><STRONG><a name="[465]"></a>raw_input</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, raw.o(i.raw_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = raw_input &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input_match
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[504]"></a>raw_netif_ip_addr_changed</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, raw.o(i.raw_netif_ip_addr_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = raw_netif_ip_addr_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[526]"></a>raw_new</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, raw.o(i.raw_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = raw_new &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new_ip_type
</UL>

<P><STRONG><a name="[516]"></a>raw_new_ip_type</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, raw.o(i.raw_new_ip_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = raw_new_ip_type &rArr; raw_new &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[517]"></a>raw_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, raw.o(i.raw_recv))
<BR><BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[4a3]"></a>raw_remove</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, raw.o(i.raw_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = raw_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
</UL>

<P><STRONG><a name="[4a9]"></a>raw_send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, raw.o(i.raw_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = raw_send &rArr; raw_sendto &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
</UL>

<P><STRONG><a name="[4aa]"></a>raw_sendto</STRONG> (Thumb, 246 bytes, Stack size 48 bytes, raw.o(i.raw_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = raw_sendto &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route_src
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
</UL>

<P><STRONG><a name="[2f2]"></a>read</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, dfs_posix.o(i.read))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = read &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_readline
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tail
</UL>

<P><STRONG><a name="[38a]"></a>readdir</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, dfs_posix.o(i.readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = readdir &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_getdents
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
</UL>

<P><STRONG><a name="[528]"></a>recv</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, net_sockets.o(i.recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = recv &rArr; dfs_net_getsocket &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_recvfrom
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserv
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_recv
</UL>

<P><STRONG><a name="[50c]"></a>recvfrom</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, net_sockets.o(i.recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = recvfrom &rArr; dfs_net_getsocket &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_recvfrom
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
</UL>

<P><STRONG><a name="[2ee]"></a>rename</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dfs_posix.o(i.rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = rename &rArr; dfs_file_rename &rArr; dfs_file_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
</UL>

<P><STRONG><a name="[4d4]"></a>rewinddir</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dfs_posix.o(i.rewinddir))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = rewinddir &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
</UL>

<P><STRONG><a name="[38b]"></a>rmdir</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, dfs_posix.o(i.rmdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = rmdir &rArr; dfs_file_unlink &rArr; dfs_file_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
</UL>

<P><STRONG><a name="[529]"></a>rt_application_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, components.o(i.rt_application_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1f7]"></a>rt_assert_handler</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, kservice.o(i.rt_assert_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace
</UL>
<BR>[Called By]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_up
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_netmask
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_ipaddr
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_gw
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_down
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_dns_server
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_aton
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_dhcp_enabled
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_device_find
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wakeup_by_errno
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait_flags
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peek
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_deinit
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_put_index
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_get_index
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_tx
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_rx
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_calc_recved_len
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_read
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_get
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_write
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_read
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_control
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_submit_work
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_work_init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_work_sys_workqueue_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_dequeue
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_len
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_remove
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_device_find_by_part
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_init
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_tx_isr
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_rx_isr
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_isr
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_putc
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_getc
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_dma_transmit
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_dma_config
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_control
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_configure
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_usbh_register
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_write
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_read
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_ioctl
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_getdents
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_close
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_prompt_mode
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_rx_ind
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdt_fd_release
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_lock
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_write
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_statfs
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_read
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_lseek
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_ioctl
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_flush
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_close
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_partition
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_close
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_set_suspend_state
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_init_priv
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_remove_thread
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_insert_thread
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_scheduler_stack_check
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_for_each
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_realloc
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_free
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_alloc
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init_generic
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_change_priority
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_enqueue
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mq_send_wait
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mq_recv
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_send_wait
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_recv
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_dns_server
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_netmask
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_ipaddr
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_gw
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_check_netdev_internet_up
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_lwip_netdev_set_pf_info
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_register
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_ping
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_system_device_init_private
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_linkchange
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_flags_sync
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_add
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_linkoutput
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_tx_thread_entry
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_class_driver_enable
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_class_driver_disable
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_request_header_add
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_request
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_getaddrinfo
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_freeaddrinfo
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_rndis_bulk_send
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rndis_eth_tx
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udisk_get_id
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udisk_free_id
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_write
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_read
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_control
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_stop
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_write10
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_test_unit_ready
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_reset
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_request_sense
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_read10
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_inquiry
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_get_max_lun
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_get_capacity
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_enable
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_disable
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_bulk_only_xfer
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_set_configure
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_set_address
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_get_interface_descriptor
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_get_descriptor
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_clear_feature
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_instance_add_pipe
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_free_pipe
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_get_endpoint_descriptor
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_detach_instance
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_set_port_feature
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_reset_port
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_port_debounce
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_get_port_status
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_get_descriptor
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_clear_port_feature
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_event_signal
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_port_change
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_irq
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_enable
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_disable
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_init
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_delete
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_lock
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_bind
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_write
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_response
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_header_fields_get
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_header_fields_add
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_content_length_get
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_close
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read_line
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_next_chunk
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
</UL>

<P><STRONG><a name="[2d7]"></a>rt_backtrace</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, kservice.o(i.rt_backtrace))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_backtrace &rArr; rt_backtrace_frame &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_backtrace_frame_unwind
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_backtrace
</UL>

<P><STRONG><a name="[52b]"></a>rt_backtrace_frame</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, kservice.o(i.rt_backtrace_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = rt_backtrace_frame &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_backtrace_frame_unwind
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace_thread
</UL>

<P><STRONG><a name="[2d8]"></a>rt_backtrace_thread</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, kservice.o(i.rt_backtrace_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = rt_backtrace_thread &rArr; rt_hw_backtrace_frame_get &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_backtrace_frame_get
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_backtrace
</UL>

<P><STRONG><a name="[338]"></a>rt_calloc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, kservice.o(i.rt_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = rt_calloc &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_alloc
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_check_netdev_internet_up
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_add
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_request_header_add
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_init
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_alloc
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_session_create
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_response
</UL>

<P><STRONG><a name="[26d]"></a>rt_completion_done</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, completion_comm.o(i.rt_completion_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = rt_completion_done &rArr; rt_completion_wakeup_by_errno &rArr; rt_thread_resume &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wakeup_by_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_tx_thread_entry
</UL>

<P><STRONG><a name="[3df]"></a>rt_completion_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, completion_up.o(i.rt_completion_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_completion_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_linkoutput
</UL>

<P><STRONG><a name="[23f]"></a>rt_completion_wait</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, completion_comm.o(i.rt_completion_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = rt_completion_wait &rArr; rt_completion_wait_flags &rArr; rt_thread_suspend_with_flag &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_linkoutput
</UL>

<P><STRONG><a name="[52e]"></a>rt_completion_wait_flags</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, completion_up.o(i.rt_completion_wait_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = rt_completion_wait_flags &rArr; rt_thread_suspend_with_flag &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_with_flag
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_critical_level
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>

<P><STRONG><a name="[52d]"></a>rt_completion_wakeup_by_errno</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, completion_up.o(i.rt_completion_wakeup_by_errno))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = rt_completion_wakeup_by_errno &rArr; rt_thread_resume &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
</UL>

<P><STRONG><a name="[549]"></a>rt_components_board_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, components.o(i.rt_components_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_components_board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[4cb]"></a>rt_components_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, components.o(i.rt_components_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_components_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[1fc]"></a>rt_console_get_device</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kservice.o(i.rt_console_get_device))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kputs
</UL>

<P><STRONG><a name="[530]"></a>rt_console_set_device</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, kservice.o(i.rt_console_set_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = rt_console_set_device &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_object_for_each &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>
<BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[57f]"></a>rt_cpu_index</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cpu_up.o(i.rt_cpu_index))
<BR><BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
</UL>

<P><STRONG><a name="[56a]"></a>rt_cpu_self</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu_up.o(i.rt_cpu_self))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[220]"></a>rt_critical_level</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, scheduler_up.o(i.rt_critical_level))
<BR><BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait_flags
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_close
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mq_send_wait
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mq_recv
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_send_wait
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_recv
</UL>

<P><STRONG><a name="[531]"></a>rt_data_queue_deinit</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, dataqueue.o(i.rt_data_queue_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = rt_data_queue_deinit &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
</UL>

<P><STRONG><a name="[533]"></a>rt_data_queue_init</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, dataqueue.o(i.rt_data_queue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = rt_data_queue_init &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
</UL>

<P><STRONG><a name="[535]"></a>rt_data_queue_len</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, dataqueue.o(i.rt_data_queue_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = rt_data_queue_len &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
</UL>

<P><STRONG><a name="[536]"></a>rt_data_queue_peek</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, dataqueue.o(i.rt_data_queue_peek))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = rt_data_queue_peek &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[537]"></a>rt_data_queue_pop</STRONG> (Thumb, 476 bytes, Stack size 48 bytes, dataqueue.o(i.rt_data_queue_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = rt_data_queue_pop &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_critical_level
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_dequeue
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_len
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[23b]"></a>rt_data_queue_push</STRONG> (Thumb, 408 bytes, Stack size 48 bytes, dataqueue.o(i.rt_data_queue_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = rt_data_queue_push &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_critical_level
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
</UL>

<P><STRONG><a name="[532]"></a>rt_data_queue_reset</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, dataqueue.o(i.rt_data_queue_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = rt_data_queue_reset &rArr; rt_susp_list_resume_all_irq &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_resume_all_irq
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_deinit
</UL>

<P><STRONG><a name="[45a]"></a>rt_defunct_execute</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, defunct.o(i.rt_defunct_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = rt_defunct_execute &rArr; rt_object_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_thread_entry
</UL>

<P><STRONG><a name="[315]"></a>rt_device_close</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, device.o(i.rt_device_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_device_close &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_close
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
</UL>

<P><STRONG><a name="[316]"></a>rt_device_control</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, device.o(i.rt_device_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_ioctl
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_rmc_sample_entry_init
</UL>

<P><STRONG><a name="[319]"></a>rt_device_find</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, device.o(i.rt_device_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = rt_device_find &rArr; rt_object_find &rArr; rt_object_for_each &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_host_init
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_stat
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_rmc_sample_entry_init
</UL>

<P><STRONG><a name="[3c4]"></a>rt_device_init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, device.o(i.rt_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = rt_device_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_host_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_netif_device_init
</UL>

<P><STRONG><a name="[31a]"></a>rt_device_open</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, device.o(i.rt_device_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = rt_device_open &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_netif_device_init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_rmc_sample_entry_init
</UL>

<P><STRONG><a name="[53e]"></a>rt_device_pin_register</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dev_pin.o(i.rt_device_pin_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = rt_device_pin_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_object_for_each &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pin_init
</UL>

<P><STRONG><a name="[31b]"></a>rt_device_read</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, device.o(i.rt_device_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rt_device_read &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_read
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_rmc_sample_entry
</UL>

<P><STRONG><a name="[2b4]"></a>rt_device_register</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, device.o(i.rt_device_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_object_for_each &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pin_register
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_usbh_register
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
</UL>

<P><STRONG><a name="[410]"></a>rt_device_set_rx_indicate</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, device.o(i.rt_device_set_rx_indicate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_device_set_rx_indicate &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_rmc_sample_entry_init
</UL>

<P><STRONG><a name="[540]"></a>rt_device_unregister</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, device.o(i.rt_device_unregister))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = rt_device_unregister &rArr; rt_object_detach &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_stop
</UL>

<P><STRONG><a name="[1fe]"></a>rt_device_write</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, device.o(i.rt_device_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_write
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kputs
</UL>

<P><STRONG><a name="[24a]"></a>rt_enter_critical</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, scheduler_up.o(i.rt_enter_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_udps
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_class_driver_find
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_alloc_instance
</UL>

<P><STRONG><a name="[318]"></a>rt_exit_critical</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, scheduler_up.o(i.rt_exit_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical_safe
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_udps
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_class_driver_find
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_alloc_instance
</UL>

<P><STRONG><a name="[24e]"></a>rt_exit_critical_safe</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, scheduler_up.o(i.rt_exit_critical_safe))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach
</UL>

<P><STRONG><a name="[2c9]"></a>rt_free</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, kservice.o(i.rt_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_free
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserv
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_deinit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_close
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdt_fd_release
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_close
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_teardown
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_is_open
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ping_send
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_stop
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_disable
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_free_pipe
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_detach_instance
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_disable
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_free
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_netdev_internet_up_work
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post_test
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post_smpl
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post_comm
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_test
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_smpl
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_comm
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_file
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_session_create
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_response
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_close
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_clean
</UL>

<P><STRONG><a name="[313]"></a>rt_get_errno</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, kerrno.o(i.rt_get_errno))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_get_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_wait_timeout
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_write
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_read
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_ioctl
</UL>

<P><STRONG><a name="[54e]"></a>rt_hw_atomic_add</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, atomic_arm.o(i.rt_hw_atomic_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_hw_atomic_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>

<P><STRONG><a name="[54f]"></a>rt_hw_atomic_load</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, atomic_arm.o(i.rt_hw_atomic_load))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>

<P><STRONG><a name="[550]"></a>rt_hw_atomic_sub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, atomic_arm.o(i.rt_hw_atomic_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_hw_atomic_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
</UL>

<P><STRONG><a name="[52c]"></a>rt_hw_backtrace_frame_get</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, kservice.o(i.rt_hw_backtrace_frame_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = rt_hw_backtrace_frame_get &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace_thread
</UL>

<P><STRONG><a name="[52a]"></a>rt_hw_backtrace_frame_unwind</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, kservice.o(i.rt_hw_backtrace_frame_unwind))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = rt_hw_backtrace_frame_unwind &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace_frame
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace
</UL>

<P><STRONG><a name="[543]"></a>rt_hw_board_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, drv_common.o(i.rt_hw_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = rt_hw_board_init &rArr; rt_hw_usart_init &rArr; rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_object_for_each &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pin_init
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_board_init
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_config
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_systick_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1fd]"></a>rt_hw_console_output</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kservice.o(i.rt_hw_console_output))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kputs
</UL>

<P><STRONG><a name="[527]"></a>rt_hw_cpu_reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpuport.o(i.rt_hw_cpu_reset))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot
</UL>

<P><STRONG><a name="[179]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, cpuport.o(i.rt_hw_hard_fault_exception))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = rt_hw_hard_fault_exception &rArr; list_thread &rArr; list_get_next &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[126]"></a>rt_hw_pin_init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, drv_gpio.o(i.rt_hw_pin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = rt_hw_pin_init &rArr; rt_device_pin_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_object_for_each &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pin_register
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[38e]"></a>rt_hw_serial_isr</STRONG> (Thumb, 420 bytes, Stack size 40 bytes, dev_serial.o(i.rt_hw_serial_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peek
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_put_index
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_calc_recved_len
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_check_buffer_size
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_tx_isr
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_rx_isr
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_isr
</UL>

<P><STRONG><a name="[54a]"></a>rt_hw_serial_register</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, dev_serial.o(i.rt_hw_serial_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_object_for_each &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_init
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
</UL>

<P><STRONG><a name="[253]"></a>rt_hw_stack_init</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, cpuport.o(i.rt_hw_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
</UL>

<P><STRONG><a name="[546]"></a>rt_hw_systick_init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, drv_common.o(i.rt_hw_systick_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_hw_systick_init &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_clock_source_config
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[548]"></a>rt_hw_usart_init</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, drv_usart.o(i.rt_hw_usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = rt_hw_usart_init &rArr; rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_object_for_each &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_uart_get_dma_config
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dma_base_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[1d2]"></a>rt_interrupt_enter</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_interrupt_enter &rArr; rt_hw_atomic_add
</UL>
<BR>[Calls]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_atomic_add
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTGFS1_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT9_5_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT4_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT3_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT2_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT1_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT15_10_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT0_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[221]"></a>rt_interrupt_get_nest</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, irq.o(i.rt_interrupt_get_nest))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_atomic_load
</UL>
<BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait_flags
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_errno
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_for_each
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mq_send_wait
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mq_recv
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_send_wait
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_recv
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>

<P><STRONG><a name="[1d4]"></a>rt_interrupt_leave</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_interrupt_leave &rArr; rt_hw_atomic_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_atomic_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTGFS1_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT9_5_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT4_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT3_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT2_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT1_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT15_10_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT0_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1e9]"></a>rt_kprintf</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, kservice.o(i.rt_kprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kputs
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_up
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_netmask
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_ipaddr
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_gw
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_down
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_dns_server
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_dhcp_enabled
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_status_test
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_dhcp_status_test
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usage
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_test
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserv
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait_flags
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_check_buffer_size
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_write
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_read
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_print_usage
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_mode
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_get
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usage_fault_track
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_manage_fault_track
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_fault_track
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_show_part_table
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_update_part_cache
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_init
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_host_init
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_disconnect_callback
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_connect_callback
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_usbh_register
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pipe_xfer
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_umount
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tail
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rm
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_pwd
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mount
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkfs
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkdir
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_df
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cp
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cd
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cat
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_split
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_help
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_complete
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_free
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_print
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_list_dump
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_fd
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdt_fd_new
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_partition
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_libc_exit
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_scheduler_stack_check
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_for_each
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_backtrace_frame_unwind
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_backtrace_frame_get
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace_frame
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_backtrace
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mq_send_wait
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mq_recv
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_send_wait
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_recv
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_getaddr
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_closed
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element_underflow
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element_overflow
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool_fn
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_hostname
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_check_netdev_internet_up
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ping
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_netstat
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ifconfig
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_dns
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_dhcp_open
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_dhcp_close
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_ping
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_if
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_dns
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_list_if
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_list_dns
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_netstat
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_register
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_udps
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ping_send
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_rx_qlvl_handler
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_port_handler
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_hch_out_handler
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_hch_in_handler
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_request_header_add
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_request
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync_to_rtc
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_ioctlsocket
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_data_print
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_rndis_eth_device_init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rndis_eth_tx
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rndis_frame_debug
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_write
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_read
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_write10
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_test_unit_ready
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_reset
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_request_sense
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_read10
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_inquiry
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_get_max_lun
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_get_capacity
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_enable
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_bulk_only_xfer
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pipe_check
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_set_address
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_get_interface_descriptor
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_get_endpoint_descriptor
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_detach_instance
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_pipe_xfer
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_enable
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_init
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_init
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_socket
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_accept
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_rmc_sample_entry_init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post_test
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post_smpl
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post_comm
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_test
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_smpl
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_comm
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wget
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_file
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_session_create
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_response
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_header_fields_add
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read_line
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
</UL>

<P><STRONG><a name="[21c]"></a>rt_malloc</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, kservice.o(i.rt_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_alloc
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserv
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_usbh_register
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_poll_add
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ping_send
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_enable
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_alloc_pipe
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_enable
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post_comm
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_comm
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_file
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
</UL>

<P><STRONG><a name="[553]"></a>rt_mb_create</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, ipc.o(i.rt_mb_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = rt_mb_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>

<P><STRONG><a name="[555]"></a>rt_mb_delete</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, ipc.o(i.rt_mb_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = rt_mb_delete &rArr; rt_object_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_resume_all
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>

<P><STRONG><a name="[3cb]"></a>rt_mb_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ipc.o(i.rt_mb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = rt_mb_init &rArr; rt_object_init &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_system_device_init_private
</UL>

<P><STRONG><a name="[3c8]"></a>rt_mb_recv</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ipc.o(i.rt_mb_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = rt_mb_recv &rArr; _rt_mb_recv &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_tx_thread_entry
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
</UL>

<P><STRONG><a name="[556]"></a>rt_mb_recv_interruptible</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ipc.o(i.rt_mb_recv_interruptible))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = rt_mb_recv_interruptible &rArr; _rt_mb_recv &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>

<P><STRONG><a name="[3c2]"></a>rt_mb_send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ipc.o(i.rt_mb_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_linkchange
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_linkoutput
</UL>

<P><STRONG><a name="[557]"></a>rt_mb_send_wait</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ipc.o(i.rt_mb_send_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_send_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>

<P><STRONG><a name="[2d4]"></a>rt_memcmp</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, kstring.o(i.rt_memcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_auto_change_default
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_netdev_internet_up_work
</UL>

<P><STRONG><a name="[22b]"></a>rt_memcpy</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, kstring.o(i.rt_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_realloc
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mq_send_wait
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mq_recv
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname_r
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto_ntp_server
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_ping
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_add
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_ioctlsocket
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rndis_eth_control
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_alloc_pipe
</UL>

<P><STRONG><a name="[417]"></a>rt_memmove</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, kstring.o(i.rt_memmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[2db]"></a>rt_memory_info</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, kservice.o(i.rt_memory_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = rt_memory_info &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_free
</UL>

<P><STRONG><a name="[202]"></a>rt_memset</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, kstring.o(i.rt_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserv
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_usbh_register
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime_r
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdszero
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_vnode_init
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_init
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto_ntp_server
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_ping
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_ping
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_write10
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_test_unit_ready
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_request_sense
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_read10
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_inquiry
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_get_capacity
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_enable
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_alloc_pipe
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_detach_instance
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_alloc_instance
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_enable
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_netdev_internet_up_work
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_accept
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_rmc_sample_entry
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_next_chunk
</UL>

<P><STRONG><a name="[558]"></a>rt_mq_create</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, ipc.o(i.rt_mq_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = rt_mq_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_init
</UL>

<P><STRONG><a name="[559]"></a>rt_mq_recv</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, ipc.o(i.rt_mq_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = rt_mq_recv &rArr; _rt_mq_recv &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mq_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_thread_entry
</UL>

<P><STRONG><a name="[55a]"></a>rt_mq_send</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ipc.o(i.rt_mq_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = rt_mq_send &rArr; rt_mq_send_wait &rArr; _rt_mq_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_event_signal
</UL>

<P><STRONG><a name="[55b]"></a>rt_mq_send_wait</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, ipc.o(i.rt_mq_send_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = rt_mq_send_wait &rArr; _rt_mq_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mq_send_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
</UL>

<P><STRONG><a name="[406]"></a>rt_mutex_create</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ipc.o(i.rt_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_rndis_eth_device_init
</UL>

<P><STRONG><a name="[407]"></a>rt_mutex_delete</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, ipc.o(i.rt_mutex_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = rt_mutex_delete &rArr; rt_object_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_before_delete_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
</UL>

<P><STRONG><a name="[24f]"></a>rt_mutex_drop_thread</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, ipc.o(i.rt_mutex_drop_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = rt_mutex_drop_thread &rArr; rt_spin_unlock &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_get_curr_prio
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_get_mutex_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach_from_mutex
</UL>

<P><STRONG><a name="[341]"></a>rt_mutex_init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ipc.o(i.rt_mutex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = rt_mutex_init &rArr; rt_object_init &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_vnode_mgr_init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init_generic
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_init
</UL>

<P><STRONG><a name="[1f8]"></a>rt_mutex_release</STRONG> (Thumb, 382 bytes, Stack size 32 bytes, ipc.o(i.rt_mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = rt_mutex_release &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_ready
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_is_suspended
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_get_curr_prio
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_and_update_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlock
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fm_unlock
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach_from_mutex
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rndis_msg_data_send
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_unlock
</UL>

<P><STRONG><a name="[1f5]"></a>rt_mutex_take</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ipc.o(i.rt_mutex_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_lock
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fm_lock
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rndis_msg_data_send
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_lock
</UL>

<P><STRONG><a name="[554]"></a>rt_object_allocate</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, object.o(i.rt_object_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
</UL>

<P><STRONG><a name="[53c]"></a>rt_object_delete</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, object.o(i.rt_object_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = rt_object_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
</UL>

<P><STRONG><a name="[53b]"></a>rt_object_detach</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, object.o(i.rt_object_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = rt_object_detach &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
</UL>

<P><STRONG><a name="[53d]"></a>rt_object_find</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, object.o(i.rt_object_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = rt_object_find &rArr; rt_object_for_each &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_for_each
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
</UL>

<P><STRONG><a name="[55f]"></a>rt_object_for_each</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, object.o(i.rt_object_for_each))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = rt_object_for_each &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>
<BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
</UL>

<P><STRONG><a name="[317]"></a>rt_object_get_information</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, object.o(i.rt_object_get_information))
<BR><BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_for_each
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[21f]"></a>rt_object_get_type</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, object.o(i.rt_object_get_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach_from_mutex
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_realloc
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_free
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_alloc
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_backtrace
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mq_send_wait
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mq_recv
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_send_wait
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_recv
</UL>

<P><STRONG><a name="[53f]"></a>rt_object_init</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, object.o(i.rt_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = rt_object_init &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_init
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
</UL>

<P><STRONG><a name="[53a]"></a>rt_object_is_systemobject</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, object.o(i.rt_object_is_systemobject))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_realloc
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_free
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_alloc
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
</UL>

<P><STRONG><a name="[213]"></a>rt_pin_get</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, dev_pin.o(i.rt_pin_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_pin_get &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_print_usage
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_conv
</UL>

<P><STRONG><a name="[215]"></a>rt_pin_mode</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, dev_pin.o(i.rt_pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_pin_mode &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_mode
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[216]"></a>rt_pin_read</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dev_pin.o(i.rt_pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_pin_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_read
</UL>

<P><STRONG><a name="[217]"></a>rt_pin_write</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, dev_pin.o(i.rt_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_write
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[404]"></a>rt_realloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, kservice.o(i.rt_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = rt_realloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_realloc
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_slot_expand
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_alloc
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_response
</UL>

<P><STRONG><a name="[d3]"></a>rt_rndis_eth_rx</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, rndis_dev.o(i.rt_rndis_eth_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = rt_rndis_eth_rx &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rndis_dev.o(i.usbh_rndis_eth_device_init)
</UL>
<P><STRONG><a name="[d4]"></a>rt_rndis_eth_tx</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, rndis_dev.o(i.rt_rndis_eth_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = rt_rndis_eth_tx &rArr; rt_rndis_msg_data_send &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_data_print
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rndis_msg_data_send
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rndis_dev.o(i.usbh_rndis_eth_device_init)
</UL>
<P><STRONG><a name="[259]"></a>rt_sched_insert_thread</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, scheduler_up.o(i.rt_sched_insert_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_sched_insert_thread &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_ready
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_change_priority
</UL>

<P><STRONG><a name="[207]"></a>rt_sched_lock</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, scheduler_up.o(i.rt_sched_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_sched_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_dequeue
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_print
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_tick_increase
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_close
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_before_delete_detach
</UL>

<P><STRONG><a name="[563]"></a>rt_sched_remove_thread</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, scheduler_up.o(i.rt_sched_remove_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_sched_remove_thread &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_close
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_change_priority
</UL>

<P><STRONG><a name="[57c]"></a>rt_sched_thread_bind_cpu</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, scheduler_up.o(i.rt_sched_thread_bind_cpu))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[1f1]"></a>rt_sched_thread_change_priority</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, scheduler_comm.o(i.rt_sched_thread_change_priority))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rt_sched_thread_change_priority &rArr; rt_sched_remove_thread &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_remove_thread
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_insert_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_and_update_prio
</UL>

<P><STRONG><a name="[57a]"></a>rt_sched_thread_close</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scheduler_comm.o(i.rt_sched_thread_close))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_close
</UL>

<P><STRONG><a name="[1ef]"></a>rt_sched_thread_get_curr_prio</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, scheduler_comm.o(i.rt_sched_thread_get_curr_prio))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_enqueue
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_and_update_prio
</UL>

<P><STRONG><a name="[250]"></a>rt_sched_thread_get_init_prio</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, scheduler_comm.o(i.rt_sched_thread_get_init_prio))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_get_mutex_priority
</UL>

<P><STRONG><a name="[578]"></a>rt_sched_thread_get_stat</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scheduler_comm.o(i.rt_sched_thread_get_stat))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_close
</UL>

<P><STRONG><a name="[252]"></a>rt_sched_thread_init_ctx</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, scheduler_comm.o(i.rt_sched_thread_init_ctx))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rt_sched_thread_init_ctx &rArr; rt_sched_thread_init_priv &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_init_priv
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
</UL>

<P><STRONG><a name="[564]"></a>rt_sched_thread_init_priv</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, scheduler_up.o(i.rt_sched_thread_init_priv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_sched_thread_init_priv &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_init_ctx
</UL>

<P><STRONG><a name="[258]"></a>rt_sched_thread_is_suspended</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scheduler_comm.o(i.rt_sched_thread_is_suspended))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_ready
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
</UL>

<P><STRONG><a name="[55c]"></a>rt_sched_thread_ready</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, scheduler_comm.o(i.rt_sched_thread_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_insert_thread
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_timer_stop
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_is_suspended
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_dequeue
</UL>

<P><STRONG><a name="[580]"></a>rt_sched_thread_startup</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, scheduler_up.o(i.rt_sched_thread_startup))
<BR><BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
</UL>

<P><STRONG><a name="[583]"></a>rt_sched_thread_timer_start</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scheduler_comm.o(i.rt_sched_thread_timer_start))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
</UL>

<P><STRONG><a name="[566]"></a>rt_sched_thread_timer_stop</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, scheduler_comm.o(i.rt_sched_thread_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_ready
</UL>

<P><STRONG><a name="[569]"></a>rt_sched_thread_yield</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, scheduler_comm.o(i.rt_sched_thread_yield))
<BR><BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_tick_increase
</UL>

<P><STRONG><a name="[568]"></a>rt_sched_tick_increase</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, scheduler_comm.o(i.rt_sched_tick_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = rt_sched_tick_increase &rArr; rt_sched_unlock_n_resched &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_yield
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock_n_resched
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[20a]"></a>rt_sched_unlock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, scheduler_up.o(i.rt_sched_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_sched_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_dequeue
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_print
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_tick_increase
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_close
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_before_delete_detach
</UL>

<P><STRONG><a name="[209]"></a>rt_sched_unlock_n_resched</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, scheduler_up.o(i.rt_sched_unlock_n_resched))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = rt_sched_unlock_n_resched &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_tick_increase
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_before_delete_detach
</UL>

<P><STRONG><a name="[226]"></a>rt_schedule</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, scheduler_up.o(i.rt_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cpu_self
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduler_get_highest_priority_thread
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_remove_thread
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_insert_thread
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_scheduler_stack_check
</UL>
<BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait_flags
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_wait_timeout
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock_n_resched
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mq_send_wait
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mq_recv
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_send_wait
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_recv
</UL>

<P><STRONG><a name="[56b]"></a>rt_scheduler_stack_check</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, scheduler_comm.o(i.rt_scheduler_stack_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[3b0]"></a>rt_sem_control</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, ipc.o(i.rt_sem_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = rt_sem_control &rArr; rt_susp_list_resume_all &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_resume_all
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pipe_xfer
</UL>

<P><STRONG><a name="[29e]"></a>rt_sem_create</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sem_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_hcd_init
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
</UL>

<P><STRONG><a name="[56e]"></a>rt_sem_delete</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, ipc.o(i.rt_sem_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_resume_all
</UL>
<BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_stop
</UL>

<P><STRONG><a name="[4c2]"></a>rt_sem_detach</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ipc.o(i.rt_sem_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = rt_sem_detach &rArr; rt_susp_list_resume_all &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_resume_all
</UL>
<BR>[Called By]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
</UL>

<P><STRONG><a name="[414]"></a>rt_sem_init</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = rt_sem_init &rArr; rt_object_init &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sem_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_rmc_sample_entry_init
</UL>

<P><STRONG><a name="[270]"></a>rt_sem_release</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, ipc.o(i.rt_sem_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = rt_sem_release &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_dequeue
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_notify_urbchange_callback
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_rx_ind
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_input
</UL>

<P><STRONG><a name="[3b3]"></a>rt_sem_take</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ipc.o(i.rt_sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = rt_sem_take &rArr; _rt_sem_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_trytake
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pipe_xfer
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_rmc_sample_entry
</UL>

<P><STRONG><a name="[26f]"></a>rt_sem_trytake</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ipc.o(i.rt_sem_trytake))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = rt_sem_trytake &rArr; rt_sem_take &rArr; _rt_sem_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
</UL>

<P><STRONG><a name="[237]"></a>rt_set_errno</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, kerrno.o(i.rt_set_errno))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rmdir
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timegm
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime_r
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_wait_timeout
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstat
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_statfs
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rndis_eth_write
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rndis_eth_read
</UL>

<P><STRONG><a name="[56f]"></a>rt_show_version</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, kservice.o(i.rt_show_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[552]"></a>rt_smem_alloc</STRONG> (Thumb, 424 bytes, Stack size 32 bytes, mem.o(i.rt_smem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_realloc
</UL>

<P><STRONG><a name="[542]"></a>rt_smem_free</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, mem.o(i.rt_smem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rt_smem_free &rArr; plug_holes &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_realloc
</UL>

<P><STRONG><a name="[570]"></a>rt_smem_init</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, mem.o(i.rt_smem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = rt_smem_init &rArr; rt_object_init &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init_generic
</UL>

<P><STRONG><a name="[560]"></a>rt_smem_realloc</STRONG> (Thumb, 336 bytes, Stack size 48 bytes, mem.o(i.rt_smem_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = rt_smem_realloc &rArr; rt_smem_free &rArr; plug_holes &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_free
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
</UL>

<P><STRONG><a name="[2d3]"></a>rt_snprintf</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, kstdio.o(i.rt_snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = rt_snprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_statfs
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_netdev_internet_up_work
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
</UL>

<P><STRONG><a name="[205]"></a>rt_spin_lock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cpu_up.o(i.rt_spin_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_spin_lock &rArr; rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_before_delete_detach
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_first_by_flags
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_ipaddr
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_family
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_register
</UL>

<P><STRONG><a name="[234]"></a>rt_spin_lock_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpu_up.o(i.rt_spin_lock_init))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_init
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sem_object_init
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_init
</UL>

<P><STRONG><a name="[1eb]"></a>rt_spin_lock_irqsave</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpu_up.o(i.rt_spin_lock_irqsave))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_spin_lock_irqsave &rArr; rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wakeup_by_errno
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait_flags
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peek
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_deinit
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_resume_all_irq
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_len
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_remove
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_add
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_wait_timeout
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wqueue_pollwake
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_enqueue
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_dequeue
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_check
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach_from_mutex
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_for_each
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mq_send_wait
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mq_recv
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_send_wait
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_recv
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_linkchange
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_poll
</UL>

<P><STRONG><a name="[20b]"></a>rt_spin_unlock</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpu_up.o(i.rt_spin_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = rt_spin_unlock &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical_safe
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_before_delete_detach
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_first_by_flags
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_ipaddr
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_family
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_register
</UL>

<P><STRONG><a name="[1ec]"></a>rt_spin_unlock_irqrestore</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, cpu_up.o(i.rt_spin_unlock_irqrestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical_safe
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wakeup_by_errno
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait_flags
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peek
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_deinit
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_resume_all_irq
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_len
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_remove
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_add
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_wait_timeout
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wqueue_pollwake
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_enqueue
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_dequeue
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_check
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach_from_mutex
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_for_each
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mq_send_wait
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mq_recv
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_send_wait
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_recv
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_linkchange
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_poll
</UL>

<P><STRONG><a name="[29d]"></a>rt_sprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, kstdio.o(i.rt_sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = rt_sprintf &rArr; rt_vsprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_hcd_init
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
</UL>

<P><STRONG><a name="[20d]"></a>rt_strcmp</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, kstring.o(i.rt_strcmp))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_test
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_write
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_mode
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tail
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_vnode_find
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rndis_frame_debug
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post_test
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_test
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_next_chunk
</UL>

<P><STRONG><a name="[5c0]"></a>rt_strcpy</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, kstring.o(i.rt_strcpy))
<BR><BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_ioctlsocket
</UL>

<P><STRONG><a name="[33a]"></a>rt_strdup</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, kstring.o(i.rt_strdup))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post_test
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_test
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
</UL>

<P><STRONG><a name="[477]"></a>rt_strerror</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, kerrno.o(i.rt_strerror))
<BR><BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>

<P><STRONG><a name="[2ad]"></a>rt_strlen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, kstring.o(i.rt_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_get
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_register
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_request_header_add
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_request
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post_smpl
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_smpl
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_header_fields_get
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
</UL>

<P><STRONG><a name="[1ff]"></a>rt_strncmp</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, kstring.o(i.rt_strncmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_match_name
</UL>

<P><STRONG><a name="[2cb]"></a>rt_strncpy</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, kstring.o(i.rt_strncpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_getdents
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_register
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_add
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
</UL>

<P><STRONG><a name="[44a]"></a>rt_strstr</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, kstring.o(i.rt_strstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_strstr &rArr; rt_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_request
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_rmc_sample_entry
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_header_fields_get
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
</UL>

<P><STRONG><a name="[228]"></a>rt_susp_list_dequeue</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ipc.o(i.rt_susp_list_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_ready
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_resume_all_irq
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_resume_all
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mq_send_wait
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mq_recv
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_send_wait
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_recv
</UL>

<P><STRONG><a name="[25a]"></a>rt_susp_list_enqueue</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, ipc.o(i.rt_susp_list_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rt_susp_list_enqueue &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_get_curr_prio
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
</UL>

<P><STRONG><a name="[474]"></a>rt_susp_list_print</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ipc.o(i.rt_susp_list_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = rt_susp_list_print &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[206]"></a>rt_susp_list_resume_all</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ipc.o(i.rt_susp_list_resume_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = rt_susp_list_resume_all &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_before_delete_detach
</UL>

<P><STRONG><a name="[538]"></a>rt_susp_list_resume_all_irq</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ipc.o(i.rt_susp_list_resume_all_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = rt_susp_list_resume_all_irq &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
</UL>

<P><STRONG><a name="[547]"></a>rt_system_heap_init</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, kservice.o(i.rt_system_heap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = rt_system_heap_init &rArr; rt_system_heap_init_generic &rArr; rt_smem_init &rArr; rt_object_init &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init_generic
</UL>
<BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[573]"></a>rt_system_heap_init_generic</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, kservice.o(i.rt_system_heap_init_generic))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = rt_system_heap_init_generic &rArr; rt_smem_init &rArr; rt_object_init &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
</UL>

<P><STRONG><a name="[574]"></a>rt_system_scheduler_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, scheduler_up.o(i.rt_system_scheduler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_scheduler_init
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[575]"></a>rt_system_scheduler_start</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, scheduler_up.o(i.rt_system_scheduler_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rt_system_scheduler_start &rArr; rt_sched_remove_thread &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cpu_self
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduler_get_highest_priority_thread
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[577]"></a>rt_system_timer_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, timer.o(i.rt_system_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_init
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[5ba]"></a>rt_system_timer_thread_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer.o(i.rt_system_timer_thread_init))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[24b]"></a>rt_thread_close</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, thread.o(i.rt_thread_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = rt_thread_close &rArr; rt_timer_detach &rArr; rt_object_detach &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_critical_level
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_remove_thread
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_get_stat
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_close
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach
</UL>

<P><STRONG><a name="[1ea]"></a>rt_thread_control</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, thread.o(i.rt_thread_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; _thread_detach_from_mutex &rArr; rt_mutex_release &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_bind_cpu
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_change_priority
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_libc_exit
</UL>

<P><STRONG><a name="[413]"></a>rt_thread_create</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, thread.o(i.rt_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_test
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_rmc_sample_entry_init
</UL>

<P><STRONG><a name="[539]"></a>rt_thread_defunct_dequeue</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, defunct.o(i.rt_thread_defunct_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = rt_thread_defunct_dequeue &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
</UL>

<P><STRONG><a name="[24d]"></a>rt_thread_defunct_enqueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, defunct.o(i.rt_thread_defunct_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = rt_thread_defunct_enqueue &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach
</UL>

<P><STRONG><a name="[57d]"></a>rt_thread_defunct_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, defunct.o(i.rt_thread_defunct_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_thread_defunct_init
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[21a]"></a>rt_thread_delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, thread.o(i.rt_thread_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = rt_thread_delay &rArr; _thread_sleep &rArr; rt_thread_suspend_with_flag &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_ping
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pipe_check
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_reset_port
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_port_debounce
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_enable
</UL>

<P><STRONG><a name="[44b]"></a>rt_thread_delete</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, thread.o(i.rt_thread_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = rt_thread_delete &rArr; _thread_detach &rArr; _thread_detach_from_mutex &rArr; rt_mutex_release &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_rmc_sample_entry_init
</UL>

<P><STRONG><a name="[57b]"></a>rt_thread_detach</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, thread.o(i.rt_thread_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = rt_thread_detach &rArr; _thread_detach &rArr; _thread_detach_from_mutex &rArr; rt_mutex_release &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[3bf]"></a>rt_thread_find</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, thread.o(i.rt_thread_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = rt_thread_find &rArr; rt_object_find &rArr; rt_object_for_each &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
</UL>

<P><STRONG><a name="[57e]"></a>rt_thread_idle_init</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, idle.o(i.rt_thread_idle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = rt_thread_idle_init &rArr; rt_thread_init &rArr; _thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_init
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cpu_index
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[3cc]"></a>rt_thread_init</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, thread.o(i.rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = rt_thread_init &rArr; _thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_system_device_init_private
</UL>

<P><STRONG><a name="[4ca]"></a>rt_thread_mdelay</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, thread.o(i.rt_thread_mdelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = rt_thread_mdelay &rArr; _thread_sleep &rArr; rt_thread_suspend_with_flag &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserv
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_reset_port
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_core_init
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
</UL>

<P><STRONG><a name="[52f]"></a>rt_thread_resume</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, thread.o(i.rt_thread_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = rt_thread_resume &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock_n_resched
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_ready
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wakeup_by_errno
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
</UL>

<P><STRONG><a name="[1e8]"></a>rt_thread_self</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, thread.o(i.rt_thread_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cpu_self
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait_flags
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_errno
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_table_init
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_tick_increase
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_libc_exit
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_close
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_insert_thread
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_backtrace
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock_n_resched
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mq_send_wait
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mq_recv
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_send_wait
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_recv
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_class_driver_find
</UL>

<P><STRONG><a name="[3cd]"></a>rt_thread_startup</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, thread.o(i.rt_thread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = rt_thread_startup &rArr; rt_thread_resume &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_test
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_system_device_init_private
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_rmc_sample_entry_init
</UL>

<P><STRONG><a name="[222]"></a>rt_thread_suspend_to_list</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, thread.o(i.rt_thread_suspend_to_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_set_suspend_state
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_remove_thread
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_timer_stop
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_get_stat
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_with_flag
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mq_send_wait
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mq_recv
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_send_wait
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_recv
</UL>

<P><STRONG><a name="[257]"></a>rt_thread_suspend_with_flag</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, thread.o(i.rt_thread_suspend_with_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = rt_thread_suspend_with_flag &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
</UL>
<BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait_flags
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_wait_timeout
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
</UL>

<P><STRONG><a name="[3b2]"></a>rt_tick_from_millisecond</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clock.o(i.rt_tick_from_millisecond))
<BR><BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pipe_xfer
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_wait_timeout
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync_work_func
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_auto_sync_init
</UL>

<P><STRONG><a name="[223]"></a>rt_tick_get</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, clock.o(i.rt_tick_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_tick_get
</UL>
<BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_atomic_load
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_disconnect_callback
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_connect_callback
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get_millisecond
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_start
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_check
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mq_send_wait
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mq_recv
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_send_wait
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_recv
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_ping
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_ping
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_data_print
</UL>

<P><STRONG><a name="[581]"></a>rt_tick_get_millisecond</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, clock.o(i.rt_tick_get_millisecond))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_tick_get_millisecond &rArr; rt_tick_get
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
</UL>

<P><STRONG><a name="[1d9]"></a>rt_tick_increase</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, clock.o(i.rt_tick_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = rt_tick_increase &rArr; rt_timer_check &rArr; _timer_check &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_atomic_add
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_tick_increase
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[582]"></a>rt_timer_check</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, timer.o(i.rt_timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = rt_timer_check &rArr; _timer_check &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[224]"></a>rt_timer_control</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, timer.o(i.rt_timer_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = rt_timer_control &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait_flags
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_wait_timeout
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mq_send_wait
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mq_recv
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_send_wait
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_recv
</UL>

<P><STRONG><a name="[579]"></a>rt_timer_detach</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, timer.o(i.rt_timer_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = rt_timer_detach &rArr; rt_object_detach &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_close
</UL>

<P><STRONG><a name="[254]"></a>rt_timer_init</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, timer.o(i.rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = rt_timer_init &rArr; rt_object_init &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
</UL>

<P><STRONG><a name="[225]"></a>rt_timer_start</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, timer.o(i.rt_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = rt_timer_start &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_start
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_timer_start
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait_flags
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_wait_timeout
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mq_send_wait
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mq_recv
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_send_wait
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_recv
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rndis_msg_data_send
</UL>

<P><STRONG><a name="[567]"></a>rt_timer_stop</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, timer.o(i.rt_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_timer_stop
</UL>

<P><STRONG><a name="[43f]"></a>rt_tz_is_dst</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctime.o(i.rt_tz_is_dst))
<BR><BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime_r
</UL>

<P><STRONG><a name="[585]"></a>rt_udisk_run</STRONG> (Thumb, 946 bytes, Stack size 176 bytes, udisk.o(i.rt_udisk_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = rt_udisk_run &rArr; dfs_mount &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_partition
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udisk_get_id
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_test_unit_ready
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_reset
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_request_sense
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_read10
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_inquiry
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_get_max_lun
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_get_capacity
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_clear_feature
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_enable
</UL>

<P><STRONG><a name="[58d]"></a>rt_udisk_stop</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, udisk.o(i.rt_udisk_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = rt_udisk_stop &rArr; dfs_unmount &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udisk_free_id
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_disable
</UL>

<P><STRONG><a name="[21b]"></a>rt_usb_hcd_pipe_xfer</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, usbhost_core.o(i.rt_usb_hcd_pipe_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = rt_usb_hcd_pipe_xfer &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_rndis_bulk_send
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_reset
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_get_max_lun
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_bulk_only_xfer
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pipe_check
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_set_configure
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_set_address
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_get_descriptor
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_get_port_status
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_get_descriptor
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_irq
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_enable
</UL>

<P><STRONG><a name="[2b5]"></a>rt_usb_host_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbhost.o(i.rt_usb_host_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = rt_usb_host_init &rArr; rt_usbh_hub_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_class_driver_register
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_class_driver_init
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_class_driver_storage
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_init
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_class_driver_hub
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_usbh_register
</UL>

<P><STRONG><a name="[599]"></a>rt_usbh_alloc_instance</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, usbhost_core.o(i.rt_usbh_alloc_instance))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = rt_usbh_alloc_instance &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_port_change
</UL>

<P><STRONG><a name="[59a]"></a>rt_usbh_attatch_instance</STRONG> (Thumb, 730 bytes, Stack size 2104 bytes, usbhost_core.o(i.rt_usbh_attatch_instance))
<BR><BR>[Stack]<UL><LI>Max Depth = 3144<LI>Call Chain = rt_usbh_attatch_instance &rArr; rt_usb_hcd_alloc_pipe &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_class_driver_find
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_class_driver_enable
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_set_configure
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_set_address
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_get_interface_descriptor
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_get_descriptor
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_instance_add_pipe
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_free_pipe
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_alloc_pipe
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_get_endpoint_descriptor
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_reset_port
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_clear_port_feature
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_port_change
</UL>

<P><STRONG><a name="[5a4]"></a>rt_usbh_class_driver_disable</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, driver.o(i.rt_usbh_class_driver_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_usbh_class_driver_disable &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_detach_instance
</UL>

<P><STRONG><a name="[5a3]"></a>rt_usbh_class_driver_enable</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, driver.o(i.rt_usbh_class_driver_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_usbh_class_driver_enable &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
</UL>

<P><STRONG><a name="[5a2]"></a>rt_usbh_class_driver_find</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, driver.o(i.rt_usbh_class_driver_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = rt_usbh_class_driver_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_class_driver_register
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
</UL>

<P><STRONG><a name="[597]"></a>rt_usbh_class_driver_hub</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hub.o(i.rt_usbh_class_driver_hub))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_host_init
</UL>

<P><STRONG><a name="[594]"></a>rt_usbh_class_driver_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, driver.o(i.rt_usbh_class_driver_init))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_host_init
</UL>

<P><STRONG><a name="[596]"></a>rt_usbh_class_driver_register</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, driver.o(i.rt_usbh_class_driver_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = rt_usbh_class_driver_register &rArr; rt_usbh_class_driver_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_class_driver_find
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_host_init
</UL>

<P><STRONG><a name="[595]"></a>rt_usbh_class_driver_storage</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mass.o(i.rt_usbh_class_driver_storage))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_host_init
</UL>

<P><STRONG><a name="[219]"></a>rt_usbh_clear_feature</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, usbhost_core.o(i.rt_usbh_clear_feature))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rt_usbh_clear_feature &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_setup_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pipe_check
</UL>

<P><STRONG><a name="[5a6]"></a>rt_usbh_detach_instance</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, usbhost_core.o(i.rt_usbh_detach_instance))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = rt_usbh_detach_instance &rArr; rt_usb_hcd_free_pipe &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_class_driver_disable
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_free_pipe
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_port_change
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_disable
</UL>

<P><STRONG><a name="[5a7]"></a>rt_usbh_event_signal</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, hub.o(i.rt_usbh_event_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = rt_usbh_event_signal &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; _rt_mq_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
</UL>
<BR>[Called By]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_root_hub_disconnect_handler
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_root_hub_connect_handler
</UL>

<P><STRONG><a name="[59b]"></a>rt_usbh_get_descriptor</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, usbhost_core.o(i.rt_usbh_get_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = rt_usbh_get_descriptor &rArr; rt_usb_hcd_pipe_xfer &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_setup_xfer
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_pipe_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
</UL>

<P><STRONG><a name="[5a1]"></a>rt_usbh_get_endpoint_descriptor</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, usbhost_core.o(i.rt_usbh_get_endpoint_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = rt_usbh_get_endpoint_descriptor &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_enable
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_enable
</UL>

<P><STRONG><a name="[5a0]"></a>rt_usbh_get_interface_descriptor</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, usbhost_core.o(i.rt_usbh_get_interface_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = rt_usbh_get_interface_descriptor &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
</UL>

<P><STRONG><a name="[59d]"></a>rt_usbh_hub_clear_port_feature</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, hub.o(i.rt_usbh_hub_clear_port_feature))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rt_usbh_hub_clear_port_feature &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_setup_xfer
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;root_hub_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_reset_port
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_port_change
</UL>

<P><STRONG><a name="[5aa]"></a>rt_usbh_hub_get_descriptor</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, hub.o(i.rt_usbh_hub_get_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = rt_usbh_hub_get_descriptor &rArr; rt_usb_hcd_pipe_xfer &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_pipe_xfer
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_setup_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_enable
</UL>

<P><STRONG><a name="[5ac]"></a>rt_usbh_hub_get_port_status</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, hub.o(i.rt_usbh_hub_get_port_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = rt_usbh_hub_get_port_status &rArr; rt_usb_hcd_pipe_xfer &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_pipe_xfer
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_setup_xfer
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;root_hub_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_reset_port
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_port_debounce
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_port_change
</UL>

<P><STRONG><a name="[593]"></a>rt_usbh_hub_init</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, hub.o(i.rt_usbh_hub_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = rt_usbh_hub_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_host_init
</UL>

<P><STRONG><a name="[5ae]"></a>rt_usbh_hub_port_debounce</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, hub.o(i.rt_usbh_hub_port_debounce))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = rt_usbh_hub_port_debounce &rArr; rt_thread_delay &rArr; _thread_sleep &rArr; rt_thread_suspend_with_flag &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_get_port_status
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_port_change
</UL>

<P><STRONG><a name="[59c]"></a>rt_usbh_hub_reset_port</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, hub.o(i.rt_usbh_hub_reset_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = rt_usbh_hub_reset_port &rArr; rt_thread_delay &rArr; _thread_sleep &rArr; rt_thread_suspend_with_flag &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_set_port_feature
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_get_port_status
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_clear_port_feature
</UL>
<BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_port_change
</UL>

<P><STRONG><a name="[5ab]"></a>rt_usbh_hub_set_port_feature</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, hub.o(i.rt_usbh_hub_set_port_feature))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rt_usbh_hub_set_port_feature &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_setup_xfer
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;root_hub_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_reset_port
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_enable
</UL>

<P><STRONG><a name="[562]"></a>rt_usbh_rndis_bulk_send</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, usbh_rndis.o(i.rt_usbh_rndis_bulk_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = rt_usbh_rndis_bulk_send &rArr; rt_usb_hcd_pipe_xfer &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_pipe_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rndis_msg_data_send
</UL>

<P><STRONG><a name="[5af]"></a>rt_usbh_root_hub_connect_handler</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, hub.o(i.rt_usbh_root_hub_connect_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = rt_usbh_root_hub_connect_handler &rArr; rt_usbh_event_signal &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; _rt_mq_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_event_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_connect_callback
</UL>

<P><STRONG><a name="[5b0]"></a>rt_usbh_root_hub_disconnect_handler</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, hub.o(i.rt_usbh_root_hub_disconnect_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = rt_usbh_root_hub_disconnect_handler &rArr; rt_usbh_event_signal &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; _rt_mq_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_event_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_disconnect_callback
</UL>

<P><STRONG><a name="[59e]"></a>rt_usbh_set_address</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, usbhost_core.o(i.rt_usbh_set_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = rt_usbh_set_address &rArr; rt_usb_hcd_pipe_xfer &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_setup_xfer
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_pipe_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
</UL>

<P><STRONG><a name="[59f]"></a>rt_usbh_set_configure</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, usbhost_core.o(i.rt_usbh_set_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = rt_usbh_set_configure &rArr; rt_usb_hcd_pipe_xfer &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_setup_xfer
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_pipe_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
</UL>

<P><STRONG><a name="[58b]"></a>rt_usbh_storage_get_capacity</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, mass.o(i.rt_usbh_storage_get_capacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = rt_usbh_storage_get_capacity &rArr; rt_usb_bulk_only_xfer &rArr; _pipe_check &rArr; rt_thread_delay &rArr; _thread_sleep &rArr; rt_thread_suspend_with_flag &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_bulk_only_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
</UL>

<P><STRONG><a name="[587]"></a>rt_usbh_storage_get_max_lun</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, mass.o(i.rt_usbh_storage_get_max_lun))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = rt_usbh_storage_get_max_lun &rArr; rt_usb_hcd_pipe_xfer &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_setup_xfer
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_pipe_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
</UL>

<P><STRONG><a name="[588]"></a>rt_usbh_storage_inquiry</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, mass.o(i.rt_usbh_storage_inquiry))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = rt_usbh_storage_inquiry &rArr; rt_usb_bulk_only_xfer &rArr; _pipe_check &rArr; rt_thread_delay &rArr; _thread_sleep &rArr; rt_thread_suspend_with_flag &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_bulk_only_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
</UL>

<P><STRONG><a name="[584]"></a>rt_usbh_storage_read10</STRONG> (Thumb, 160 bytes, Stack size 56 bytes, mass.o(i.rt_usbh_storage_read10))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = rt_usbh_storage_read10 &rArr; rt_usb_bulk_only_xfer &rArr; _pipe_check &rArr; rt_thread_delay &rArr; _thread_sleep &rArr; rt_thread_suspend_with_flag &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_bulk_only_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_read
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
</UL>

<P><STRONG><a name="[589]"></a>rt_usbh_storage_request_sense</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, mass.o(i.rt_usbh_storage_request_sense))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = rt_usbh_storage_request_sense &rArr; rt_usb_bulk_only_xfer &rArr; _pipe_check &rArr; rt_thread_delay &rArr; _thread_sleep &rArr; rt_thread_suspend_with_flag &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_bulk_only_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
</UL>

<P><STRONG><a name="[586]"></a>rt_usbh_storage_reset</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, mass.o(i.rt_usbh_storage_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = rt_usbh_storage_reset &rArr; rt_usb_hcd_pipe_xfer &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_setup_xfer
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_pipe_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
</UL>

<P><STRONG><a name="[58a]"></a>rt_usbh_storage_test_unit_ready</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, mass.o(i.rt_usbh_storage_test_unit_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = rt_usbh_storage_test_unit_ready &rArr; rt_usb_bulk_only_xfer &rArr; _pipe_check &rArr; rt_thread_delay &rArr; _thread_sleep &rArr; rt_thread_suspend_with_flag &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_bulk_only_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
</UL>

<P><STRONG><a name="[58f]"></a>rt_usbh_storage_write10</STRONG> (Thumb, 158 bytes, Stack size 56 bytes, mass.o(i.rt_usbh_storage_write10))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = rt_usbh_storage_write10 &rArr; rt_usb_bulk_only_xfer &rArr; _pipe_check &rArr; rt_thread_delay &rArr; _thread_sleep &rArr; rt_thread_suspend_with_flag &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_bulk_only_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_write
</UL>

<P><STRONG><a name="[551]"></a>rt_vsnprintf</STRONG> (Thumb, 104 bytes, Stack size 112 bytes, rt_vsnprintf_std.o(i.rt_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf_impl
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_request_header_add
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_header_fields_add
</UL>

<P><STRONG><a name="[571]"></a>rt_vsprintf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, kstdio.o(i.rt_vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = rt_vsprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
</UL>

<P><STRONG><a name="[506]"></a>rt_work_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, workqueue.o(i.rt_work_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_work_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_auto_sync_init
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_check_netdev_internet_up
</UL>

<P><STRONG><a name="[507]"></a>rt_work_submit</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, workqueue.o(i.rt_work_submit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = rt_work_submit &rArr; rt_workqueue_submit_work &rArr; _workqueue_submit_work &rArr; rt_completion_done &rArr; rt_completion_wakeup_by_errno &rArr; rt_thread_resume &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_submit_work
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync_work_func
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_auto_sync_init
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_check_netdev_internet_up
</UL>

<P><STRONG><a name="[5b6]"></a>rt_workqueue_create</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, workqueue.o(i.rt_workqueue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = rt_workqueue_create &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_init
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_work_sys_workqueue_init
</UL>

<P><STRONG><a name="[5b5]"></a>rt_workqueue_submit_work</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, workqueue.o(i.rt_workqueue_submit_work))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = rt_workqueue_submit_work &rArr; _workqueue_submit_work &rArr; rt_completion_done &rArr; rt_completion_wakeup_by_errno &rArr; rt_thread_resume &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
</UL>
<BR>[Called By]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_work_submit
</UL>

<P><STRONG><a name="[21d]"></a>rt_wqueue_add</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, waitqueue.o(i.rt_wqueue_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = rt_wqueue_add &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_poll_add
</UL>

<P><STRONG><a name="[51f]"></a>rt_wqueue_remove</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, waitqueue.o(i.rt_wqueue_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = rt_wqueue_remove &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_teardown
</UL>

<P><STRONG><a name="[3e2]"></a>rt_wqueue_wakeup</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, waitqueue.o(i.rt_wqueue_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = rt_wqueue_wakeup &rArr; rt_thread_resume &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
</UL>

<P><STRONG><a name="[1d1]"></a>rtthread_startup</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, components.o(i.rtthread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_init
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[273]"></a>sal_accept</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, sal_socket.o(i.sal_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = sal_accept &rArr; socket_new &rArr; socket_alloc &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_new
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_init
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
</UL>

<P><STRONG><a name="[2bc]"></a>sal_bind</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, sal_socket.o(i.sal_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = sal_bind &rArr; netdev_get_by_ipaddr &rArr; rt_spin_unlock &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_ipaddr
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_sockaddr_to_ipaddr
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
</UL>

<P><STRONG><a name="[4f9]"></a>sal_check_netdev_internet_up</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, sal_socket.o(i.sal_check_netdev_internet_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = sal_check_netdev_internet_up &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_work_submit
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_work_init
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_netmask
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_link_status
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_ipaddr
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_gw
</UL>

<P><STRONG><a name="[275]"></a>sal_closesocket</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sal_socket.o(i.sal_closesocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = sal_closesocket &rArr; socket_delete &rArr; socket_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_close
</UL>

<P><STRONG><a name="[2f7]"></a>sal_connect</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, sal_socket.o(i.sal_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sal_connect &rArr; sal_get_socket &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
</UL>

<P><STRONG><a name="[429]"></a>sal_freeaddrinfo</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, sal_socket.o(i.sal_freeaddrinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sal_freeaddrinfo &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeaddrinfo
</UL>

<P><STRONG><a name="[463]"></a>sal_get_socket</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sal_socket.o(i.sal_get_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sal_get_socket &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_sendto
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_recvfrom
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_poll
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_ioctlsocket
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_closesocket
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_poll
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_delete
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_socket
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_setsockopt
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_listen
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_connect
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_bind
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_accept
</UL>

<P><STRONG><a name="[43b]"></a>sal_getaddrinfo</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, sal_socket.o(i.sal_getaddrinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = sal_getaddrinfo &rArr; netdev_get_first_by_flags &rArr; rt_spin_unlock &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_first_by_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getaddrinfo
</UL>

<P><STRONG><a name="[43d]"></a>sal_gethostbyname</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, sal_socket.o(i.sal_gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = sal_gethostbyname &rArr; netdev_get_first_by_flags &rArr; rt_spin_unlock &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_first_by_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
</UL>

<P><STRONG><a name="[12e]"></a>sal_init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, sal_socket.o(i.sal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = sal_init &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sal_socket.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[342]"></a>sal_ioctlsocket</STRONG> (Thumb, 1288 bytes, Stack size 96 bytes, sal_socket.o(i.sal_ioctlsocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = sal_ioctlsocket &rArr; netdev_get_by_name &rArr; rt_spin_unlock &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_up
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_netmask
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_ipaddr
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_down
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcpy
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_sockaddr_to_ipaddr
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_ioctl
</UL>

<P><STRONG><a name="[47a]"></a>sal_listen</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, sal_socket.o(i.sal_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sal_listen &rArr; sal_get_socket &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
</UL>

<P><STRONG><a name="[4e6]"></a>sal_lwip_netdev_set_pf_info</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, af_inet_lwip.o(i.sal_lwip_netdev_set_pf_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sal_lwip_netdev_set_pf_info &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_add
</UL>

<P><STRONG><a name="[343]"></a>sal_poll</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, sal_socket.o(i.sal_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sal_poll &rArr; sal_get_socket &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_poll
</UL>

<P><STRONG><a name="[344]"></a>sal_recvfrom</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, sal_socket.o(i.sal_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sal_recvfrom &rArr; sal_get_socket &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_read
</UL>

<P><STRONG><a name="[345]"></a>sal_sendto</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, sal_socket.o(i.sal_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sal_sendto &rArr; sal_get_socket &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_write
</UL>

<P><STRONG><a name="[5c2]"></a>sal_setsockopt</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, sal_socket.o(i.sal_setsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sal_setsockopt &rArr; sal_get_socket &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
</UL>

<P><STRONG><a name="[5c3]"></a>sal_socket</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, sal_socket.o(i.sal_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = sal_socket &rArr; socket_new &rArr; socket_alloc &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_new
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_init
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
</UL>

<P><STRONG><a name="[2af]"></a>scfg_exint_line_config</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, at32f435_437_scfg.o(i.scfg_exint_line_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = scfg_exint_line_config
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_irq_enable
</UL>

<P><STRONG><a name="[5c5]"></a>select</STRONG> (Thumb, 574 bytes, Stack size 56 bytes, select.o(i.select))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = select &rArr; poll &rArr; poll_do &rArr; do_pollfd &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdszero
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserv
</UL>

<P><STRONG><a name="[5c6]"></a>send</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, net_sockets.o(i.send))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = send &rArr; dfs_net_getsocket &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_sendto
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserv
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send
</UL>

<P><STRONG><a name="[5c7]"></a>sendto</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, net_sockets.o(i.sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = sendto &rArr; dfs_net_getsocket &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_sendto
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
</UL>
<BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto_ntp_server
</UL>

<P><STRONG><a name="[5c8]"></a>setsockopt</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, net_sockets.o(i.setsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = setsockopt &rArr; dfs_net_getsocket &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_setsockopt
</UL>
<BR>[Called By]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
</UL>

<P><STRONG><a name="[50a]"></a>socket</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, net_sockets.o(i.socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = socket &rArr; sal_socket &rArr; socket_new &rArr; socket_alloc &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_release
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_vnode_init
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_get_fops
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserv
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
</UL>

<P><STRONG><a name="[2f0]"></a>stat</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dfs_posix.o(i.stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = stat &rArr; dfs_file_stat &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rm
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstat
</UL>

<P><STRONG><a name="[349]"></a>sys_arch_assert</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sys_arch.o(i.sys_arch_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_getaddr
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_closed
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element_underflow
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element_overflow
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool_fn
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_hostname
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ping_send
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
</UL>

<P><STRONG><a name="[4dc]"></a>sys_arch_mbox_fetch</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, sys_arch.o(i.sys_arch_mbox_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = sys_arch_mbox_fetch &rArr; rt_mb_recv_interruptible &rArr; _rt_mb_recv &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv_interruptible
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
</UL>

<P><STRONG><a name="[4e1]"></a>sys_arch_mbox_tryfetch</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sys_arch.o(i.sys_arch_mbox_tryfetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = sys_arch_mbox_tryfetch &rArr; rt_mb_recv &rArr; _rt_mb_recv &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>

<P><STRONG><a name="[287]"></a>sys_arch_protect</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_arch.o(i.sys_arch_protect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sys_arch_protect &rArr; rt_spin_lock_irqsave &rArr; rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_recv
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_getaddr
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_disconnect
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool_fn
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
</UL>

<P><STRONG><a name="[49b]"></a>sys_arch_sem_wait</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, sys_arch.o(i.sys_arch_sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = sys_arch_sem_wait &rArr; rt_sem_take &rArr; _rt_sem_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
</UL>

<P><STRONG><a name="[288]"></a>sys_arch_unprotect</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_arch.o(i.sys_arch_unprotect))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = sys_arch_unprotect &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_recv
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_getaddr
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_disconnect
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool_fn
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
</UL>

<P><STRONG><a name="[48e]"></a>sys_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_arch.o(i.sys_init))
<BR><BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[283]"></a>sys_mbox_free</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sys_arch.o(i.sys_mbox_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = sys_mbox_free &rArr; rt_mb_delete &rArr; rt_object_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[4a6]"></a>sys_mbox_new</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, sys_arch.o(i.sys_mbox_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = sys_mbox_new &rArr; rt_mb_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[5cc]"></a>sys_mbox_post</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sys_arch.o(i.sys_mbox_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = sys_mbox_post &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>

<P><STRONG><a name="[284]"></a>sys_mbox_set_invalid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(i.sys_mbox_set_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
</UL>

<P><STRONG><a name="[27b]"></a>sys_mbox_trypost</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sys_arch.o(i.sys_mbox_trypost))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
</UL>

<P><STRONG><a name="[27a]"></a>sys_mbox_valid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sys_arch.o(i.sys_mbox_valid))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
</UL>

<P><STRONG><a name="[489]"></a>sys_mutex_lock</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sys_arch.o(i.sys_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = sys_mutex_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
</UL>

<P><STRONG><a name="[5cd]"></a>sys_mutex_new</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, sys_arch.o(i.sys_mutex_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = sys_mutex_new &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[48b]"></a>sys_mutex_unlock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(i.sys_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = sys_mutex_unlock &rArr; rt_mutex_release &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
</UL>

<P><STRONG><a name="[49f]"></a>sys_now</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sys_arch.o(i.sys_now))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sys_now &rArr; rt_tick_get_millisecond &rArr; rt_tick_get
</UL>
<BR>[Calls]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get_millisecond
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_sleeptime
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
</UL>

<P><STRONG><a name="[4e2]"></a>sys_sem_free</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sys_arch.o(i.sys_sem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = sys_sem_free &rArr; rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
</UL>

<P><STRONG><a name="[4dd]"></a>sys_sem_new</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, sys_arch.o(i.sys_sem_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
</UL>

<P><STRONG><a name="[4e3]"></a>sys_sem_set_invalid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(i.sys_sem_set_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>

<P><STRONG><a name="[3bc]"></a>sys_sem_signal</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(i.sys_sem_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = sys_sem_signal &rArr; rt_sem_release &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_dns_found
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_gethostbyname
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
</UL>

<P><STRONG><a name="[3bb]"></a>sys_sem_valid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sys_arch.o(i.sys_sem_valid))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[5ce]"></a>sys_thread_new</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, sys_arch.o(i.sys_thread_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = sys_thread_new &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[30f]"></a>sys_timeout</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, timeouts.o(i.sys_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = sys_timeout &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyclic_timer
</UL>

<P><STRONG><a name="[495]"></a>sys_timeouts_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timeouts.o(i.sys_timeouts_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = sys_timeouts_init &rArr; sys_timeout &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[5cf]"></a>sys_timeouts_mbox_fetch</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, timeouts.o(i.sys_timeouts_mbox_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = sys_timeouts_mbox_fetch &rArr; sys_arch_mbox_fetch &rArr; rt_mb_recv_interruptible &rArr; _rt_mb_recv &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_sleeptime
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[544]"></a>system_clock_config</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, board.o(i.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = system_clock_config &rArr; system_core_clock_update &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_core_clock_update
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch_status_get
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_reset
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_pll_config
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_hext_stable_wait
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_flag_get
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clock_source_enable
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_auto_step_mode_enable
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_apb2_div_set
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_apb1_div_set
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_ahb_div_set
</UL>
<BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[5d9]"></a>system_core_clock_update</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, system_at32f435_437.o(i.system_core_clock_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = system_core_clock_update &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch_status_get
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[54b]"></a>systick_clock_source_config</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, at32f435_437_misc.o(i.systick_clock_source_config))
<BR><BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_systick_init
</UL>

<P><STRONG><a name="[5dc]"></a>tcp_abandon</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, tcp.o(i.tcp_abandon))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[4a0]"></a>tcp_abort</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tcp.o(i.tcp_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed_pcblist
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept_null
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[49c]"></a>tcp_accept</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tcp.o(i.tcp_accept))
<BR><BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
</UL>

<P><STRONG><a name="[5df]"></a>tcp_alloc</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, tcp.o(i.tcp_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_ip_type
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[27e]"></a>tcp_arg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.tcp_arg))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
</UL>

<P><STRONG><a name="[498]"></a>tcp_bind</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, tcp.o(i.tcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
</UL>

<P><STRONG><a name="[49d]"></a>tcp_close</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tcp.o(i.tcp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[4a2]"></a>tcp_connect</STRONG> (Thumb, 412 bytes, Stack size 56 bytes, tcp.o(i.tcp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = tcp_connect &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route_src
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
</UL>

<P><STRONG><a name="[476]"></a>tcp_debug_state_str</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tcp.o(i.tcp_debug_state_str))
<BR><BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
</UL>

<P><STRONG><a name="[5ec]"></a>tcp_eff_send_mss_impl</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, tcp.o(i.tcp_eff_send_mss_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tcp_eff_send_mss_impl &rArr; ip4_route_src &rArr; ip4_route &rArr; lwip_ip4_route_src
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route_src
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[5ed]"></a>tcp_enqueue_flags</STRONG> (Thumb, 404 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_enqueue_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = tcp_enqueue_flags &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[282]"></a>tcp_err</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tcp.o(i.tcp_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = tcp_err &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[5f1]"></a>tcp_fasttmr</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, tcp.o(i.tcp_fasttmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[493]"></a>tcp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tcp.o(i.tcp_init))
<BR><BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[467]"></a>tcp_input</STRONG> (Thumb, 1886 bytes, Stack size 48 bytes, tcp_in.o(i.tcp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input_delayed_close
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[5f8]"></a>tcp_keepalive</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_keepalive))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = tcp_keepalive &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route_src
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>
<BR>[Called By]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[4a5]"></a>tcp_listen_with_backlog_and_err</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, tcp.o(i.tcp_listen_with_backlog_and_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = tcp_listen_with_backlog_and_err &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
</UL>

<P><STRONG><a name="[502]"></a>tcp_netif_ip_addr_changed</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, tcp.o(i.tcp_netif_ip_addr_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed_pcblist
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[518]"></a>tcp_new_ip_type</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, tcp.o(i.tcp_new_ip_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = tcp_new_ip_type &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[5eb]"></a>tcp_next_iss</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tcp.o(i.tcp_next_iss))
<BR><BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[4ae]"></a>tcp_output</STRONG> (Thumb, 644 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route_src
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[5e6]"></a>tcp_pcb_purge</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, tcp.o(i.tcp_pcb_purge))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[5dd]"></a>tcp_pcb_remove</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, tcp.o(i.tcp_pcb_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input_delayed_close
</UL>

<P><STRONG><a name="[281]"></a>tcp_poll</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tcp.o(i.tcp_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = tcp_poll &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[5f2]"></a>tcp_process_refused_data</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, tcp.o(i.tcp_process_refused_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>
<BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[27f]"></a>tcp_recv</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tcp.o(i.tcp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = tcp_recv &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[c6]"></a>tcp_recv_null</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tcp.o(i.tcp_recv_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(i.tcp_alloc)
</UL>
<P><STRONG><a name="[4a8]"></a>tcp_recved</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, tcp.o(i.tcp_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_recv
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[603]"></a>tcp_rexmit</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_rexmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_rexmit
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[604]"></a>tcp_rexmit_fast</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_rexmit_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_rexmit_fast &rArr; tcp_rexmit
</UL>
<BR>[Calls]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[601]"></a>tcp_rexmit_rto</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_rexmit_rto))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[5de]"></a>tcp_rst</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, tcp_out.o(i.tcp_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = tcp_rst &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route_src
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[606]"></a>tcp_seg_copy</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tcp.o(i.tcp_seg_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = tcp_seg_copy &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[5ef]"></a>tcp_seg_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tcp.o(i.tcp_seg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
</UL>

<P><STRONG><a name="[511]"></a>tcp_segs_free</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tcp.o(i.tcp_segs_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
</UL>

<P><STRONG><a name="[5f5]"></a>tcp_send_empty_ack</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, tcp_out.o(i.tcp_send_empty_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route_src
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[5ea]"></a>tcp_send_fin</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_send_fin))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = tcp_send_fin &rArr; tcp_enqueue_flags &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
</UL>

<P><STRONG><a name="[280]"></a>tcp_sent</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tcp.o(i.tcp_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = tcp_sent &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[49e]"></a>tcp_shutdown</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, tcp.o(i.tcp_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[607]"></a>tcp_slowtmr</STRONG> (Thumb, 1400 bytes, Stack size 56 bytes, tcp.o(i.tcp_slowtmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[5e4]"></a>tcp_timer_needed</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timeouts.o(i.tcp_timer_needed))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[ff]"></a>tcp_tmr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tcp.o(i.tcp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[5e7]"></a>tcp_trigger_input_pcb_close</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tcp_in.o(i.tcp_trigger_input_pcb_close))
<BR><BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[605]"></a>tcp_update_rcv_ann_wnd</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, tcp.o(i.tcp_update_rcv_ann_wnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = tcp_update_rcv_ann_wnd &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[4ad]"></a>tcp_write</STRONG> (Thumb, 1846 bytes, Stack size 120 bytes, tcp_out.o(i.tcp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
</UL>

<P><STRONG><a name="[608]"></a>tcp_zero_window_probe</STRONG> (Thumb, 240 bytes, Stack size 56 bytes, tcp_out.o(i.tcp_zero_window_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = tcp_zero_window_probe &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route_src
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>
<BR>[Called By]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[505]"></a>tcpip_api_call</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tcpip.o(i.tcpip_api_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = tcpip_api_call &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_common
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_add
</UL>

<P><STRONG><a name="[4e4]"></a>tcpip_callback_with_block</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, tcpip.o(i.tcpip_callback_with_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
</UL>

<P><STRONG><a name="[4c1]"></a>tcpip_init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, tcpip.o(i.tcpip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152 + Unknown Stack Size
<LI>Call Chain = tcpip_init &rArr; sys_thread_new &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
</UL>

<P><STRONG><a name="[60a]"></a>tcpip_inpkt</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, tcpip.o(i.tcpip_inpkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = tcpip_inpkt &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
</UL>

<P><STRONG><a name="[86]"></a>tcpip_input</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tcpip.o(i.tcpip_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = tcpip_input &rArr; tcpip_inpkt &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.eth_device_init_with_flag)
</UL>
<P><STRONG><a name="[4df]"></a>tcpip_send_msg_wait_sem</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tcpip.o(i.tcpip_send_msg_wait_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>

<P><STRONG><a name="[433]"></a>time</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ctime.o(i.time))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = time &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>

<P><STRONG><a name="[32e]"></a>timegm</STRONG> (Thumb, 390 bytes, Stack size 24 bytes, ctime.o(i.timegm))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = timegm &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__isleap
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
</UL>

<P><STRONG><a name="[36b]"></a>udp_bind</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, udp.o(i.udp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = udp_bind &rArr; udp_new_port
</UL>
<BR>[Calls]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_random_port
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>

<P><STRONG><a name="[36c]"></a>udp_connect</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, udp.o(i.udp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = udp_connect &rArr; udp_bind &rArr; udp_new_port
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
</UL>

<P><STRONG><a name="[4a4]"></a>udp_disconnect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, udp.o(i.udp_disconnect))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_disconnect
</UL>

<P><STRONG><a name="[492]"></a>udp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, udp.o(i.udp_init))
<BR><BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[466]"></a>udp_input</STRONG> (Thumb, 370 bytes, Stack size 56 bytes, udp.o(i.udp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; icmp_send_response &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input_local_match
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[503]"></a>udp_netif_ip_addr_changed</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, udp.o(i.udp_netif_ip_addr_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_netif_ip_addr_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[36a]"></a>udp_new</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, udp.o(i.udp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = udp_new &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_ip_type
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
</UL>

<P><STRONG><a name="[391]"></a>udp_new_ip_type</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, udp.o(i.udp_new_ip_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = udp_new_ip_type &rArr; udp_new &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_random_port
</UL>

<P><STRONG><a name="[36d]"></a>udp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udp.o(i.udp_recv))
<BR><BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_random_port
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
</UL>

<P><STRONG><a name="[35b]"></a>udp_remove</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, udp.o(i.udp_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_random_port
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
</UL>

<P><STRONG><a name="[4ab]"></a>udp_send</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, udp.o(i.udp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = udp_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
</UL>

<P><STRONG><a name="[3a4]"></a>udp_sendto</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, udp.o(i.udp_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route_src
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[374]"></a>udp_sendto_if</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, udp.o(i.udp_sendto_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
</UL>

<P><STRONG><a name="[35f]"></a>udp_sendto_if_src</STRONG> (Thumb, 282 bytes, Stack size 56 bytes, udp.o(i.udp_sendto_if_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>

<P><STRONG><a name="[2ed]"></a>unlink</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, dfs_posix.o(i.unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = unlink &rArr; dfs_file_unlink &rArr; dfs_file_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rm
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
</UL>

<P><STRONG><a name="[29c]"></a>usart_data_receive</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, at32f435_437_usart.o(i.usart_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_isr
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_getc
</UL>

<P><STRONG><a name="[2b3]"></a>usart_data_transmit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, at32f435_437_usart.o(i.usart_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_putc
</UL>

<P><STRONG><a name="[266]"></a>usart_dma_receiver_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_usart.o(i.usart_dma_receiver_enable))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_dma_receive
</UL>

<P><STRONG><a name="[269]"></a>usart_dma_transmitter_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_usart.o(i.usart_dma_transmitter_enable))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_dma_transmit
</UL>

<P><STRONG><a name="[291]"></a>usart_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_usart.o(i.usart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_configure
</UL>

<P><STRONG><a name="[60e]"></a>usart_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f435_437_usart.o(i.usart_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_isr
</UL>

<P><STRONG><a name="[29b]"></a>usart_flag_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at32f435_437_usart.o(i.usart_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_isr
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_putc
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_getc
</UL>

<P><STRONG><a name="[28e]"></a>usart_hardware_flow_control_set</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, at32f435_437_usart.o(i.usart_hardware_flow_control_set))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_configure
</UL>

<P><STRONG><a name="[290]"></a>usart_init</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, at32f435_437_usart.o(i.usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_configure
</UL>

<P><STRONG><a name="[264]"></a>usart_interrupt_enable</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, at32f435_437_usart.o(i.usart_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usart_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_control
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_dma_receive
</UL>

<P><STRONG><a name="[28f]"></a>usart_parity_selection_config</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, at32f435_437_usart.o(i.usart_parity_selection_config))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_configure
</UL>

<P><STRONG><a name="[28c]"></a>usart_receiver_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_usart.o(i.usart_receiver_enable))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_configure
</UL>

<P><STRONG><a name="[28d]"></a>usart_transmitter_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_usart.o(i.usart_transmitter_enable))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_configure
</UL>

<P><STRONG><a name="[628]"></a>usb_core_config</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, usb_core.o(i.usb_core_config))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_init
</UL>

<P><STRONG><a name="[612]"></a>usb_flush_rx_fifo</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, at32f435_437_usb.o(i.usb_flush_rx_fifo))
<BR><BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_core_init
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_host_disable
</UL>

<P><STRONG><a name="[613]"></a>usb_flush_tx_fifo</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, at32f435_437_usb.o(i.usb_flush_tx_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_flush_tx_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_core_init
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_host_disable
</UL>

<P><STRONG><a name="[62a]"></a>usb_global_clear_interrupt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f435_437_usb.o(i.usb_global_clear_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_irq_handler
</UL>

<P><STRONG><a name="[629]"></a>usb_global_get_all_interrupt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_usb.o(i.usb_global_get_all_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_irq_handler
</UL>

<P><STRONG><a name="[60f]"></a>usb_global_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, at32f435_437_usb.o(i.usb_global_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_global_init
</UL>
<BR>[Calls]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_global_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_core_init
</UL>

<P><STRONG><a name="[610]"></a>usb_global_reset</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, at32f435_437_usb.o(i.usb_global_reset))
<BR><BR>[Called By]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_global_init
</UL>

<P><STRONG><a name="[627]"></a>usb_global_select_core</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f435_437_usb.o(i.usb_global_select_core))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_init
</UL>

<P><STRONG><a name="[61a]"></a>usb_global_set_mode</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, at32f435_437_usb.o(i.usb_global_set_mode))
<BR><BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_core_init
</UL>

<P><STRONG><a name="[622]"></a>usb_hc_enable</STRONG> (Thumb, 276 bytes, Stack size 28 bytes, at32f435_437_usb.o(i.usb_hc_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = usb_hc_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_hc_open
</UL>

<P><STRONG><a name="[3ac]"></a>usb_hch_halt</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, at32f435_437_usb.o(i.usb_hch_halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usb_hch_halt
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pipe_xfer
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_close_pipe
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_hch_out_handler
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_hch_in_handler
</UL>

<P><STRONG><a name="[611]"></a>usb_host_disable</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, at32f435_437_usb.o(i.usb_host_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usb_host_disable &rArr; usb_flush_tx_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_flush_tx_fifo
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_flush_rx_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_disconnect_handler
</UL>

<P><STRONG><a name="[619]"></a>usb_interrupt_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_usb.o(i.usb_interrupt_disable))
<BR><BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_core_init
</UL>

<P><STRONG><a name="[61e]"></a>usb_interrupt_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at32f435_437_usb.o(i.usb_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_core_init
</UL>

<P><STRONG><a name="[61b]"></a>usb_open_phy_clk</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f435_437_usb.o(i.usb_open_phy_clk))
<BR><BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_core_init
</UL>

<P><STRONG><a name="[61d]"></a>usb_port_power_on</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, at32f435_437_usb.o(i.usb_port_power_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_port_power_on
</UL>
<BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_core_init
</UL>

<P><STRONG><a name="[62f]"></a>usb_read_packet</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, at32f435_437_usb.o(i.usb_read_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usb_read_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_rx_qlvl_handler
</UL>

<P><STRONG><a name="[626]"></a>usb_write_packet</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, at32f435_437_usb.o(i.usb_write_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usb_write_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_in_out_request
</UL>

<P><STRONG><a name="[614]"></a>usbd_notify_urbchange_callback</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, drv_usbotgh.o(i.usbd_notify_urbchange_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = usbd_notify_urbchange_callback &rArr; rt_sem_release &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_hch_out_handler
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_hch_in_handler
</UL>

<P><STRONG><a name="[61f]"></a>usbh_active_vbus</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_core.o(i.usbh_active_vbus))
<BR><BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_core_init
</UL>

<P><STRONG><a name="[615]"></a>usbh_cfg_default_init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, usbh_core.o(i.usbh_cfg_default_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbh_cfg_default_init
</UL>
<BR>[Calls]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_free_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_core_init
</UL>

<P><STRONG><a name="[617]"></a>usbh_connect_callback</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, drv_usbotgh.o(i.usbh_connect_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = usbh_connect_callback &rArr; rt_usbh_root_hub_connect_handler &rArr; rt_usbh_event_signal &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; _rt_mq_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_root_hub_connect_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_port_handler
</UL>

<P><STRONG><a name="[618]"></a>usbh_core_init</STRONG> (Thumb, 414 bytes, Stack size 40 bytes, usbh_core.o(i.usbh_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = usbh_core_init &rArr; rt_thread_mdelay &rArr; _thread_sleep &rArr; rt_thread_suspend_with_flag &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_port_power_on
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_open_phy_clk
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_interrupt_enable
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_interrupt_disable
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_global_set_mode
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_global_init
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_flush_tx_fifo
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_flush_rx_fifo
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_cfg_default_init
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_active_vbus
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_fsls_clksel
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_init
</UL>

<P><STRONG><a name="[620]"></a>usbh_disconnect_callback</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, drv_usbotgh.o(i.usbh_disconnect_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = usbh_disconnect_callback &rArr; rt_usbh_root_hub_disconnect_handler &rArr; rt_usbh_event_signal &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; _rt_mq_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_root_hub_disconnect_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_disconnect_handler
</UL>

<P><STRONG><a name="[621]"></a>usbh_disconnect_handler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usbh_int.o(i.usbh_disconnect_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = usbh_disconnect_handler &rArr; usbh_disconnect_callback &rArr; rt_usbh_root_hub_disconnect_handler &rArr; rt_usbh_event_signal &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; _rt_mq_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_disconnect_callback
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_fsls_clksel
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_free_channel
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_host_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_irq_handler
</UL>

<P><STRONG><a name="[616]"></a>usbh_free_channel</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbh_core.o(i.usbh_free_channel))
<BR><BR>[Called By]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_cfg_default_init
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_disconnect_handler
</UL>

<P><STRONG><a name="[61c]"></a>usbh_fsls_clksel</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, at32f435_437_usb.o(i.usbh_fsls_clksel))
<BR><BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_core_init
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_port_handler
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_disconnect_handler
</UL>

<P><STRONG><a name="[3b4]"></a>usbh_get_urb_status</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbh_core.o(i.usbh_get_urb_status))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pipe_xfer
</UL>

<P><STRONG><a name="[3af]"></a>usbh_hc_open</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, usbh_core.o(i.usbh_hc_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = usbh_hc_open &rArr; usb_hc_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hc_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_open_pipe
</UL>

<P><STRONG><a name="[623]"></a>usbh_hch_handler</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, usbh_int.o(i.usbh_hch_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = usbh_hch_handler &rArr; usbh_hch_out_handler &rArr; usbd_notify_urbchange_callback &rArr; rt_sem_release &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_hch_out_handler
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_hch_in_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_irq_handler
</UL>

<P><STRONG><a name="[624]"></a>usbh_hch_in_handler</STRONG> (Thumb, 1720 bytes, Stack size 24 bytes, usbh_int.o(i.usbh_hch_in_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = usbh_hch_in_handler &rArr; usbd_notify_urbchange_callback &rArr; rt_sem_release &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hch_halt
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_notify_urbchange_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_hch_handler
</UL>

<P><STRONG><a name="[625]"></a>usbh_hch_out_handler</STRONG> (Thumb, 1468 bytes, Stack size 24 bytes, usbh_int.o(i.usbh_hch_out_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = usbh_hch_out_handler &rArr; usbd_notify_urbchange_callback &rArr; rt_sem_release &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hch_halt
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_notify_urbchange_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_hch_handler
</UL>

<P><STRONG><a name="[3b1]"></a>usbh_in_out_request</STRONG> (Thumb, 596 bytes, Stack size 40 bytes, usbh_core.o(i.usbh_in_out_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = usbh_in_out_request &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_write_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pipe_xfer
</UL>

<P><STRONG><a name="[2a0]"></a>usbh_init</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, usb_core.o(i.usbh_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = usbh_init &rArr; usbh_core_init &rArr; rt_thread_mdelay &rArr; _thread_sleep &rArr; rt_thread_suspend_with_flag &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_core_init
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_global_select_core
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_core_config
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_hcd_init
</UL>

<P><STRONG><a name="[1d8]"></a>usbh_irq_handler</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, usbh_int.o(i.usbh_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = usbh_irq_handler &rArr; usbh_port_handler &rArr; usbh_connect_callback &rArr; rt_usbh_root_hub_connect_handler &rArr; rt_usbh_event_signal &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; _rt_mq_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_global_get_all_interrupt
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_global_clear_interrupt
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_wakeup_handler
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_sof_handler
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_rx_qlvl_handler
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_port_handler
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_hch_handler
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_disconnect_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTGFS1_IRQHandler
</UL>

<P><STRONG><a name="[62e]"></a>usbh_port_handler</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, usbh_int.o(i.usbh_port_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = usbh_port_handler &rArr; usbh_connect_callback &rArr; rt_usbh_root_hub_connect_handler &rArr; rt_usbh_event_signal &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; _rt_mq_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_connect_callback
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_fsls_clksel
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_irq_handler
</UL>

<P><STRONG><a name="[3b5]"></a>usbh_reset_port</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usbh_core.o(i.usbh_reset_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = usbh_reset_port &rArr; rt_thread_mdelay &rArr; _thread_sleep &rArr; rt_thread_suspend_with_flag &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_reset_port
</UL>

<P><STRONG><a name="[130]"></a>usbh_rndis_eth_device_init</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, rndis_dev.o(i.usbh_rndis_eth_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = usbh_rndis_eth_device_init &rArr; eth_device_init &rArr; eth_device_init_with_flag &rArr; netifapi_netif_add &rArr; tcpip_api_call &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_linkchange
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rndis_dev.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[62d]"></a>usbh_rx_qlvl_handler</STRONG> (Thumb, 384 bytes, Stack size 32 bytes, usbh_int.o(i.usbh_rx_qlvl_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = usbh_rx_qlvl_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_read_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_irq_handler
</UL>

<P><STRONG><a name="[62b]"></a>usbh_sof_handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbh_int.o(i.usbh_sof_handler))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_irq_handler
</UL>

<P><STRONG><a name="[62c]"></a>usbh_wakeup_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_int.o(i.usbh_wakeup_handler))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_irq_handler
</UL>

<P><STRONG><a name="[631]"></a>webclient_close</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, webclient.o(i.webclient_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = webclient_close &rArr; webclient_clean &rArr; closesocket &rArr; sal_closesocket &rArr; socket_delete &rArr; socket_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_clean
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_request
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post_comm
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_comm
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_file
</UL>

<P><STRONG><a name="[634]"></a>webclient_content_length_get</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, webclient.o(i.webclient_content_length_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = webclient_content_length_get &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_comm
</UL>

<P><STRONG><a name="[635]"></a>webclient_get</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, webclient.o(i.webclient_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224 + In Cycle
<LI>Call Chain = webclient_get &rArr;  webclient_get (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_header_fields_get
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_clean
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_request
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_comm
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_file
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
</UL>

<P><STRONG><a name="[63c]"></a>webclient_get_file</STRONG> (Thumb, 344 bytes, Stack size 48 bytes, webclient_file.o(i.webclient_get_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = webclient_get_file &rArr; webclient_read &rArr; webclient_next_chunk &rArr; webclient_read_line &rArr; webclient_recv &rArr; recv &rArr; dfs_net_getsocket &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_session_create
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_close
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wget
</UL>

<P><STRONG><a name="[155]"></a>webclient_get_test</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, webclient_get_sample.o(i.webclient_get_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = webclient_get_test &rArr; webclient_get_smpl &rArr; webclient_request &rArr; webclient_response &rArr; webclient_read &rArr; webclient_next_chunk &rArr; webclient_read_line &rArr; webclient_recv &rArr; recv &rArr; dfs_net_getsocket &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_smpl
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_comm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webclient_get_sample.o(FSymTab)
</UL>
<P><STRONG><a name="[637]"></a>webclient_handle_response</STRONG> (Thumb, 420 bytes, Stack size 48 bytes, webclient.o(i.webclient_handle_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = webclient_handle_response &rArr; webclient_read_line &rArr; webclient_recv &rArr; recv &rArr; dfs_net_getsocket &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_header_fields_get
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read_line
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
</UL>

<P><STRONG><a name="[640]"></a>webclient_header_fields_add</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, webclient.o(i.webclient_header_fields_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = webclient_header_fields_add &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_request
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post_comm
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
</UL>

<P><STRONG><a name="[638]"></a>webclient_header_fields_get</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, webclient.o(i.webclient_header_fields_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = webclient_header_fields_get &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_strstri
</UL>
<BR>[Called By]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
</UL>

<P><STRONG><a name="[643]"></a>webclient_post</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, webclient.o(i.webclient_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = webclient_post &rArr; webclient_connect &rArr; socket &rArr; sal_socket &rArr; socket_new &rArr; socket_alloc &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_write
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_request
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post_comm
</UL>

<P><STRONG><a name="[156]"></a>webclient_post_test</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, webclient_post_sample.o(i.webclient_post_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = webclient_post_test &rArr; webclient_post_smpl &rArr; webclient_request &rArr; webclient_response &rArr; webclient_read &rArr; webclient_next_chunk &rArr; webclient_read_line &rArr; webclient_recv &rArr; recv &rArr; dfs_net_getsocket &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post_smpl
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post_comm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webclient_post_sample.o(FSymTab)
</UL>
<P><STRONG><a name="[63b]"></a>webclient_read</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, webclient.o(i.webclient_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = webclient_read &rArr; webclient_next_chunk &rArr; webclient_read_line &rArr; webclient_recv &rArr; recv &rArr; dfs_net_getsocket &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_recv
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_next_chunk
</UL>
<BR>[Called By]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post_comm
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_comm
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_file
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_response
</UL>

<P><STRONG><a name="[63e]"></a>webclient_request</STRONG> (Thumb, 380 bytes, Stack size 48 bytes, webclient.o(i.webclient_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = webclient_request &rArr; webclient_response &rArr; webclient_read &rArr; webclient_next_chunk &rArr; webclient_read_line &rArr; webclient_recv &rArr; recv &rArr; dfs_net_getsocket &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_session_create
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_response
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_header_fields_add
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_close
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post_smpl
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_smpl
</UL>

<P><STRONG><a name="[647]"></a>webclient_request_header_add</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, webclient.o(i.webclient_request_header_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = webclient_request_header_add &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post_smpl
</UL>

<P><STRONG><a name="[649]"></a>webclient_response</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, webclient.o(i.webclient_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = webclient_response &rArr; webclient_read &rArr; webclient_next_chunk &rArr; webclient_read_line &rArr; webclient_recv &rArr; recv &rArr; dfs_net_getsocket &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_request
</UL>

<P><STRONG><a name="[63a]"></a>webclient_session_create</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, webclient.o(i.webclient_session_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = webclient_session_create &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_request
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post_comm
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_comm
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_file
</UL>

<P><STRONG><a name="[644]"></a>webclient_write</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, webclient.o(i.webclient_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = webclient_write &rArr; closesocket &rArr; sal_closesocket &rArr; socket_delete &rArr; socket_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send
</UL>
<BR>[Called By]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
</UL>

<P><STRONG><a name="[154]"></a>wget</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, webclient_file.o(i.wget))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = wget &rArr; webclient_get_file &rArr; webclient_read &rArr; webclient_next_chunk &rArr; webclient_read_line &rArr; webclient_recv &rArr; recv &rArr; dfs_net_getsocket &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_file
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webclient_file.o(FSymTab)
</UL>
<P><STRONG><a name="[247]"></a>write</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, dfs_posix.o(i.write))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = write &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_write
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_file
</UL>

<P><STRONG><a name="[76]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[169]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[42e]"></a>__aeabi_dneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic))
<BR><BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_normalized_components
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_components
</UL>

<P><STRONG><a name="[6a3]"></a>_dneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[6a4]"></a>__aeabi_fneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[6a5]"></a>_fneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[6a6]"></a>_dabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[6a7]"></a>_fabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[1df]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_source_to_location_format
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_float_parse
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[64c]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[44e]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow10_of_int
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10_of_positive
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_source_to_location_format
</UL>

<P><STRONG><a name="[64f]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[652]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[656]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[28a]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_normalization
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unapply_scaling
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow10_of_int
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_scaling
</UL>

<P><STRONG><a name="[654]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1de]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_floating_point
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_normalized_components
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_components
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bastardized_floor
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[655]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[2b9]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bastardized_floor
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_rmc_parse
</UL>

<P><STRONG><a name="[657]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[449]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_rmc_parse
</UL>

<P><STRONG><a name="[658]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2ba]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow10_of_int
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10_of_positive
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bastardized_floor
</UL>

<P><STRONG><a name="[6a8]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[430]"></a>__aeabi_l2d</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_l2d
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_normalized_components
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_components
</UL>

<P><STRONG><a name="[6a9]"></a>_ll_sto_d</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll), UNUSED)

<P><STRONG><a name="[44d]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_source_to_location_format
</UL>

<P><STRONG><a name="[6aa]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[432]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_floating_point
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_components
</UL>

<P><STRONG><a name="[659]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[65c]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[1e6]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_normalization
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unapply_scaling
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow10_of_int
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10_of_positive
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_components
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_scaling
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_rmc_parse
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>

<P><STRONG><a name="[65a]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[64e]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sfrom_d
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[651]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[1e0]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_floating_point
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_normalized_components
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_components
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bastardized_floor
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[65b]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[431]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_normalized_components
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_components
</UL>

<P><STRONG><a name="[65d]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[47e]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow10_of_int
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10_of_positive
</UL>

<P><STRONG><a name="[65f]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[44c]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_source_to_location_format
</UL>

<P><STRONG><a name="[660]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[661]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[162]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[6ab]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[6ac]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[64d]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[2]"></a>__ieee_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, istatus.o(x$fpl$ieeestatus))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[42f]"></a>__aeabi_d2lz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixll.o(x$fpl$llsfromd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_normalized_components
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_components
</UL>

<P><STRONG><a name="[662]"></a>_ll_sfrom_d</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, dfixll.o(x$fpl$llsfromd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[653]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[1e3]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>

<P><STRONG><a name="[1a1]"></a>_scanf_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf1.o(x$fpl$scanf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[1aa]"></a>_scanf_hex_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _scanf_hex_real &rArr; _scanf_really_hex_real &rArr; __support_ldexp &rArr; __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[1a9]"></a>_scanf_infnan</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_infnan &rArr; _scanf_really_infnan
</UL>
<BR>[Calls]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[663]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[cc]"></a>tcpserv</STRONG> (Thumb, 858 bytes, Stack size 88 bytes, main.o(i.tcpserv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = tcpserv &rArr; select &rArr; poll &rArr; poll_do &rArr; do_pollfd &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_ntoa
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.tcpserver_test)
</UL>
<P><STRONG><a name="[133]"></a>tcpserver_test</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, main.o(i.tcpserver_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = tcpserver_test &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usage
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(FSymTab)
</UL>
<P><STRONG><a name="[60b]"></a>usage</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, main.o(i.usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = usage &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_test
</UL>

<P><STRONG><a name="[2bd]"></a>bus_fault_track</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, cpuport.o(i.bus_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = bus_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[44f]"></a>hard_fault_track</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, cpuport.o(i.hard_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = hard_fault_track &rArr; usage_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usage_fault_track
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_manage_fault_track
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_fault_track
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>

<P><STRONG><a name="[450]"></a>mem_manage_fault_track</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, cpuport.o(i.mem_manage_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = mem_manage_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[451]"></a>usage_fault_track</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, cpuport.o(i.usage_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = usage_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[136]"></a>_pin_cmd</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, dev_pin.o(i._pin_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = _pin_cmd &rArr; _pin_cmd_write &rArr; _pin_cmd_print_usage &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_write
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_read
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_print_usage
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_mode
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_pin.o(FSymTab)
</UL>
<P><STRONG><a name="[212]"></a>_pin_cmd_conv</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dev_pin.o(i._pin_cmd_conv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _pin_cmd_conv &rArr; rt_pin_get &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_get
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_write
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_read
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_mode
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_get
</UL>

<P><STRONG><a name="[20e]"></a>_pin_cmd_get</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dev_pin.o(i._pin_cmd_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = _pin_cmd_get &rArr; _pin_cmd_print_usage &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_print_usage
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_conv
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd
</UL>

<P><STRONG><a name="[20f]"></a>_pin_cmd_mode</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, dev_pin.o(i._pin_cmd_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = _pin_cmd_mode &rArr; _pin_cmd_print_usage &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_isint
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_print_usage
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_conv
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd
</UL>

<P><STRONG><a name="[20c]"></a>_pin_cmd_print_usage</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, dev_pin.o(i._pin_cmd_print_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = _pin_cmd_print_usage &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_get
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_write
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_read
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_mode
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_get
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd
</UL>

<P><STRONG><a name="[210]"></a>_pin_cmd_read</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, dev_pin.o(i._pin_cmd_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = _pin_cmd_read &rArr; _pin_cmd_print_usage &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_isint
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_read
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_print_usage
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_conv
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd
</UL>

<P><STRONG><a name="[211]"></a>_pin_cmd_write</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, dev_pin.o(i._pin_cmd_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = _pin_cmd_write &rArr; _pin_cmd_print_usage &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_isint
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_print_usage
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_conv
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd
</UL>

<P><STRONG><a name="[b0]"></a>_pin_control</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, dev_pin.o(i._pin_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _pin_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_pin.o(i.rt_device_pin_register)
</UL>
<P><STRONG><a name="[ae]"></a>_pin_read</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, dev_pin.o(i._pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _pin_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_pin.o(i.rt_device_pin_register)
</UL>
<P><STRONG><a name="[af]"></a>_pin_write</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, dev_pin.o(i._pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_pin.o(i.rt_device_pin_register)
</UL>
<P><STRONG><a name="[235]"></a>_serial_check_buffer_size</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, dev_serial.o(i._serial_check_buffer_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = _serial_check_buffer_size &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_put_index
</UL>

<P><STRONG><a name="[236]"></a>_serial_dma_rx</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, dev_serial.o(i._serial_dma_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = _serial_dma_rx &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_get_index
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_calc_recved_len
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[23a]"></a>_serial_dma_tx</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, dev_serial.o(i._serial_dma_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = _serial_dma_tx &rArr; rt_data_queue_push &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[23c]"></a>_serial_fifo_calc_recved_len</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, dev_serial.o(i._serial_fifo_calc_recved_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _serial_fifo_calc_recved_len &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_calc_recved_len
</UL>

<P><STRONG><a name="[23d]"></a>_serial_int_rx</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, dev_serial.o(i._serial_int_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = _serial_int_rx &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[23e]"></a>_serial_int_tx</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, dev_serial.o(i._serial_int_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = _serial_int_tx &rArr; rt_completion_wait &rArr; rt_completion_wait_flags &rArr; rt_thread_suspend_with_flag &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[240]"></a>_serial_poll_rx</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, dev_serial.o(i._serial_poll_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _serial_poll_rx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[241]"></a>_serial_poll_tx</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, dev_serial.o(i._serial_poll_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _serial_poll_tx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[238]"></a>rt_dma_calc_recved_len</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dev_serial.o(i.rt_dma_calc_recved_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_dma_calc_recved_len &rArr; _serial_fifo_calc_recved_len &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_calc_recved_len
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_get_index
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
</UL>

<P><STRONG><a name="[239]"></a>rt_dma_recv_update_get_index</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, dev_serial.o(i.rt_dma_recv_update_get_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rt_dma_recv_update_get_index &rArr; rt_dma_calc_recved_len &rArr; _serial_fifo_calc_recved_len &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_calc_recved_len
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
</UL>

<P><STRONG><a name="[541]"></a>rt_dma_recv_update_put_index</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, dev_serial.o(i.rt_dma_recv_update_put_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = rt_dma_recv_update_put_index &rArr; _serial_check_buffer_size &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_check_buffer_size
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[b3]"></a>rt_serial_close</STRONG> (Thumb, 326 bytes, Stack size 16 bytes, dev_serial.o(i.rt_serial_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = rt_serial_close &rArr; rt_data_queue_deinit &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_deinit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[b6]"></a>rt_serial_control</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, dev_serial.o(i.rt_serial_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rt_serial_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[b1]"></a>rt_serial_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dev_serial.o(i.rt_serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_serial_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[b2]"></a>rt_serial_open</STRONG> (Thumb, 582 bytes, Stack size 24 bytes, dev_serial.o(i.rt_serial_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = rt_serial_open &rArr; rt_data_queue_init &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[b4]"></a>rt_serial_read</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, dev_serial.o(i.rt_serial_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = rt_serial_read &rArr; _serial_int_rx &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_rx
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[b5]"></a>rt_serial_write</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, dev_serial.o(i.rt_serial_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = rt_serial_write &rArr; _serial_int_tx &rArr; rt_completion_wait &rArr; rt_completion_wait_flags &rArr; rt_thread_suspend_with_flag &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_tx
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[534]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dataqueue.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
</UL>

<P><STRONG><a name="[5b7]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, waitqueue.o(i.rt_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_add
</UL>

<P><STRONG><a name="[5b9]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, waitqueue.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
</UL>

<P><STRONG><a name="[5b8]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, waitqueue.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_remove
</UL>

<P><STRONG><a name="[26a]"></a>_workqueue_submit_work</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, workqueue.o(i._workqueue_submit_work))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = _workqueue_submit_work &rArr; rt_completion_done &rArr; rt_completion_wakeup_by_errno &rArr; rt_thread_resume &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_submit_work
</UL>

<P><STRONG><a name="[c3]"></a>_workqueue_thread_entry</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, workqueue.o(i._workqueue_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = _workqueue_thread_entry &rArr; rt_completion_wait &rArr; rt_completion_wait_flags &rArr; rt_thread_suspend_with_flag &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_trytake
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Address Reference Count : 1]<UL><LI> workqueue.o(i.rt_workqueue_create)
</UL>
<P><STRONG><a name="[5b4]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, workqueue.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_work_init
</UL>

<P><STRONG><a name="[26c]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, workqueue.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
</UL>

<P><STRONG><a name="[26e]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, workqueue.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
</UL>

<P><STRONG><a name="[26b]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, workqueue.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
</UL>

<P><STRONG><a name="[128]"></a>rt_work_sys_workqueue_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, workqueue.o(i.rt_work_sys_workqueue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = rt_work_sys_workqueue_init &rArr; rt_workqueue_create &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> workqueue.o(.rti_fn.2)
</UL>
<P><STRONG><a name="[137]"></a>reboot</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, drv_common.o(i.reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = reboot
</UL>
<BR>[Calls]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_cpu_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_common.o(FSymTab)
</UL>
<P><STRONG><a name="[d8]"></a>at32_pin_attach_irq</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, drv_gpio.o(i.at32_pin_attach_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = at32_pin_attach_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2bitno
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[d9]"></a>at32_pin_dettach_irq</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, drv_gpio.o(i.at32_pin_dettach_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = at32_pin_dettach_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2bitno
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>at32_pin_get</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, drv_gpio.o(i.at32_pin_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at32_pin_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>at32_pin_irq_enable</STRONG> (Thumb, 430 bytes, Stack size 64 bytes, drv_gpio.o(i.at32_pin_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = at32_pin_irq_enable &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scfg_exint_line_config
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_disable
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exint_init
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exint_default_para_init
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2bitno
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>at32_pin_mode</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, drv_gpio.o(i.at32_pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = at32_pin_mode &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>at32_pin_read</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, drv_gpio.o(i.at32_pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = at32_pin_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_data_bit_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>at32_pin_write</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, drv_gpio.o(i.at32_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = at32_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[2aa]"></a>bit2bitno</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drv_gpio.o(i.bit2bitno))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_exint_handler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_irq_enable
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_dettach_irq
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_attach_irq
</UL>

<P><STRONG><a name="[81]"></a>at32_hcd_init</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, drv_usbotgh.o(i.at32_hcd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = at32_hcd_init &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_usb_init
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_init
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbotgh.o(i.at32_usbh_register)
</UL>
<P><STRONG><a name="[9]"></a>drv_close_pipe</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, drv_usbotgh.o(i.drv_close_pipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = drv_close_pipe &rArr; usb_hch_halt
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hch_halt
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_free_pipe_index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbotgh.o(.data)
</UL>
<P><STRONG><a name="[3ad]"></a>drv_free_pipe_index</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drv_usbotgh.o(i.drv_free_pipe_index))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_close_pipe
</UL>

<P><STRONG><a name="[3ae]"></a>drv_get_free_pipe_index</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, drv_usbotgh.o(i.drv_get_free_pipe_index))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_open_pipe
</UL>

<P><STRONG><a name="[8]"></a>drv_open_pipe</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, drv_usbotgh.o(i.drv_open_pipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = drv_open_pipe &rArr; usbh_hc_open &rArr; usb_hc_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_hc_open
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_get_free_pipe_index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbotgh.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>drv_pipe_xfer</STRONG> (Thumb, 1182 bytes, Stack size 40 bytes, drv_usbotgh.o(i.drv_pipe_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = drv_pipe_xfer &rArr; rt_sem_take &rArr; _rt_sem_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_in_out_request
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_get_urb_status
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hch_halt
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbotgh.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>drv_reset_port</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_usbotgh.o(i.drv_reset_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = drv_reset_port &rArr; usbh_reset_port &rArr; rt_thread_mdelay &rArr; _thread_sleep &rArr; rt_thread_suspend_with_flag &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_reset_port
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbotgh.o(.data)
</UL>
<P><STRONG><a name="[54d]"></a>_dma_base_channel_check</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, drv_usart.o(i._dma_base_channel_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _dma_base_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
</UL>

<P><STRONG><a name="[263]"></a>_uart_dma_receive</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, drv_usart.o(i._uart_dma_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _uart_dma_receive &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dma_receiver_enable
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_enable
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_dma_config
</UL>

<P><STRONG><a name="[268]"></a>_uart_dma_transmit</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, drv_usart.o(i._uart_dma_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _uart_dma_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dma_transmitter_enable
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_enable
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_dma_transmit
</UL>

<P><STRONG><a name="[dc]"></a>at32_configure</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, drv_usart.o(i.at32_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = at32_configure &rArr; usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_usart_init
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmitter_enable
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receiver_enable
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_selection_config
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_hardware_flow_control_set
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.constdata)
</UL>
<P><STRONG><a name="[dd]"></a>at32_control</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, drv_usart.o(i.at32_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = at32_control &rArr; at32_dma_config &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_reset
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_dma_config
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_disable
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.constdata)
</UL>
<P><STRONG><a name="[295]"></a>at32_dma_config</STRONG> (Thumb, 260 bytes, Stack size 48 bytes, drv_usart.o(i.at32_dma_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = at32_dma_config &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmamux_init
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmamux_enable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_reset
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_default_para_init
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_dma_receive
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_control
</UL>

<P><STRONG><a name="[e0]"></a>at32_dma_transmit</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, drv_usart.o(i.at32_dma_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = at32_dma_transmit &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_dma_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>at32_getc</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, drv_usart.o(i.at32_getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = at32_getc &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>at32_putc</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, drv_usart.o(i.at32_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = at32_putc &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.constdata)
</UL>
<P><STRONG><a name="[54c]"></a>at32_uart_get_dma_config</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, drv_usart.o(i.at32_uart_get_dma_config))
<BR><BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
</UL>

<P><STRONG><a name="[1da]"></a>usart_isr</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, drv_usart.o(i.usart_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = usart_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_clear
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_data_number_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[2cc]"></a>check_and_update_part_cache</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, fal_partition.o(i.check_and_update_part_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = check_and_update_part_cache &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_device_find
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_init
</UL>

<P><STRONG><a name="[3fc]"></a>flash_device_find_by_part</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, fal_partition.o(i.flash_device_find_by_part))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = flash_device_find_by_part &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
</UL>

<P><STRONG><a name="[138]"></a>fal</STRONG> (Thumb, 2154 bytes, Stack size 96 bytes, fal_rtt.o(i.fal))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = fal &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_find
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_device_find
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_show_part_table
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_init_check
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal_rtt.o(FSymTab)
</UL>
<P><STRONG><a name="[e4]"></a>erase</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fal_flash_at32_port.o(i.erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = erase &rArr; flash_sector_erase &rArr; flash_bank2_operation_wait_for
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unlock
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sector_erase
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_lock
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_flag_clear
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_get_sector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal_flash_at32_port.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fal_flash_at32_port.o(i.init))
<BR>[Address Reference Count : 1]<UL><LI> fal_flash_at32_port.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>read</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, fal_flash_at32_port.o(i.read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal_flash_at32_port.o(.constdata)
</UL>
<P><STRONG><a name="[3b8]"></a>stm32_get_sector</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fal_flash_at32_port.o(i.stm32_get_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stm32_get_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[e3]"></a>write</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, fal_flash_at32_port.o(i.write))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = write &rArr; flash_byte_program &rArr; flash_bank2_operation_wait_for
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unlock
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_lock
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_flag_clear
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_byte_program
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal_flash_at32_port.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>finsh_rx_ind</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, shell.o(i.finsh_rx_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = finsh_rx_ind &rArr; rt_sem_release &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(i.finsh_set_device)
</UL>
<P><STRONG><a name="[412]"></a>finsh_system_function_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, shell.o(i.finsh_system_function_init))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[8e]"></a>finsh_thread_entry</STRONG> (Thumb, 1290 bytes, Stack size 0 bytes, shell.o(i.finsh_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = finsh_thread_entry &rArr; shell_auto_complete &rArr; msh_auto_complete &rArr; msh_auto_complete_path &rArr; opendir &rArr; fd_new &rArr; fdt_fd_new &rArr; fd_alloc &rArr; fd_slot_alloc &rArr; fd_slot_expand &rArr; rt_realloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memmove
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(i.finsh_system_init)
</UL>
<P><STRONG><a name="[416]"></a>shell_auto_complete</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, shell.o(i.shell_auto_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = shell_auto_complete &rArr; msh_auto_complete &rArr; msh_auto_complete_path &rArr; opendir &rArr; fd_new &rArr; fdt_fd_new &rArr; fd_alloc &rArr; fd_slot_alloc &rArr; fd_slot_expand &rArr; rt_realloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_auto_complete
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[415]"></a>shell_handle_history</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, shell.o(i.shell_handle_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = shell_handle_history &rArr; finsh_get_prompt &rArr; getcwd &rArr; dfs_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[418]"></a>shell_push_history</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, shell.o(i.shell_push_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = shell_push_history &rArr; rt_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[139]"></a>clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmd.o(i.clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = clear &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[13b]"></a>cmd_list</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, cmd.o(i.cmd_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = cmd_list &rArr; list_thread &rArr; list_get_next &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_list_dump
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_opt_id_get
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_fd
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[46f]"></a>list_find_init</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, cmd.o(i.list_find_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = list_find_init
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
</UL>

<P><STRONG><a name="[471]"></a>list_get_next</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, cmd.o(i.list_get_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = list_get_next &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
</UL>

<P><STRONG><a name="[470]"></a>object_split</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cmd.o(i.object_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
</UL>

<P><STRONG><a name="[472]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmd.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[473]"></a>rt_list_len</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cmd.o(i.rt_list_len))
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[13a]"></a>version</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(i.version))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = version &rArr; rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[200]"></a>_msh_exec_cmd</STRONG> (Thumb, 138 bytes, Stack size 72 bytes, msh.o(i._msh_exec_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = _msh_exec_cmd &rArr; msh_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_split
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
</UL>

<P><STRONG><a name="[13e]"></a>cmd_free</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, msh.o(i.cmd_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = cmd_free &rArr; rt_memory_info &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memory_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[13d]"></a>cmd_ps</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, msh.o(i.cmd_ps))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = cmd_ps &rArr; list_thread &rArr; list_get_next &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[4d9]"></a>msh_get_argc</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, msh.o(i.msh_get_argc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = msh_get_argc
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_auto_complete
</UL>

<P><STRONG><a name="[201]"></a>msh_get_cmd</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, msh.o(i.msh_get_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = msh_get_cmd &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_auto_complete
</UL>

<P><STRONG><a name="[4d7]"></a>msh_get_cmd_opt</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, msh.o(i.msh_get_cmd_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = msh_get_cmd_opt &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_auto_complete
</UL>

<P><STRONG><a name="[13c]"></a>msh_help</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, msh.o(i.msh_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = msh_help &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[4db]"></a>msh_opt_complete</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, msh.o(i.msh_opt_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = msh_opt_complete &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_common
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_auto_complete
</UL>

<P><STRONG><a name="[4da]"></a>msh_opt_help</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, msh.o(i.msh_opt_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = msh_opt_help &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_auto_complete
</UL>

<P><STRONG><a name="[203]"></a>msh_split</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, msh.o(i.msh_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = msh_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>

<P><STRONG><a name="[4d3]"></a>str_common</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, msh.o(i.str_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = str_common
</UL>
<BR>[Called By]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_complete
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>

<P><STRONG><a name="[142]"></a>cmd_cat</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, msh_file.o(i.cmd_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = cmd_cat &rArr; cat &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[144]"></a>cmd_cd</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, msh_file.o(i.cmd_cd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = cmd_cd &rArr; chdir &rArr; opendir &rArr; fd_new &rArr; fdt_fd_new &rArr; fd_alloc &rArr; fd_slot_alloc &rArr; fd_slot_expand &rArr; rt_realloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[140]"></a>cmd_cp</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, msh_file.o(i.cmd_cp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = cmd_cp &rArr; copy &rArr; copydir &rArr;  copydir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[14a]"></a>cmd_df</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, msh_file.o(i.cmd_df))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = cmd_df &rArr; df &rArr; dfs_statfs &rArr; dfs_filesystem_lookup &rArr; dfs_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[14b]"></a>cmd_echo</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, msh_file.o(i.cmd_echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = cmd_echo &rArr; open &rArr; fd_new &rArr; fdt_fd_new &rArr; fd_alloc &rArr; fd_slot_alloc &rArr; fd_slot_expand &rArr; rt_realloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[13f]"></a>cmd_ls</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, msh_file.o(i.cmd_ls))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = cmd_ls &rArr; ls &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[146]"></a>cmd_mkdir</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, msh_file.o(i.cmd_mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = cmd_mkdir &rArr; mkdir &rArr; fd_new &rArr; fdt_fd_new &rArr; fd_alloc &rArr; fd_slot_alloc &rArr; fd_slot_expand &rArr; rt_realloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[147]"></a>cmd_mkfs</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, msh_file.o(i.cmd_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = cmd_mkfs &rArr; dfs_mkfs &rArr; dfs_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[148]"></a>cmd_mount</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, msh_file.o(i.cmd_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = cmd_mount &rArr; dfs_mount &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[141]"></a>cmd_mv</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, msh_file.o(i.cmd_mv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = cmd_mv &rArr; rename &rArr; dfs_file_rename &rArr; dfs_file_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[145]"></a>cmd_pwd</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, msh_file.o(i.cmd_pwd))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = cmd_pwd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[143]"></a>cmd_rm</STRONG> (Thumb, 262 bytes, Stack size 96 bytes, msh_file.o(i.cmd_rm))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = cmd_rm &rArr; directory_delete_for_msh &rArr;  directory_delete_for_msh (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[14c]"></a>cmd_tail</STRONG> (Thumb, 314 bytes, Stack size 48 bytes, msh_file.o(i.cmd_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = cmd_tail &rArr; open &rArr; fd_new &rArr; fdt_fd_new &rArr; fd_alloc &rArr; fd_slot_alloc &rArr; fd_slot_expand &rArr; rt_realloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[149]"></a>cmd_umount</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, msh_file.o(i.cmd_umount))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = cmd_umount &rArr; dfs_unmount &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[2f1]"></a>directory_delete_for_msh</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, msh_file.o(i.directory_delete_for_msh))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + In Cycle
<LI>Call Chain = directory_delete_for_msh &rArr;  directory_delete_for_msh (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rmdir
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rm
</UL>

<P><STRONG><a name="[4d6]"></a>msh_readline</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, msh_file.o(i.msh_readline))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = msh_readline &rArr; read &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
</UL>

<P><STRONG><a name="[eb]"></a>dfs_device_fs_poll</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, devfs.o(i.dfs_device_fs_poll))
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[31e]"></a>elm_result_to_dfs</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, dfs_elm.o(i.elm_result_to_dfs))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_write
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_statfs
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_read
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_lseek
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_ioctl
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_flush
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_close
</UL>

<P><STRONG><a name="[324]"></a>get_disk</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, dfs_elm.o(i.get_disk))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
</UL>

<P><STRONG><a name="[2ce]"></a>check_fs</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[3e6]"></a>clmt_clust</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, ff.o(i.clmt_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[37f]"></a>clst2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.clst2sect))
<BR><BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[2f4]"></a>cmp_lfn</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, ff.o(i.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cmp_lfn &rArr; ff_wtoupper
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[2fd]"></a>create_chain</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[300]"></a>create_name</STRONG> (Thumb, 592 bytes, Stack size 56 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = create_name &rArr; tchar2uni &rArr; ff_oem2uni
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_uni2oem
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tchar2uni
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[304]"></a>create_partition</STRONG> (Thumb, 346 bytes, Stack size 72 bytes, ff.o(i.create_partition))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = create_partition &rArr; disk_write &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[42b]"></a>dbc_1st</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.dbc_1st))
<BR><BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tchar2uni
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
</UL>

<P><STRONG><a name="[5da]"></a>dbc_2nd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.dbc_2nd))
<BR><BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tchar2uni
</UL>

<P><STRONG><a name="[37a]"></a>dir_alloc</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; dir_clear &rArr; ff_memfree &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[37d]"></a>dir_clear</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, ff.o(i.dir_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = dir_clear &rArr; ff_memfree &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[382]"></a>dir_find</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memfree &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[37c]"></a>dir_next</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = dir_next &rArr; dir_clear &rArr; ff_memfree &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[384]"></a>dir_read</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, ff.o(i.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = dir_read &rArr; dir_next &rArr; dir_clear &rArr; ff_memfree &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[386]"></a>dir_register</STRONG> (Thumb, 326 bytes, Stack size 48 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memfree &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_lfn
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[389]"></a>dir_remove</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ff.o(i.dir_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = dir_remove &rArr; dir_next &rArr; dir_clear &rArr; ff_memfree &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>

<P><STRONG><a name="[37b]"></a>dir_sdi</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[40a]"></a>find_volume</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[3e7]"></a>follow_path</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memfree &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[387]"></a>gen_numname</STRONG> (Thumb, 206 bytes, Stack size 64 bytes, ff.o(i.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gen_numname
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_1st
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[2fe]"></a>get_fat</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[3f2]"></a>get_fileinfo</STRONG> (Thumb, 386 bytes, Stack size 40 bytes, ff.o(i.get_fileinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get_fileinfo &rArr; put_utf &rArr; ff_uni2oem
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_utf
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[3ec]"></a>get_ldnumber</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[3f1]"></a>ld_clust</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ld_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[2d2]"></a>ld_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.ld_dword))
<BR><BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[2d0]"></a>ld_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.ld_word))
<BR><BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[47b]"></a>lock_fs</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ff.o(i.lock_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[3e5]"></a>mount_volume</STRONG> (Thumb, 670 bytes, Stack size 64 bytes, ff.o(i.mount_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = mount_volume &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[2cf]"></a>move_window</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[385]"></a>pick_lfn</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, ff.o(i.pick_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pick_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[2ff]"></a>put_fat</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[388]"></a>put_lfn</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, ff.o(i.put_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = put_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[435]"></a>put_utf</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ff.o(i.put_utf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = put_utf &rArr; ff_uni2oem
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_uni2oem
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
</UL>

<P><STRONG><a name="[3eb]"></a>remove_chain</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[3e9]"></a>st_clust</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ff.o(i.st_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[306]"></a>st_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.st_dword))
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[307]"></a>st_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.st_word))
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_lfn
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[383]"></a>sum_sfn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ff.o(i.sum_sfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sum_sfn
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[3ea]"></a>sync_fs</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[37e]"></a>sync_window</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[301]"></a>tchar2uni</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ff.o(i.tchar2uni))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tchar2uni &rArr; ff_oem2uni
</UL>
<BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_oem2uni
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_2nd
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_1st
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[3e4]"></a>unlock_fs</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ff.o(i.unlock_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = unlock_fs &rArr; ff_rel_grant &rArr; rt_mutex_release &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[3e3]"></a>validate</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[3fd]"></a>fd_alloc</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, dfs.o(i.fd_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = fd_alloc &rArr; fd_slot_alloc &rArr; fd_slot_expand &rArr; rt_realloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_slot_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdt_fd_new
</UL>

<P><STRONG><a name="[3fe]"></a>fd_slot_alloc</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, dfs.o(i.fd_slot_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = fd_slot_alloc &rArr; fd_slot_expand &rArr; rt_realloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_slot_expand
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_alloc
</UL>

<P><STRONG><a name="[403]"></a>fd_slot_expand</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, dfs.o(i.fd_slot_expand))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = fd_slot_expand &rArr; rt_realloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_slot_alloc
</UL>

<P><STRONG><a name="[1f2]"></a>_get_path_lastname</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfs_file.o(i._get_path_lastname))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_path_lastname
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>

<P><STRONG><a name="[346]"></a>bkdr_hash</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dfs_file.o(i.bkdr_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bkdr_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_vnode_find
</UL>

<P><STRONG><a name="[2fa]"></a>copydir</STRONG> (Thumb, 250 bytes, Stack size 376 bytes, dfs_file.o(i.copydir))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560 + In Cycle
<LI>Call Chain = copydir &rArr;  copydir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_getdents
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[2f9]"></a>copyfile</STRONG> (Thumb, 190 bytes, Stack size 72 bytes, dfs_file.o(i.copyfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = copyfile &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_init
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_write
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_read
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[336]"></a>dfs_vnode_find</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, dfs_file.o(i.dfs_vnode_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dfs_vnode_find &rArr; bkdr_hash
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkdr_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_is_open
</UL>

<P><STRONG><a name="[347]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dfs_file.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_vnode_mgr_init
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_vnode_init
</UL>

<P><STRONG><a name="[334]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dfs_file.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
</UL>

<P><STRONG><a name="[7e]"></a>__wqueue_pollwake</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, poll.o(i.__wqueue_pollwake))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = __wqueue_pollwake &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wqueue_default_wake
</UL>
<BR>[Address Reference Count : 1]<UL><LI> poll.o(i._poll_add)
</UL>
<P><STRONG><a name="[ac]"></a>_poll_add</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, poll.o(i._poll_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = _poll_add &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> poll.o(i.poll_table_init)
</UL>
<P><STRONG><a name="[3ab]"></a>do_pollfd</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, poll.o(i.do_pollfd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = do_pollfd &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_do
</UL>

<P><STRONG><a name="[51c]"></a>poll_do</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, poll.o(i.poll_do))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = poll_do &rArr; do_pollfd &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_wait_timeout
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_pollfd
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll
</UL>

<P><STRONG><a name="[51b]"></a>poll_table_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, poll.o(i.poll_table_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = poll_table_init &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll
</UL>

<P><STRONG><a name="[51d]"></a>poll_teardown</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, poll.o(i.poll_teardown))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = poll_teardown &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll
</UL>

<P><STRONG><a name="[51e]"></a>poll_wait_timeout</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, poll.o(i.poll_wait_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = poll_wait_timeout &rArr; rt_thread_suspend_with_flag &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_with_flag
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_do
</UL>

<P><STRONG><a name="[405]"></a>fdszero</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, select.o(i.fdszero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fdszero &rArr; rt_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
</UL>

<P><STRONG><a name="[289]"></a>apply_scaling</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, rt_vsnprintf_std.o(i.apply_scaling))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = apply_scaling &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_normalized_components
</UL>

<P><STRONG><a name="[2b6]"></a>atou_</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rt_vsnprintf_std.o(i.atou_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atou_
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_digit_
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_string_loop
</UL>

<P><STRONG><a name="[2b8]"></a>bastardized_floor</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, rt_vsnprintf_std.o(i.bastardized_floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bastardized_floor &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow10_of_int
</UL>

<P><STRONG><a name="[41f]"></a>format_string_loop</STRONG> (Thumb, 1752 bytes, Stack size 72 bytes, rt_vsnprintf_std.o(i.format_string_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar_via_gadget
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_integer
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_floating_point
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_flags
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_rev_
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_digit_
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atou_
</UL>
<BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf_impl
</UL>

<P><STRONG><a name="[439]"></a>get_bit_access</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, rt_vsnprintf_std.o(i.get_bit_access))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_bit_access
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_normalization
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10_of_positive
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sign_bit
</UL>

<P><STRONG><a name="[42c]"></a>get_components</STRONG> (Thumb, 444 bytes, Stack size 80 bytes, rt_vsnprintf_std.o(i.get_components))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sign_bit
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_decimal_number
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_normalized_components
</UL>

<P><STRONG><a name="[47d]"></a>get_exp2</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rt_vsnprintf_std.o(i.get_exp2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_exp2
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_normalization
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10_of_positive
</UL>

<P><STRONG><a name="[436]"></a>get_normalized_components</STRONG> (Thumb, 408 bytes, Stack size 136 bytes, rt_vsnprintf_std.o(i.get_normalized_components))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_normalization
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unapply_scaling
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_components
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_scaling
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
</UL>

<P><STRONG><a name="[42d]"></a>get_sign_bit</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, rt_vsnprintf_std.o(i.get_sign_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bit_access
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_components
</UL>

<P><STRONG><a name="[2b7]"></a>is_digit_</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_vsnprintf_std.o(i.is_digit_))
<BR><BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_string_loop
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atou_
</UL>

<P><STRONG><a name="[47c]"></a>log10_of_positive</STRONG> (Thumb, 230 bytes, Stack size 88 bytes, rt_vsnprintf_std.o(i.log10_of_positive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = log10_of_positive &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_exp2
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bit_access
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
</UL>

<P><STRONG><a name="[424]"></a>out_rev_</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, rt_vsnprintf_std.o(i.out_rev_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = out_rev_ &rArr; putchar_via_gadget
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar_via_gadget
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_integer_finalization
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_floating_point
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_broken_up_decimal
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_string_loop
</UL>

<P><STRONG><a name="[421]"></a>parse_flags</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, rt_vsnprintf_std.o(i.parse_flags))
<BR><BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_string_loop
</UL>

<P><STRONG><a name="[520]"></a>pow10_of_int</STRONG> (Thumb, 364 bytes, Stack size 120 bytes, rt_vsnprintf_std.o(i.pow10_of_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pow10_of_int &rArr; bastardized_floor &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bastardized_floor
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
</UL>

<P><STRONG><a name="[521]"></a>print_broken_up_decimal</STRONG> (Thumb, 466 bytes, Stack size 64 bytes, rt_vsnprintf_std.o(i.print_broken_up_decimal))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = print_broken_up_decimal &rArr; out_rev_ &rArr; putchar_via_gadget
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_rev_
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_decimal_number
</UL>

<P><STRONG><a name="[522]"></a>print_decimal_number</STRONG> (Thumb, 78 bytes, Stack size 96 bytes, rt_vsnprintf_std.o(i.print_decimal_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = print_decimal_number &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_broken_up_decimal
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_components
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_floating_point
</UL>

<P><STRONG><a name="[523]"></a>print_exponential_number</STRONG> (Thumb, 736 bytes, Stack size 200 bytes, rt_vsnprintf_std.o(i.print_exponential_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar_via_gadget
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_integer
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_broken_up_decimal
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow10_of_int
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10_of_positive
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sign_bit
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_normalized_components
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_components
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bastardized_floor
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_floating_point
</UL>

<P><STRONG><a name="[423]"></a>print_floating_point</STRONG> (Thumb, 326 bytes, Stack size 80 bytes, rt_vsnprintf_std.o(i.print_floating_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_decimal_number
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_rev_
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_string_loop
</UL>

<P><STRONG><a name="[422]"></a>print_integer</STRONG> (Thumb, 188 bytes, Stack size 88 bytes, rt_vsnprintf_std.o(i.print_integer))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = print_integer &rArr; print_integer_finalization &rArr; out_rev_ &rArr; putchar_via_gadget
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_integer_finalization
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_string_loop
</UL>

<P><STRONG><a name="[524]"></a>print_integer_finalization</STRONG> (Thumb, 302 bytes, Stack size 56 bytes, rt_vsnprintf_std.o(i.print_integer_finalization))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = print_integer_finalization &rArr; out_rev_ &rArr; putchar_via_gadget
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_rev_
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_integer
</UL>

<P><STRONG><a name="[420]"></a>putchar_via_gadget</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rt_vsnprintf_std.o(i.putchar_via_gadget))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = putchar_via_gadget
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_rev_
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_string_loop
</UL>

<P><STRONG><a name="[437]"></a>unapply_scaling</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, rt_vsnprintf_std.o(i.unapply_scaling))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = unapply_scaling &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_normalized_components
</UL>

<P><STRONG><a name="[438]"></a>update_normalization</STRONG> (Thumb, 234 bytes, Stack size 72 bytes, rt_vsnprintf_std.o(i.update_normalization))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = update_normalization &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_exp2
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bit_access
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_normalized_components
</UL>

<P><STRONG><a name="[5b3]"></a>vsnprintf_impl</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, rt_vsnprintf_std.o(i.vsnprintf_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_string_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[ad]"></a>main_thread_entry</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, components.o(i.main_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = main_thread_entry &rArr; $Super$$main &rArr; rt_thread_mdelay &rArr; _thread_sleep &rArr; rt_thread_suspend_with_flag &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> components.o(i.rt_application_init)
</UL>
<P><STRONG><a name="[127]"></a>rti_board_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_board_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.1.end)
</UL>
<P><STRONG><a name="[125]"></a>rti_board_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_board_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0.end)
</UL>
<P><STRONG><a name="[132]"></a>rti_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.6.end)
</UL>
<P><STRONG><a name="[124]"></a>rti_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0)
</UL>
<P><STRONG><a name="[b8]"></a>idle_thread_entry</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, idle.o(i.idle_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = idle_thread_entry &rArr; rt_defunct_execute &rArr; rt_object_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle.o(i.rt_thread_idle_init)
</UL>
<P><STRONG><a name="[1ee]"></a>_check_and_update_prio</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ipc.o(i._check_and_update_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _check_and_update_prio &rArr; rt_sched_thread_change_priority &rArr; rt_sched_remove_thread &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_get_curr_prio
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_change_priority
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_get_mutex_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_before_delete_detach
</UL>

<P><STRONG><a name="[1f9]"></a>_ipc_object_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ipc.o(i._ipc_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ipc_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sem_object_init
</UL>

<P><STRONG><a name="[204]"></a>_mutex_before_delete_detach</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ipc.o(i._mutex_before_delete_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = _mutex_before_delete_detach &rArr; rt_susp_list_resume_all &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock_n_resched
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_resume_all
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_and_update_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
</UL>

<P><STRONG><a name="[21e]"></a>_rt_mb_recv</STRONG> (Thumb, 496 bytes, Stack size 48 bytes, ipc.o(i._rt_mb_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = _rt_mb_recv &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_critical_level
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_dequeue
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv_interruptible
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
</UL>

<P><STRONG><a name="[229]"></a>_rt_mb_send_wait</STRONG> (Thumb, 482 bytes, Stack size 48 bytes, ipc.o(i._rt_mb_send_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_critical_level
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_dequeue
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</UL>

<P><STRONG><a name="[22a]"></a>_rt_mq_recv</STRONG> (Thumb, 570 bytes, Stack size 40 bytes, ipc.o(i._rt_mq_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = _rt_mq_recv &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_critical_level
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_dequeue
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
</UL>

<P><STRONG><a name="[22c]"></a>_rt_mq_send_wait</STRONG> (Thumb, 564 bytes, Stack size 40 bytes, ipc.o(i._rt_mq_send_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = _rt_mq_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_critical_level
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_dequeue
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
</UL>

<P><STRONG><a name="[22d]"></a>_rt_mutex_take</STRONG> (Thumb, 634 bytes, Stack size 48 bytes, ipc.o(i._rt_mutex_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_critical_level
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_get_curr_prio
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_get_mutex_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>

<P><STRONG><a name="[230]"></a>_rt_sem_take</STRONG> (Thumb, 332 bytes, Stack size 40 bytes, ipc.o(i._rt_sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = _rt_sem_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_critical_level
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>

<P><STRONG><a name="[233]"></a>_sem_object_init</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ipc.o(i._sem_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _sem_object_init &rArr; _ipc_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
</UL>

<P><STRONG><a name="[1f0]"></a>_thread_get_mutex_priority</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ipc.o(i._thread_get_mutex_priority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _thread_get_mutex_priority
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_get_init_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_and_update_prio
</UL>

<P><STRONG><a name="[22e]"></a>_thread_update_priority</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, ipc.o(i._thread_update_priority))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _thread_update_priority &rArr; rt_sched_thread_change_priority &rArr; rt_sched_remove_thread &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_is_suspended
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_get_curr_prio
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_change_priority
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_enqueue
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_get_mutex_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
</UL>

<P><STRONG><a name="[1fa]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ipc.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>

<P><STRONG><a name="[22f]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ipc.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
</UL>

<P><STRONG><a name="[572]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ipc.o(i.rt_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_enqueue
</UL>

<P><STRONG><a name="[227]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ipc.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_dequeue
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mq_send_wait
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mq_recv
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_send_wait
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_recv
</UL>

<P><STRONG><a name="[208]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ipc.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_before_delete_detach
</UL>

<P><STRONG><a name="[1f4]"></a>_heap_lock</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, kservice.o(i._heap_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memory_info
</UL>

<P><STRONG><a name="[1f6]"></a>_heap_unlock</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, kservice.o(i._heap_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = _heap_unlock &rArr; rt_mutex_release &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memory_info
</UL>

<P><STRONG><a name="[1fb]"></a>_kputs</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, kservice.o(i._kputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _kputs &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[14d]"></a>cmd_backtrace</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, kservice.o(i.cmd_backtrace))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = cmd_backtrace &rArr; rt_backtrace_thread &rArr; rt_hw_backtrace_frame_get &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace_thread
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kservice.o(FSymTab)
</UL>
<P><STRONG><a name="[519]"></a>plug_holes</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, mem.o(i.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = plug_holes &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_realloc
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_free
</UL>

<P><STRONG><a name="[b7]"></a>_match_name</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, object.o(i._match_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _match_name &rArr; rt_strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> object.o(i.rt_object_find)
</UL>
<P><STRONG><a name="[55d]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, object.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[55e]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, object.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>

<P><STRONG><a name="[231]"></a>_scheduler_get_highest_priority_thread</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, scheduler_up.o(i._scheduler_get_highest_priority_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _scheduler_get_highest_priority_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[565]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scheduler_up.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_init_priv
</UL>

<P><STRONG><a name="[249]"></a>_thread_detach</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, thread.o(i._thread_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = _thread_detach &rArr; _thread_detach_from_mutex &rArr; rt_mutex_release &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_enqueue
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical_safe
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_close
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach_from_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
</UL>

<P><STRONG><a name="[24c]"></a>_thread_detach_from_mutex</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, thread.o(i._thread_detach_from_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = _thread_detach_from_mutex &rArr; rt_mutex_release &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach
</UL>

<P><STRONG><a name="[7f]"></a>_thread_exit</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, thread.o(i._thread_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = _thread_exit &rArr; _thread_detach_from_mutex &rArr; rt_mutex_release &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_enqueue
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical_safe
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_close
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach_from_mutex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._thread_init)
</UL>
<P><STRONG><a name="[251]"></a>_thread_init</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, thread.o(i._thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = _thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_init
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_init_ctx
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>

<P><STRONG><a name="[255]"></a>_thread_set_suspend_state</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, thread.o(i._thread_set_suspend_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _thread_set_suspend_state &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
</UL>

<P><STRONG><a name="[256]"></a>_thread_sleep</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, thread.o(i._thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = _thread_sleep &rArr; rt_thread_suspend_with_flag &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_with_flag
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_critical_level
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical_safe
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>

<P><STRONG><a name="[80]"></a>_thread_timeout</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, thread.o(i._thread_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = _thread_timeout &rArr; rt_sched_unlock_n_resched &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_insert_thread
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock_n_resched
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_is_suspended
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._thread_init)
</UL>
<P><STRONG><a name="[25b]"></a>_timer_check</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, timer.o(i._timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = _timer_check &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_start
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[262]"></a>_timer_init</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, timer.o(i._timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[25d]"></a>_timer_remove</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, timer.o(i._timer_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_start
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_check
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
</UL>

<P><STRONG><a name="[261]"></a>_timer_start</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, timer.o(i._timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _timer_start &rArr; _timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_check
</UL>

<P><STRONG><a name="[25c]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_init
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_check
</UL>

<P><STRONG><a name="[25e]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_start
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_check
</UL>

<P><STRONG><a name="[25f]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_check
</UL>

<P><STRONG><a name="[260]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_check
</UL>

<P><STRONG><a name="[43e]"></a>__isleap</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ctime.o(i.__isleap))
<BR><BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timegm
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime_r
</UL>

<P><STRONG><a name="[4de]"></a>netconn_apimsg</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, api_lib.o(i.netconn_apimsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
</UL>
<BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
</UL>

<P><STRONG><a name="[4e0]"></a>netconn_close_shutdown</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, api_lib.o(i.netconn_close_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_shutdown
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>

<P><STRONG><a name="[4e5]"></a>netconn_recv_data</STRONG> (Thumb, 374 bytes, Stack size 48 bytes, api_lib.o(i.netconn_recv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
</UL>

<P><STRONG><a name="[97]"></a>accept_function</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, api_msg.o(i.accept_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = accept_function &rArr; netconn_alloc &rArr; sys_mbox_new &rArr; rt_mb_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.lwip_netconn_do_listen)
</UL>
<P><STRONG><a name="[94]"></a>err_tcp</STRONG> (Thumb, 376 bytes, Stack size 32 bytes, api_msg.o(i.err_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = err_tcp &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_msg.o(i.lwip_netconn_do_close_internal)
<LI> api_msg.o(i.setup_tcp)
</UL>
<P><STRONG><a name="[49a]"></a>lwip_netconn_do_close_internal</STRONG> (Thumb, 642 bytes, Stack size 48 bytes, api_msg.o(i.lwip_netconn_do_close_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
</UL>

<P><STRONG><a name="[95]"></a>lwip_netconn_do_connected</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, api_msg.o(i.lwip_netconn_do_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = lwip_netconn_do_connected &rArr; sys_sem_signal &rArr; rt_sem_release &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.lwip_netconn_do_connect)
</UL>
<P><STRONG><a name="[96]"></a>lwip_netconn_do_dns_found</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, api_msg.o(i.lwip_netconn_do_dns_found))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = lwip_netconn_do_dns_found &rArr; sys_sem_signal &rArr; rt_sem_release &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.lwip_netconn_do_gethostbyname)
</UL>
<P><STRONG><a name="[4ac]"></a>lwip_netconn_do_writemore</STRONG> (Thumb, 668 bytes, Stack size 56 bytes, api_msg.o(i.lwip_netconn_do_writemore))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = lwip_netconn_do_writemore &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
</UL>

<P><STRONG><a name="[499]"></a>netconn_drain</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, api_msg.o(i.netconn_drain))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328 + In Cycle
<LI>Call Chain = netconn_drain &rArr;  netconn_drain (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
</UL>

<P><STRONG><a name="[4a7]"></a>pcb_new</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, api_msg.o(i.pcb_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = pcb_new &rArr; tcp_new_ip_type &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_ip_type
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_ip_type
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_recv
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new_ip_type
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
</UL>

<P><STRONG><a name="[93]"></a>poll_tcp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, api_msg.o(i.poll_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = poll_tcp &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_msg.o(i.lwip_netconn_do_close_internal)
<LI> api_msg.o(i.setup_tcp)
</UL>
<P><STRONG><a name="[aa]"></a>recv_raw</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, api_msg.o(i.recv_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = recv_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.pcb_new)
</UL>
<P><STRONG><a name="[c5]"></a>recv_tcp</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, api_msg.o(i.recv_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = recv_tcp &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.setup_tcp)
</UL>
<P><STRONG><a name="[ab]"></a>recv_udp</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, api_msg.o(i.recv_udp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = recv_udp &rArr; netbuf_delete &rArr; pbuf_free &rArr; mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.pcb_new)
</UL>
<P><STRONG><a name="[92]"></a>sent_tcp</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, api_msg.o(i.sent_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = sent_tcp &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_msg.o(i.lwip_netconn_do_close_internal)
<LI> api_msg.o(i.setup_tcp)
</UL>
<P><STRONG><a name="[27d]"></a>setup_tcp</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, api_msg.o(i.setup_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = setup_tcp &rArr; tcp_sent &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
</UL>

<P><STRONG><a name="[a6]"></a>netifapi_do_netif_add</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, netifapi.o(i.netifapi_do_netif_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = netifapi_do_netif_add &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netifapi.o(i.netifapi_netif_add)
</UL>
<P><STRONG><a name="[a7]"></a>netifapi_do_netif_common</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, netifapi.o(i.netifapi_do_netif_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netifapi_do_netif_common
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netifapi.o(i.netifapi_netif_common)
</UL>
<P><STRONG><a name="[286]"></a>alloc_socket</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, sockets.o(i.alloc_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = alloc_socket &rArr; sys_arch_unprotect &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[98]"></a>event_callback</STRONG> (Thumb, 436 bytes, Stack size 40 bytes, sockets.o(i.event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = event_callback &rArr; sys_sem_signal &rArr; rt_sem_release &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(i.lwip_socket)
</UL>
<P><STRONG><a name="[426]"></a>free_socket</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, sockets.o(i.free_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = free_socket &rArr; netbuf_delete &rArr; pbuf_free &rArr; mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[3e0]"></a>get_socket</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sockets.o(i.get_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_fcntl
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
</UL>

<P><STRONG><a name="[488]"></a>lwip_getaddrname</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, sockets.o(i.lwip_getaddrname))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = lwip_getaddrname &rArr; netconn_getaddr &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockname
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getpeername
</UL>

<P><STRONG><a name="[48a]"></a>lwip_getsockopt_impl</STRONG> (Thumb, 960 bytes, Stack size 40 bytes, sockets.o(i.lwip_getsockopt_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lwip_getsockopt_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
</UL>

<P><STRONG><a name="[4be]"></a>lwip_setsockopt_impl</STRONG> (Thumb, 732 bytes, Stack size 32 bytes, sockets.o(i.lwip_setsockopt_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lwip_setsockopt_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
</UL>

<P><STRONG><a name="[48c]"></a>tryget_socket</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, sockets.o(i.tryget_socket))
<BR><BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tryget_socket
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_impl
</UL>

<P><STRONG><a name="[c9]"></a>tcpip_thread</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, tcpip.o(i.tcpip_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = tcpip_thread &rArr; sys_timeouts_mbox_fetch &rArr; sys_arch_mbox_fetch &rArr; rt_mb_recv_interruptible &rArr; _rt_mb_recv &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(i.tcpip_init)
</UL>
<P><STRONG><a name="[38f]"></a>dns_alloc_pcb</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, dns.o(i.dns_alloc_pcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = dns_alloc_pcb &rArr; dns_alloc_random_port &rArr; udp_new_ip_type &rArr; udp_new &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_random_port
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
</UL>

<P><STRONG><a name="[390]"></a>dns_alloc_random_port</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dns.o(i.dns_alloc_random_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = dns_alloc_random_port &rArr; udp_new_ip_type &rArr; udp_new &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_ip_type
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_pcb
</UL>

<P><STRONG><a name="[392]"></a>dns_call_found</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, dns.o(i.dns_call_found))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = dns_call_found &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_correct_response
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>

<P><STRONG><a name="[393]"></a>dns_check_entries</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dns.o(i.dns_check_entries))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = dns_check_entries &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tmr
</UL>

<P><STRONG><a name="[394]"></a>dns_check_entry</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, dns.o(i.dns_check_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_create_txid
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entries
</UL>

<P><STRONG><a name="[397]"></a>dns_compare_name</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, dns.o(i.dns_compare_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = dns_compare_name &rArr; pbuf_try_get_at &rArr; pbuf_skip_const
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_try_get_at
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[399]"></a>dns_correct_response</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dns.o(i.dns_correct_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = dns_correct_response &rArr; dns_call_found &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[395]"></a>dns_create_txid</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dns.o(i.dns_create_txid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dns_create_txid
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>

<P><STRONG><a name="[39a]"></a>dns_enqueue</STRONG> (Thumb, 388 bytes, Stack size 64 bytes, dns.o(i.dns_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_pcb
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_strnicmp
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
</UL>

<P><STRONG><a name="[39e]"></a>dns_lookup</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, dns.o(i.dns_lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = dns_lookup &rArr; lwip_strnicmp
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_strnicmp
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
</UL>

<P><STRONG><a name="[84]"></a>dns_recv</STRONG> (Thumb, 456 bytes, Stack size 72 bytes, dns.o(i.dns_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = dns_recv &rArr; pbuf_free &rArr; mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_skip_name
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_correct_response
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_compare_name
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dns.o(i.dns_alloc_random_port)
</UL>
<P><STRONG><a name="[396]"></a>dns_send</STRONG> (Thumb, 326 bytes, Stack size 72 bytes, dns.o(i.dns_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_put_at
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>

<P><STRONG><a name="[3a0]"></a>dns_skip_name</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, dns.o(i.dns_skip_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = dns_skip_name &rArr; pbuf_try_get_at &rArr; pbuf_skip_const
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_try_get_at
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[45f]"></a>inet_cksum_pseudo_base</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, inet_chksum.o(i.inet_cksum_pseudo_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = inet_cksum_pseudo_base &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>

<P><STRONG><a name="[3a7]"></a>do_memp_free_pool</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, memp.o(i.do_memp_free_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element_underflow
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element_overflow
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>

<P><STRONG><a name="[3aa]"></a>do_memp_malloc_pool_fn</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, memp.o(i.do_memp_malloc_pool_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element_underflow
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element_overflow
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
</UL>

<P><STRONG><a name="[3a8]"></a>memp_overflow_check_element_overflow</STRONG> (Thumb, 80 bytes, Stack size 152 bytes, memp.o(i.memp_overflow_check_element_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = memp_overflow_check_element_overflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool_fn
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
</UL>

<P><STRONG><a name="[3a9]"></a>memp_overflow_check_element_underflow</STRONG> (Thumb, 76 bytes, Stack size 152 bytes, memp.o(i.memp_overflow_check_element_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool_fn
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
</UL>

<P><STRONG><a name="[4ce]"></a>memp_overflow_init_element</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, memp.o(i.memp_overflow_init_element))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = memp_overflow_init_element
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init_pool
</UL>

<P><STRONG><a name="[501]"></a>netif_issue_reports</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, netif.o(i.netif_issue_reports))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = netif_issue_reports &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[510]"></a>pbuf_free_ooseq</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_free_ooseq))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = pbuf_free_ooseq &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq_callback
</UL>

<P><STRONG><a name="[a9]"></a>pbuf_free_ooseq_callback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_free_ooseq_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = pbuf_free_ooseq_callback &rArr; pbuf_free_ooseq &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pbuf.o(i.pbuf_pool_is_empty)
</UL>
<P><STRONG><a name="[512]"></a>pbuf_header_impl</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_header_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = pbuf_header_impl &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>

<P><STRONG><a name="[50d]"></a>pbuf_pool_is_empty</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_pool_is_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[515]"></a>pbuf_skip_const</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, pbuf.o(i.pbuf_skip_const))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pbuf_skip_const
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_try_get_at
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip
</UL>

<P><STRONG><a name="[525]"></a>raw_input_match</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, raw.o(i.raw_input_match))
<BR><BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
</UL>

<P><STRONG><a name="[c7]"></a>tcp_accept_null</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tcp.o(i.tcp_accept_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = tcp_accept_null &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(i.tcp_listen_with_backlog_and_err)
</UL>
<P><STRONG><a name="[5e5]"></a>tcp_close_shutdown</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, tcp.o(i.tcp_close_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_trigger_input_pcb_close
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_closed
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[5e9]"></a>tcp_close_shutdown_fin</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, tcp.o(i.tcp_close_shutdown_fin))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
</UL>
<BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[5e2]"></a>tcp_kill_prio</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, tcp.o(i.tcp_kill_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[5e1]"></a>tcp_kill_state</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, tcp.o(i.tcp_kill_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = tcp_kill_state &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[5e0]"></a>tcp_kill_timewait</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tcp.o(i.tcp_kill_timewait))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = tcp_kill_timewait &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[5e8]"></a>tcp_listen_closed</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tcp.o(i.tcp_listen_closed))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = tcp_listen_closed &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_remove_listener
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[5fc]"></a>tcp_netif_ip_addr_changed_pcblist</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, tcp.o(i.tcp_netif_ip_addr_changed_pcblist))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed
</UL>

<P><STRONG><a name="[5e3]"></a>tcp_new_port</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, tcp.o(i.tcp_new_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
</UL>

<P><STRONG><a name="[5fa]"></a>tcp_remove_listener</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tcp.o(i.tcp_remove_listener))
<BR><BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_closed
</UL>

<P><STRONG><a name="[5ff]"></a>tcp_getoptbyte</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, tcp_in.o(i.tcp_getoptbyte))
<BR><BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
</UL>

<P><STRONG><a name="[5f7]"></a>tcp_input_delayed_close</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, tcp_in.o(i.tcp_input_delayed_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = tcp_input_delayed_close &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[5f4]"></a>tcp_listen_input</STRONG> (Thumb, 298 bytes, Stack size 32 bytes, tcp_in.o(i.tcp_listen_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[5fd]"></a>tcp_oos_insert_segment</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, tcp_in.o(i.tcp_oos_insert_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = tcp_oos_insert_segment &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[5fb]"></a>tcp_parseopt</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, tcp_in.o(i.tcp_parseopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_parseopt
</UL>
<BR>[Calls]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_getoptbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[5f6]"></a>tcp_process</STRONG> (Thumb, 1702 bytes, Stack size 32 bytes, tcp_in.o(i.tcp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[602]"></a>tcp_receive</STRONG> (Thumb, 3376 bytes, Stack size 48 bytes, tcp_in.o(i.tcp_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = tcp_receive &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[5f3]"></a>tcp_timewait_input</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, tcp_in.o(i.tcp_timewait_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = tcp_timewait_input &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[5ee]"></a>tcp_create_segment</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_create_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[5f9]"></a>tcp_output_alloc_header</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_output_alloc_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
</UL>

<P><STRONG><a name="[5fe]"></a>tcp_output_segment</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, tcp_out.o(i.tcp_output_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[600]"></a>tcp_pbuf_prealloc</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, tcp_out.o(i.tcp_pbuf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[609]"></a>tcp_write_checks</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_write_checks))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = tcp_write_checks &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[82]"></a>cyclic_timer</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, timeouts.o(i.cyclic_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = cyclic_timer &rArr; sys_timeout &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timeouts.o(i.sys_timeouts_init)
<LI> timeouts.o(i.cyclic_timer)
</UL>
<P><STRONG><a name="[5cb]"></a>sys_check_timeouts</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, timeouts.o(i.sys_check_timeouts))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = sys_check_timeouts &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
</UL>

<P><STRONG><a name="[5d0]"></a>sys_timeouts_sleeptime</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, timeouts.o(i.sys_timeouts_sleeptime))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sys_timeouts_sleeptime &rArr; sys_now &rArr; rt_tick_get_millisecond &rArr; rt_tick_get
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
</UL>
<BR>[Called By]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
</UL>

<P><STRONG><a name="[c8]"></a>tcpip_tcp_timer</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, timeouts.o(i.tcpip_tcp_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = tcpip_tcp_timer &rArr; tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timeouts.o(i.tcp_timer_needed)
<LI> timeouts.o(i.tcpip_tcp_timer)
</UL>
<P><STRONG><a name="[60d]"></a>udp_input_local_match</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, udp.o(i.udp_input_local_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = udp_input_local_match
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[60c]"></a>udp_new_port</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, udp.o(i.udp_new_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>

<P><STRONG><a name="[34b]"></a>dhcp_bind</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = dhcp_bind &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[34e]"></a>dhcp_check</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = dhcp_check &rArr; etharp_query &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[354]"></a>dhcp_create_msg</STRONG> (Thumb, 452 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_create_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = dhcp_create_msg &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[35a]"></a>dhcp_dec_pcb_refcount</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_dec_pcb_refcount))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = dhcp_dec_pcb_refcount &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[34a]"></a>dhcp_decline</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_decline))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = dhcp_decline &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
</UL>

<P><STRONG><a name="[360]"></a>dhcp_delete_msg</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_delete_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = dhcp_delete_msg &rArr; pbuf_free &rArr; mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[351]"></a>dhcp_discover</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_discover))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = dhcp_discover &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[364]"></a>dhcp_handle_ack</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_handle_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = dhcp_handle_ack &rArr; dns_setserver &rArr; netdev_get_by_name &rArr; rt_spin_unlock &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[366]"></a>dhcp_handle_nak</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_handle_nak))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = dhcp_handle_nak &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[367]"></a>dhcp_handle_offer</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_handle_offer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = dhcp_handle_offer &rArr; dhcp_select &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[369]"></a>dhcp_inc_pcb_refcount</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_inc_pcb_refcount))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = dhcp_inc_pcb_refcount &rArr; udp_new &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[358]"></a>dhcp_option</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = dhcp_option &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_hostname
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>

<P><STRONG><a name="[359]"></a>dhcp_option_byte</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_option_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = dhcp_option_byte &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_hostname
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>

<P><STRONG><a name="[370]"></a>dhcp_option_hostname</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_option_hostname))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = dhcp_option_hostname &rArr; dhcp_option_byte &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
</UL>

<P><STRONG><a name="[35c]"></a>dhcp_option_long</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_option_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = dhcp_option_long &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[362]"></a>dhcp_option_short</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_option_short))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = dhcp_option_short &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[35d]"></a>dhcp_option_trailer</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_option_trailer))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = dhcp_option_trailer &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[371]"></a>dhcp_parse_reply</STRONG> (Thumb, 1382 bytes, Stack size 80 bytes, dhcp.o(i.dhcp_parse_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = dhcp_parse_reply &rArr; pbuf_copy_partial &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[373]"></a>dhcp_rebind</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_rebind))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = dhcp_rebind &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_hostname
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t2_timeout
</UL>

<P><STRONG><a name="[36f]"></a>dhcp_reboot</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = dhcp_reboot &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[83]"></a>dhcp_recv</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, dhcp.o(i.dhcp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = dhcp_recv &rArr; dhcp_bind &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dhcp.o(i.dhcp_inc_pcb_refcount)
</UL>
<P><STRONG><a name="[368]"></a>dhcp_select</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, dhcp.o(i.dhcp_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = dhcp_select &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_hostname
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
</UL>

<P><STRONG><a name="[34c]"></a>dhcp_set_state</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_set_state))
<BR><BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[353]"></a>dhcp_t1_timeout</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_t1_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = dhcp_t1_timeout &rArr; dhcp_renew &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[352]"></a>dhcp_t2_timeout</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_t2_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = dhcp_t2_timeout &rArr; dhcp_rebind &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[363]"></a>dhcp_timeout</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = dhcp_timeout &rArr; dhcp_release &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</UL>

<P><STRONG><a name="[3d0]"></a>etharp_find_entry</STRONG> (Thumb, 494 bytes, Stack size 48 bytes, etharp.o(i.etharp_find_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = etharp_find_entry &rArr; etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[3cf]"></a>etharp_free_entry</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, etharp.o(i.etharp_free_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_cleanup_netif
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
</UL>

<P><STRONG><a name="[3d6]"></a>etharp_output_to_arp_index</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, etharp.o(i.etharp_output_to_arp_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = etharp_output_to_arp_index &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request_dst
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[3d4]"></a>etharp_raw</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, etharp.o(i.etharp_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request_dst
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
</UL>

<P><STRONG><a name="[3d9]"></a>etharp_request_dst</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, etharp.o(i.etharp_request_dst))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>

<P><STRONG><a name="[3d3]"></a>etharp_update_arp_entry</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, etharp.o(i.etharp_update_arp_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = etharp_update_arp_entry &rArr; etharp_find_entry &rArr; etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
</UL>

<P><STRONG><a name="[3d1]"></a>free_etharp_q</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, etharp.o(i.free_etharp_q))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = free_etharp_q &rArr; pbuf_free &rArr; mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>

<P><STRONG><a name="[454]"></a>icmp_send_response</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, icmp.o(i.icmp_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = icmp_send_response &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route_src
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</UL>

<P><STRONG><a name="[4b6]"></a>ping_prepare_echo</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ping.o(i.ping_prepare_echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ping_prepare_echo &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ping_send
</UL>

<P><STRONG><a name="[87]"></a>eth_netif_device_init</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, ethernetif.o(i.eth_netif_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = eth_netif_device_init &rArr; netif_set_link_up &rArr; dhcp_network_changed &rArr; dhcp_reboot &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_flags_sync
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.eth_device_init_with_flag)
</UL>
<P><STRONG><a name="[8b]"></a>eth_rx_thread_entry</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, ethernetif.o(i.eth_rx_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = eth_rx_thread_entry &rArr; netifapi_netif_common &rArr; tcpip_api_call &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_common
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.eth_system_device_init_private)
</UL>
<P><STRONG><a name="[8c]"></a>eth_tx_thread_entry</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, ethernetif.o(i.eth_tx_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = eth_tx_thread_entry &rArr; rt_mb_recv &rArr; _rt_mb_recv &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.eth_system_device_init_private)
</UL>
<P><STRONG><a name="[85]"></a>ethernetif_linkoutput</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, ethernetif.o(i.ethernetif_linkoutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = ethernetif_linkoutput &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.eth_device_init_with_flag)
</UL>
<P><STRONG><a name="[106]"></a>lwip_netdev_set_addr_info</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ethernetif.o(i.lwip_netdev_set_addr_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = lwip_netdev_set_addr_info &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.constdata)
</UL>
<P><STRONG><a name="[10b]"></a>lwip_netdev_set_default</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ethernetif.o(i.lwip_netdev_set_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lwip_netdev_set_default
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.constdata)
</UL>
<P><STRONG><a name="[108]"></a>lwip_netdev_set_dhcp</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ethernetif.o(i.lwip_netdev_set_dhcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = lwip_netdev_set_dhcp &rArr; dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_dhcp_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.constdata)
</UL>
<P><STRONG><a name="[107]"></a>lwip_netdev_set_dns_server</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ethernetif.o(i.lwip_netdev_set_dns_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = lwip_netdev_set_dns_server &rArr; dns_setserver &rArr; netdev_get_by_name &rArr; rt_spin_unlock &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.constdata)
</UL>
<P><STRONG><a name="[105]"></a>lwip_netdev_set_down</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ethernetif.o(i.lwip_netdev_set_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = lwip_netdev_set_down &rArr; netif_set_down &rArr; etharp_cleanup_netif &rArr; etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.constdata)
</UL>
<P><STRONG><a name="[104]"></a>lwip_netdev_set_up</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ethernetif.o(i.lwip_netdev_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = lwip_netdev_set_up &rArr; netif_set_up &rArr; netif_issue_reports &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; _rt_mb_send_wait &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.constdata)
</UL>
<P><STRONG><a name="[3c3]"></a>netdev_add</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, ethernetif.o(i.netdev_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = netdev_add &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_lwip_netdev_set_pf_info
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_register
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_flags_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_netif_device_init
</UL>

<P><STRONG><a name="[3c7]"></a>netdev_flags_sync</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, ethernetif.o(i.netdev_flags_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = netdev_flags_sync &rArr; netdev_get_by_name &rArr; rt_spin_unlock &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_dhcp_status
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_add
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_netif_device_init
</UL>

<P><STRONG><a name="[99]"></a>tcpip_init_done_callback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(i.tcpip_init_done_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = tcpip_init_done_callback &rArr; rt_sem_release &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(i.lwip_system_init)
</UL>
<P><STRONG><a name="[4e8]"></a>netdev_auto_change_default</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, netdev.o(i.netdev_auto_change_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = netdev_auto_change_default &rArr; netdev_get_first_by_flags &rArr; rt_spin_unlock &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcmp
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_default
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_first_by_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_status
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_link_status
</UL>

<P><STRONG><a name="[4eb]"></a>netdev_cmd_netstat</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, netdev.o(i.netdev_cmd_netstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = netdev_cmd_netstat &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_netstat
</UL>

<P><STRONG><a name="[4f1]"></a>netdev_list_dns</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, netdev.o(i.netdev_list_dns))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = netdev_list_dns &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_ntoa
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_dns
</UL>

<P><STRONG><a name="[4f5]"></a>netdev_list_if</STRONG> (Thumb, 454 bytes, Stack size 24 bytes, netdev.o(i.netdev_list_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = netdev_list_if &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_ntoa
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ifconfig
</UL>

<P><STRONG><a name="[4f2]"></a>netdev_set_dns</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, netdev.o(i.netdev_set_dns))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = netdev_set_dns &rArr; netdev_get_by_name &rArr; rt_spin_unlock &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_dns_server
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_aton
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_dns
</UL>

<P><STRONG><a name="[4f6]"></a>netdev_set_if</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, netdev.o(i.netdev_set_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = netdev_set_if &rArr; netdev_dhcp_close &rArr; netdev_get_by_name &rArr; rt_spin_unlock &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_netmask
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_ipaddr
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_gw
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_aton
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_dhcp_close
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ifconfig
</UL>

<P><STRONG><a name="[4ec]"></a>rt_slist_next</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netdev.o(i.rt_slist_next))
<BR><BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_first_by_flags
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_ipaddr
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_family
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_list_if
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_list_dns
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_netstat
</UL>

<P><STRONG><a name="[152]"></a>cmd_ntp_sync</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ntp.o(i.cmd_ntp_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = cmd_ntp_sync &rArr; ntp_sync_to_rtc &rArr; ntp_get_time &rArr; socket &rArr; sal_socket &rArr; socket_new &rArr; socket_alloc &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync_to_rtc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ntp.o(FSymTab)
</UL>
<P><STRONG><a name="[12d]"></a>ntp_auto_sync_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ntp.o(i.ntp_auto_sync_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = ntp_auto_sync_init &rArr; rt_work_submit &rArr; rt_workqueue_submit_work &rArr; _workqueue_submit_work &rArr; rt_completion_done &rArr; rt_completion_wakeup_by_errno &rArr; rt_thread_resume &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_work_submit
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_work_init
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ntp.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[508]"></a>ntp_check_network</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ntp.o(i.ntp_check_network))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = ntp_check_network &rArr; netdev_get_by_family &rArr; rt_spin_unlock &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_family
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync_work_func
</UL>

<P><STRONG><a name="[a8]"></a>ntp_sync_work_func</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ntp.o(i.ntp_sync_work_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = ntp_sync_work_func &rArr; ntp_sync_to_rtc &rArr; ntp_get_time &rArr; socket &rArr; sal_socket &rArr; socket_new &rArr; socket_alloc &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_work_submit
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_check_network
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync_to_rtc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ntp.o(i.ntp_auto_sync_init)
</UL>
<P><STRONG><a name="[50b]"></a>sendto_ntp_server</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, ntp.o(i.sendto_ntp_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = sendto_ntp_server &rArr; sendto &rArr; dfs_net_getsocket &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
</UL>

<P><STRONG><a name="[5a8]"></a>root_hub_ctrl</STRONG> (Thumb, 350 bytes, Stack size 24 bytes, hub.o(i.root_hub_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = root_hub_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_set_port_feature
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_get_port_status
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_clear_port_feature
</UL>

<P><STRONG><a name="[5a9]"></a>rt_usb_hcd_setup_xfer</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, hub.o(i.rt_usb_hcd_setup_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_usb_hcd_setup_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_set_port_feature
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_get_port_status
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_get_descriptor
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_clear_port_feature
</UL>

<P><STRONG><a name="[be]"></a>rt_usbh_hub_disable</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, hub.o(i.rt_usbh_hub_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = rt_usbh_hub_disable &rArr; rt_usbh_detach_instance &rArr; rt_usb_hcd_free_pipe &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_detach_instance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hub.o(i.rt_usbh_class_driver_hub)
</UL>
<P><STRONG><a name="[bd]"></a>rt_usbh_hub_enable</STRONG> (Thumb, 372 bytes, Stack size 48 bytes, hub.o(i.rt_usbh_hub_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = rt_usbh_hub_enable &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_get_endpoint_descriptor
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_pipe_xfer
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_set_port_feature
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_get_descriptor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hub.o(i.rt_usbh_class_driver_hub)
</UL>
<P><STRONG><a name="[c1]"></a>rt_usbh_hub_irq</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, hub.o(i.rt_usbh_hub_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 3200<LI>Call Chain = rt_usbh_hub_irq &rArr; rt_usbh_hub_port_change &rArr; rt_usbh_attatch_instance &rArr; rt_usb_hcd_alloc_pipe &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_pipe_xfer
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_port_change
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hub.o(i.rt_usbh_hub_enable)
</UL>
<P><STRONG><a name="[5ad]"></a>rt_usbh_hub_port_change</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, hub.o(i.rt_usbh_hub_port_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 3176<LI>Call Chain = rt_usbh_hub_port_change &rArr; rt_usbh_attatch_instance &rArr; rt_usb_hcd_alloc_pipe &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_detach_instance
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_alloc_instance
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_reset_port
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_port_debounce
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_get_port_status
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_clear_port_feature
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_thread_entry
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_irq
</UL>

<P><STRONG><a name="[c2]"></a>rt_usbh_hub_thread_entry</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, hub.o(i.rt_usbh_hub_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 3192<LI>Call Chain = rt_usbh_hub_thread_entry &rArr; rt_usbh_hub_port_change &rArr; rt_usbh_attatch_instance &rArr; rt_usb_hcd_alloc_pipe &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_port_change
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hub.o(i.rt_usbh_hub_init)
</UL>
<P><STRONG><a name="[591]"></a>rt_usb_hcd_alloc_pipe</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, usbhost_core.o(i.rt_usb_hcd_alloc_pipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = rt_usb_hcd_alloc_pipe &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
</UL>

<P><STRONG><a name="[592]"></a>rt_usb_hcd_free_pipe</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbhost_core.o(i.rt_usb_hcd_free_pipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = rt_usb_hcd_free_pipe &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_detach_instance
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
</UL>

<P><STRONG><a name="[5a5]"></a>rt_usb_hcd_setup_xfer</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, usbhost_core.o(i.rt_usb_hcd_setup_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_usb_hcd_setup_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_set_configure
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_set_address
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_get_descriptor
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_clear_feature
</UL>

<P><STRONG><a name="[598]"></a>rt_usb_instance_add_pipe</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usbhost_core.o(i.rt_usb_instance_add_pipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_usb_instance_add_pipe &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
</UL>

<P><STRONG><a name="[218]"></a>_pipe_check</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, mass.o(i._pipe_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = _pipe_check &rArr; rt_thread_delay &rArr; _thread_sleep &rArr; rt_thread_suspend_with_flag &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_clear_feature
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_pipe_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_bulk_only_xfer
</UL>

<P><STRONG><a name="[590]"></a>rt_usb_bulk_only_xfer</STRONG> (Thumb, 278 bytes, Stack size 56 bytes, mass.o(i.rt_usb_bulk_only_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = rt_usb_bulk_only_xfer &rArr; _pipe_check &rArr; rt_thread_delay &rArr; _thread_sleep &rArr; rt_thread_suspend_with_flag &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pipe_check
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_pipe_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_write10
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_test_unit_ready
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_request_sense
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_read10
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_inquiry
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_get_capacity
</UL>

<P><STRONG><a name="[5b2]"></a>rt_usb_hcd_setup_xfer</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, mass.o(i.rt_usb_hcd_setup_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_usb_hcd_setup_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_reset
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_get_max_lun
</UL>

<P><STRONG><a name="[5b1]"></a>rt_usb_instance_find_pipe</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mass.o(i.rt_usb_instance_find_pipe))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_enable
</UL>

<P><STRONG><a name="[c0]"></a>rt_usbh_storage_disable</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, mass.o(i.rt_usbh_storage_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = rt_usbh_storage_disable &rArr; rt_udisk_stop &rArr; dfs_unmount &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mass.o(i.rt_usbh_class_driver_storage)
</UL>
<P><STRONG><a name="[bf]"></a>rt_usbh_storage_enable</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, mass.o(i.rt_usbh_storage_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = rt_usbh_storage_enable &rArr; rt_udisk_run &rArr; dfs_mount &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_instance_find_pipe
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_get_endpoint_descriptor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mass.o(i.rt_usbh_class_driver_storage)
</UL>
<P><STRONG><a name="[bc]"></a>rt_udisk_control</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, udisk.o(i.rt_udisk_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_udisk_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> udisk.o(i.rt_udisk_run)
</UL>
<P><STRONG><a name="[b9]"></a>rt_udisk_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udisk.o(i.rt_udisk_init))
<BR>[Address Reference Count : 1]<UL><LI> udisk.o(i.rt_udisk_run)
</UL>
<P><STRONG><a name="[ba]"></a>rt_udisk_read</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, udisk.o(i.rt_udisk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = rt_udisk_read &rArr; rt_usbh_storage_read10 &rArr; rt_usb_bulk_only_xfer &rArr; _pipe_check &rArr; rt_thread_delay &rArr; _thread_sleep &rArr; rt_thread_suspend_with_flag &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_read10
</UL>
<BR>[Address Reference Count : 1]<UL><LI> udisk.o(i.rt_udisk_run)
</UL>
<P><STRONG><a name="[bb]"></a>rt_udisk_write</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, udisk.o(i.rt_udisk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = rt_udisk_write &rArr; rt_usbh_storage_write10 &rArr; rt_usb_bulk_only_xfer &rArr; _pipe_check &rArr; rt_thread_delay &rArr; _thread_sleep &rArr; rt_thread_suspend_with_flag &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_write10
</UL>
<BR>[Address Reference Count : 1]<UL><LI> udisk.o(i.rt_udisk_run)
</UL>
<P><STRONG><a name="[58e]"></a>udisk_free_id</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, udisk.o(i.udisk_free_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = udisk_free_id &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_stop
</UL>

<P><STRONG><a name="[58c]"></a>udisk_get_id</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, udisk.o(i.udisk_get_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = udisk_get_id &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
</UL>

<P><STRONG><a name="[153]"></a>eth_rndis_frame_debug</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rndis_dev.o(i.eth_rndis_frame_debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = eth_rndis_frame_debug &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rndis_dev.o(FSymTab)
</UL>
<P><STRONG><a name="[cf]"></a>rt_rndis_eth_close</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rndis_dev.o(i.rt_rndis_eth_close))
<BR>[Address Reference Count : 1]<UL><LI> rndis_dev.o(i.usbh_rndis_eth_device_init)
</UL>
<P><STRONG><a name="[d2]"></a>rt_rndis_eth_control</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, rndis_dev.o(i.rt_rndis_eth_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_rndis_eth_control &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rndis_dev.o(i.usbh_rndis_eth_device_init)
</UL>
<P><STRONG><a name="[cd]"></a>rt_rndis_eth_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rndis_dev.o(i.rt_rndis_eth_init))
<BR>[Address Reference Count : 1]<UL><LI> rndis_dev.o(i.usbh_rndis_eth_device_init)
</UL>
<P><STRONG><a name="[ce]"></a>rt_rndis_eth_open</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rndis_dev.o(i.rt_rndis_eth_open))
<BR>[Address Reference Count : 1]<UL><LI> rndis_dev.o(i.usbh_rndis_eth_device_init)
</UL>
<P><STRONG><a name="[d0]"></a>rt_rndis_eth_read</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, rndis_dev.o(i.rt_rndis_eth_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_rndis_eth_read &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rndis_dev.o(i.usbh_rndis_eth_device_init)
</UL>
<P><STRONG><a name="[d1]"></a>rt_rndis_eth_write</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, rndis_dev.o(i.rt_rndis_eth_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_rndis_eth_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rndis_dev.o(i.usbh_rndis_eth_device_init)
</UL>
<P><STRONG><a name="[561]"></a>rt_rndis_msg_data_send</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, rndis_dev.o(i.rt_rndis_msg_data_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = rt_rndis_msg_data_send &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_rndis_bulk_send
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rndis_eth_tx
</UL>

<P><STRONG><a name="[10c]"></a>dfs_net_close</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, dfs_net.o(i.dfs_net_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = dfs_net_close &rArr; sal_closesocket &rArr; socket_delete &rArr; socket_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_closesocket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_net.o(.constdata)
</UL>
<P><STRONG><a name="[10d]"></a>dfs_net_ioctl</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, dfs_net.o(i.dfs_net_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = dfs_net_ioctl &rArr; sal_ioctlsocket &rArr; netdev_get_by_name &rArr; rt_spin_unlock &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_errno
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_ioctlsocket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_net.o(.constdata)
</UL>
<P><STRONG><a name="[110]"></a>dfs_net_poll</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, dfs_net.o(i.dfs_net_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dfs_net_poll &rArr; sal_poll &rArr; sal_get_socket &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_poll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_net.o(.constdata)
</UL>
<P><STRONG><a name="[10e]"></a>dfs_net_read</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, dfs_net.o(i.dfs_net_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dfs_net_read &rArr; sal_recvfrom &rArr; sal_get_socket &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_errno
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_recvfrom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_net.o(.constdata)
</UL>
<P><STRONG><a name="[10f]"></a>dfs_net_write</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, dfs_net.o(i.dfs_net_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dfs_net_write &rArr; sal_sendto &rArr; sal_get_socket &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_errno
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_sendto
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_net.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>check_netdev_internet_up_work</STRONG> (Thumb, 462 bytes, Stack size 160 bytes, sal_socket.o(i.check_netdev_internet_up_work))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = check_netdev_internet_up_work &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcmp
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_internet_status
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sal_socket.o(i.sal_check_netdev_internet_up)
</UL>
<P><STRONG><a name="[5bf]"></a>rt_slist_next</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sal_socket.o(i.rt_slist_next))
<BR><BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_ioctlsocket
</UL>

<P><STRONG><a name="[5c1]"></a>sal_lock</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sal_socket.o(i.sal_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = sal_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_new
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_delete
</UL>

<P><STRONG><a name="[5be]"></a>sal_sockaddr_to_ipaddr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sal_socket.o(i.sal_sockaddr_to_ipaddr))
<BR><BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_ioctlsocket
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_bind
</UL>

<P><STRONG><a name="[5c4]"></a>sal_unlock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sal_socket.o(i.sal_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = sal_unlock &rArr; rt_mutex_release &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_new
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_delete
</UL>

<P><STRONG><a name="[5c9]"></a>socket_alloc</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, sal_socket.o(i.socket_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = socket_alloc &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_new
</UL>

<P><STRONG><a name="[5bd]"></a>socket_delete</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, sal_socket.o(i.socket_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = socket_delete &rArr; socket_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_free
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_unlock
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_closesocket
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_socket
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_accept
</UL>

<P><STRONG><a name="[5ca]"></a>socket_free</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sal_socket.o(i.socket_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = socket_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_delete
</UL>

<P><STRONG><a name="[5bc]"></a>socket_init</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, sal_socket.o(i.socket_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = socket_init &rArr; netdev_get_by_family &rArr; rt_spin_unlock &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_family
</UL>
<BR>[Called By]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_socket
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_accept
</UL>

<P><STRONG><a name="[5bb]"></a>socket_new</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sal_socket.o(i.socket_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = socket_new &rArr; socket_alloc &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_alloc
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_unlock
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_socket
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_accept
</UL>

<P><STRONG><a name="[91]"></a>event_callback</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, af_inet_lwip.o(i.event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = event_callback &rArr; rt_wqueue_wakeup &rArr; rt_thread_resume &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tryget_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_lwip.o(i.inet_socket)
</UL>
<P><STRONG><a name="[116]"></a>inet_accept</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, af_inet_lwip.o(i.inet_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = inet_accept &rArr; lwip_accept &rArr; netconn_delete &rArr; netconn_free &rArr; sys_sem_free &rArr; rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tryget_socket
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_lwip.o(.constdata)
</UL>
<P><STRONG><a name="[11d]"></a>inet_getsockname</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, af_inet_lwip.o(i.inet_getsockname))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = inet_getsockname &rArr; lwip_getsockname &rArr; lwip_getaddrname &rArr; netconn_getaddr &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockname
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_lwip.o(.constdata)
</UL>
<P><STRONG><a name="[11f]"></a>inet_poll</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, af_inet_lwip.o(i.inet_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = inet_poll &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tryget_socket
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_lwip.o(.constdata)
</UL>
<P><STRONG><a name="[111]"></a>inet_socket</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, af_inet_lwip.o(i.inet_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = inet_socket &rArr; lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; sys_mbox_new &rArr; rt_mb_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tryget_socket
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_lwip.o(.constdata)
</UL>
<P><STRONG><a name="[45c]"></a>rt_wqueue_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, af_inet_lwip.o(i.rt_wqueue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_wqueue_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_socket
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_accept
</UL>

<P><STRONG><a name="[630]"></a>webclient_clean</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, webclient.o(i.webclient_clean))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = webclient_clean &rArr; closesocket &rArr; sal_closesocket &rArr; socket_delete &rArr; socket_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
</UL>
<BR>[Called By]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_close
</UL>

<P><STRONG><a name="[632]"></a>webclient_connect</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, webclient.o(i.webclient_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = webclient_connect &rArr; socket &rArr; sal_socket &rArr; socket_new &rArr; socket_alloc &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeaddrinfo
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
</UL>

<P><STRONG><a name="[642]"></a>webclient_next_chunk</STRONG> (Thumb, 144 bytes, Stack size 80 bytes, webclient.o(i.webclient_next_chunk))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = webclient_next_chunk &rArr; webclient_read_line &rArr; webclient_recv &rArr; recv &rArr; dfs_net_getsocket &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read_line
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read
</UL>

<P><STRONG><a name="[63f]"></a>webclient_read_line</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, webclient.o(i.webclient_read_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = webclient_read_line &rArr; webclient_recv &rArr; recv &rArr; dfs_net_getsocket &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_next_chunk
</UL>

<P><STRONG><a name="[648]"></a>webclient_recv</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, webclient.o(i.webclient_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = webclient_recv &rArr; recv &rArr; dfs_net_getsocket &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</UL>
<BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read_line
</UL>

<P><STRONG><a name="[633]"></a>webclient_resolve_address</STRONG> (Thumb, 442 bytes, Stack size 104 bytes, webclient.o(i.webclient_resolve_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = webclient_resolve_address &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getaddrinfo
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeaddrinfo
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
</UL>

<P><STRONG><a name="[64a]"></a>webclient_send</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, webclient.o(i.webclient_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = webclient_send &rArr; send &rArr; dfs_net_getsocket &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_write
</UL>

<P><STRONG><a name="[636]"></a>webclient_send_header</STRONG> (Thumb, 482 bytes, Stack size 40 bytes, webclient.o(i.webclient_send_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = webclient_send_header &rArr; webclient_write &rArr; closesocket &rArr; sal_closesocket &rArr; socket_delete &rArr; socket_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_write
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_header_fields_add
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
</UL>

<P><STRONG><a name="[64b]"></a>webclient_strncasecmp</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, webclient.o(i.webclient_strncasecmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = webclient_strncasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_strstri
</UL>

<P><STRONG><a name="[641]"></a>webclient_strstri</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, webclient.o(i.webclient_strstri))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = webclient_strstri &rArr; webclient_strncasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_strncasecmp
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_header_fields_get
</UL>

<P><STRONG><a name="[639]"></a>webclient_get_comm</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, webclient_get_sample.o(i.webclient_get_comm))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = webclient_get_comm &rArr; webclient_read &rArr; webclient_next_chunk &rArr; webclient_read_line &rArr; webclient_recv &rArr; recv &rArr; dfs_net_getsocket &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_session_create
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_content_length_get
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_close
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_test
</UL>

<P><STRONG><a name="[63d]"></a>webclient_get_smpl</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, webclient_get_sample.o(i.webclient_get_smpl))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = webclient_get_smpl &rArr; webclient_request &rArr; webclient_response &rArr; webclient_read &rArr; webclient_next_chunk &rArr; webclient_read_line &rArr; webclient_recv &rArr; recv &rArr; dfs_net_getsocket &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_request
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_test
</UL>

<P><STRONG><a name="[645]"></a>webclient_post_comm</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, webclient_post_sample.o(i.webclient_post_comm))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = webclient_post_comm &rArr; webclient_read &rArr; webclient_next_chunk &rArr; webclient_read_line &rArr; webclient_recv &rArr; recv &rArr; dfs_net_getsocket &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_session_create
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_header_fields_add
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_close
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post_test
</UL>

<P><STRONG><a name="[646]"></a>webclient_post_smpl</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, webclient_post_sample.o(i.webclient_post_smpl))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = webclient_post_smpl &rArr; webclient_request &rArr; webclient_response &rArr; webclient_read &rArr; webclient_next_chunk &rArr; webclient_read_line &rArr; webclient_recv &rArr; recv &rArr; dfs_net_getsocket &rArr; fd_get &rArr; fdt_fd_get &rArr; dfs_file_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_request_header_add
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_request
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_post_test
</UL>

<P><STRONG><a name="[8f]"></a>uart_input</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, gps.o(i.uart_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = uart_input &rArr; rt_sem_release &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gps.o(i.gps_rmc_sample_entry_init)
</UL>
<P><STRONG><a name="[65e]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[650]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[7a]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[7c]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[1a0]"></a>_local_sscanf</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[1a4]"></a>_fp_value</STRONG> (Thumb, 588 bytes, Stack size 96 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
